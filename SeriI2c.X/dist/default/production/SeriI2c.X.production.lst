

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Dec 02 10:27:54 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	inittext,global,class=CODE,delta=2
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 2.10
    65                           ; Generated 31/07/2019 GMT
    66                           ; 
    67                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F1705 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000E                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001C                     	;# 
   124  008C                     	;# 
   125  008E                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  010C                     	;# 
   142  010E                     	;# 
   143  0111                     	;# 
   144  0112                     	;# 
   145  0113                     	;# 
   146  0114                     	;# 
   147  0115                     	;# 
   148  0116                     	;# 
   149  0117                     	;# 
   150  0118                     	;# 
   151  0119                     	;# 
   152  011C                     	;# 
   153  018C                     	;# 
   154  018E                     	;# 
   155  0191                     	;# 
   156  0191                     	;# 
   157  0192                     	;# 
   158  0193                     	;# 
   159  0193                     	;# 
   160  0194                     	;# 
   161  0195                     	;# 
   162  0196                     	;# 
   163  0197                     	;# 
   164  0199                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  019A                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019D                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019E                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019F                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  020C                     	;# 
   190  020E                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  028C                     	;# 
   208  028E                     	;# 
   209  0291                     	;# 
   210  0291                     	;# 
   211  0292                     	;# 
   212  0293                     	;# 
   213  0293                     	;# 
   214  0298                     	;# 
   215  0298                     	;# 
   216  0299                     	;# 
   217  029A                     	;# 
   218  029A                     	;# 
   219  029E                     	;# 
   220  030C                     	;# 
   221  030E                     	;# 
   222  038C                     	;# 
   223  038E                     	;# 
   224  0391                     	;# 
   225  0392                     	;# 
   226  0393                     	;# 
   227  0397                     	;# 
   228  0398                     	;# 
   229  0399                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  041C                     	;# 
   234  041D                     	;# 
   235  041E                     	;# 
   236  0511                     	;# 
   237  0515                     	;# 
   238  0617                     	;# 
   239  0618                     	;# 
   240  0619                     	;# 
   241  0619                     	;# 
   242  061A                     	;# 
   243  061B                     	;# 
   244  061C                     	;# 
   245  061C                     	;# 
   246  0691                     	;# 
   247  0692                     	;# 
   248  0693                     	;# 
   249  0694                     	;# 
   250  0695                     	;# 
   251  0696                     	;# 
   252  0697                     	;# 
   253  0698                     	;# 
   254  0699                     	;# 
   255  069A                     	;# 
   256  069B                     	;# 
   257  069C                     	;# 
   258  069D                     	;# 
   259  069E                     	;# 
   260  069F                     	;# 
   261  0E0F                     	;# 
   262  0E10                     	;# 
   263  0E11                     	;# 
   264  0E12                     	;# 
   265  0E13                     	;# 
   266  0E14                     	;# 
   267  0E15                     	;# 
   268  0E17                     	;# 
   269  0E20                     	;# 
   270  0E21                     	;# 
   271  0E22                     	;# 
   272  0E24                     	;# 
   273  0E25                     	;# 
   274  0E28                     	;# 
   275  0E29                     	;# 
   276  0E2A                     	;# 
   277  0E2B                     	;# 
   278  0E90                     	;# 
   279  0E91                     	;# 
   280  0E92                     	;# 
   281  0E94                     	;# 
   282  0E95                     	;# 
   283  0EA0                     	;# 
   284  0EA1                     	;# 
   285  0EA2                     	;# 
   286  0EA3                     	;# 
   287  0EA4                     	;# 
   288  0EA5                     	;# 
   289  0F0F                     	;# 
   290  0F10                     	;# 
   291  0F11                     	;# 
   292  0F12                     	;# 
   293  0F13                     	;# 
   294  0F14                     	;# 
   295  0F15                     	;# 
   296  0F16                     	;# 
   297  0F17                     	;# 
   298  0F18                     	;# 
   299  0F19                     	;# 
   300  0F1A                     	;# 
   301  0F1B                     	;# 
   302  0F1C                     	;# 
   303  0F1D                     	;# 
   304  0F1E                     	;# 
   305  0F1F                     	;# 
   306  0F20                     	;# 
   307  0F21                     	;# 
   308  0F22                     	;# 
   309  0F23                     	;# 
   310  0F24                     	;# 
   311  0F25                     	;# 
   312  0F26                     	;# 
   313  0F27                     	;# 
   314  0F28                     	;# 
   315  0F29                     	;# 
   316  0F2A                     	;# 
   317  0F2B                     	;# 
   318  0F2C                     	;# 
   319  0F2D                     	;# 
   320  0F9E                     	;# 
   321  0FE4                     	;# 
   322  0FE5                     	;# 
   323  0FE6                     	;# 
   324  0FE7                     	;# 
   325  0FE8                     	;# 
   326  0FE9                     	;# 
   327  0FEA                     	;# 
   328  0FEB                     	;# 
   329  0FED                     	;# 
   330  0FEE                     	;# 
   331  0FEF                     	;# 
   332  0000                     	;# 
   333  0001                     	;# 
   334  0002                     	;# 
   335  0003                     	;# 
   336  0004                     	;# 
   337  0005                     	;# 
   338  0006                     	;# 
   339  0007                     	;# 
   340  0008                     	;# 
   341  0009                     	;# 
   342  000A                     	;# 
   343  000B                     	;# 
   344  000C                     	;# 
   345  000E                     	;# 
   346  0011                     	;# 
   347  0012                     	;# 
   348  0013                     	;# 
   349  0015                     	;# 
   350  0016                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001C                     	;# 
   358  008C                     	;# 
   359  008E                     	;# 
   360  0091                     	;# 
   361  0092                     	;# 
   362  0093                     	;# 
   363  0095                     	;# 
   364  0096                     	;# 
   365  0097                     	;# 
   366  0098                     	;# 
   367  0099                     	;# 
   368  009A                     	;# 
   369  009B                     	;# 
   370  009B                     	;# 
   371  009C                     	;# 
   372  009D                     	;# 
   373  009E                     	;# 
   374  009F                     	;# 
   375  010C                     	;# 
   376  010E                     	;# 
   377  0111                     	;# 
   378  0112                     	;# 
   379  0113                     	;# 
   380  0114                     	;# 
   381  0115                     	;# 
   382  0116                     	;# 
   383  0117                     	;# 
   384  0118                     	;# 
   385  0119                     	;# 
   386  011C                     	;# 
   387  018C                     	;# 
   388  018E                     	;# 
   389  0191                     	;# 
   390  0191                     	;# 
   391  0192                     	;# 
   392  0193                     	;# 
   393  0193                     	;# 
   394  0194                     	;# 
   395  0195                     	;# 
   396  0196                     	;# 
   397  0197                     	;# 
   398  0199                     	;# 
   399  0199                     	;# 
   400  0199                     	;# 
   401  019A                     	;# 
   402  019A                     	;# 
   403  019A                     	;# 
   404  019B                     	;# 
   405  019B                     	;# 
   406  019B                     	;# 
   407  019B                     	;# 
   408  019B                     	;# 
   409  019C                     	;# 
   410  019C                     	;# 
   411  019C                     	;# 
   412  019D                     	;# 
   413  019D                     	;# 
   414  019D                     	;# 
   415  019E                     	;# 
   416  019E                     	;# 
   417  019E                     	;# 
   418  019F                     	;# 
   419  019F                     	;# 
   420  019F                     	;# 
   421  019F                     	;# 
   422  019F                     	;# 
   423  020C                     	;# 
   424  020E                     	;# 
   425  0211                     	;# 
   426  0211                     	;# 
   427  0212                     	;# 
   428  0212                     	;# 
   429  0213                     	;# 
   430  0213                     	;# 
   431  0214                     	;# 
   432  0214                     	;# 
   433  0215                     	;# 
   434  0215                     	;# 
   435  0215                     	;# 
   436  0215                     	;# 
   437  0216                     	;# 
   438  0216                     	;# 
   439  0217                     	;# 
   440  0217                     	;# 
   441  028C                     	;# 
   442  028E                     	;# 
   443  0291                     	;# 
   444  0291                     	;# 
   445  0292                     	;# 
   446  0293                     	;# 
   447  0293                     	;# 
   448  0298                     	;# 
   449  0298                     	;# 
   450  0299                     	;# 
   451  029A                     	;# 
   452  029A                     	;# 
   453  029E                     	;# 
   454  030C                     	;# 
   455  030E                     	;# 
   456  038C                     	;# 
   457  038E                     	;# 
   458  0391                     	;# 
   459  0392                     	;# 
   460  0393                     	;# 
   461  0397                     	;# 
   462  0398                     	;# 
   463  0399                     	;# 
   464  0415                     	;# 
   465  0416                     	;# 
   466  0417                     	;# 
   467  041C                     	;# 
   468  041D                     	;# 
   469  041E                     	;# 
   470  0511                     	;# 
   471  0515                     	;# 
   472  0617                     	;# 
   473  0618                     	;# 
   474  0619                     	;# 
   475  0619                     	;# 
   476  061A                     	;# 
   477  061B                     	;# 
   478  061C                     	;# 
   479  061C                     	;# 
   480  0691                     	;# 
   481  0692                     	;# 
   482  0693                     	;# 
   483  0694                     	;# 
   484  0695                     	;# 
   485  0696                     	;# 
   486  0697                     	;# 
   487  0698                     	;# 
   488  0699                     	;# 
   489  069A                     	;# 
   490  069B                     	;# 
   491  069C                     	;# 
   492  069D                     	;# 
   493  069E                     	;# 
   494  069F                     	;# 
   495  0E0F                     	;# 
   496  0E10                     	;# 
   497  0E11                     	;# 
   498  0E12                     	;# 
   499  0E13                     	;# 
   500  0E14                     	;# 
   501  0E15                     	;# 
   502  0E17                     	;# 
   503  0E20                     	;# 
   504  0E21                     	;# 
   505  0E22                     	;# 
   506  0E24                     	;# 
   507  0E25                     	;# 
   508  0E28                     	;# 
   509  0E29                     	;# 
   510  0E2A                     	;# 
   511  0E2B                     	;# 
   512  0E90                     	;# 
   513  0E91                     	;# 
   514  0E92                     	;# 
   515  0E94                     	;# 
   516  0E95                     	;# 
   517  0EA0                     	;# 
   518  0EA1                     	;# 
   519  0EA2                     	;# 
   520  0EA3                     	;# 
   521  0EA4                     	;# 
   522  0EA5                     	;# 
   523  0F0F                     	;# 
   524  0F10                     	;# 
   525  0F11                     	;# 
   526  0F12                     	;# 
   527  0F13                     	;# 
   528  0F14                     	;# 
   529  0F15                     	;# 
   530  0F16                     	;# 
   531  0F17                     	;# 
   532  0F18                     	;# 
   533  0F19                     	;# 
   534  0F1A                     	;# 
   535  0F1B                     	;# 
   536  0F1C                     	;# 
   537  0F1D                     	;# 
   538  0F1E                     	;# 
   539  0F1F                     	;# 
   540  0F20                     	;# 
   541  0F21                     	;# 
   542  0F22                     	;# 
   543  0F23                     	;# 
   544  0F24                     	;# 
   545  0F25                     	;# 
   546  0F26                     	;# 
   547  0F27                     	;# 
   548  0F28                     	;# 
   549  0F29                     	;# 
   550  0F2A                     	;# 
   551  0F2B                     	;# 
   552  0F2C                     	;# 
   553  0F2D                     	;# 
   554  0F9E                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000E                     	;# 
   580  0011                     	;# 
   581  0012                     	;# 
   582  0013                     	;# 
   583  0015                     	;# 
   584  0016                     	;# 
   585  0016                     	;# 
   586  0017                     	;# 
   587  0018                     	;# 
   588  0019                     	;# 
   589  001A                     	;# 
   590  001B                     	;# 
   591  001C                     	;# 
   592  008C                     	;# 
   593  008E                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0093                     	;# 
   597  0095                     	;# 
   598  0096                     	;# 
   599  0097                     	;# 
   600  0098                     	;# 
   601  0099                     	;# 
   602  009A                     	;# 
   603  009B                     	;# 
   604  009B                     	;# 
   605  009C                     	;# 
   606  009D                     	;# 
   607  009E                     	;# 
   608  009F                     	;# 
   609  010C                     	;# 
   610  010E                     	;# 
   611  0111                     	;# 
   612  0112                     	;# 
   613  0113                     	;# 
   614  0114                     	;# 
   615  0115                     	;# 
   616  0116                     	;# 
   617  0117                     	;# 
   618  0118                     	;# 
   619  0119                     	;# 
   620  011C                     	;# 
   621  018C                     	;# 
   622  018E                     	;# 
   623  0191                     	;# 
   624  0191                     	;# 
   625  0192                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0194                     	;# 
   629  0195                     	;# 
   630  0196                     	;# 
   631  0197                     	;# 
   632  0199                     	;# 
   633  0199                     	;# 
   634  0199                     	;# 
   635  019A                     	;# 
   636  019A                     	;# 
   637  019A                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019C                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019D                     	;# 
   647  019D                     	;# 
   648  019D                     	;# 
   649  019E                     	;# 
   650  019E                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  019F                     	;# 
   654  019F                     	;# 
   655  019F                     	;# 
   656  019F                     	;# 
   657  020C                     	;# 
   658  020E                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  028C                     	;# 
   676  028E                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  029A                     	;# 
   687  029E                     	;# 
   688  030C                     	;# 
   689  030E                     	;# 
   690  038C                     	;# 
   691  038E                     	;# 
   692  0391                     	;# 
   693  0392                     	;# 
   694  0393                     	;# 
   695  0397                     	;# 
   696  0398                     	;# 
   697  0399                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  041C                     	;# 
   702  041D                     	;# 
   703  041E                     	;# 
   704  0511                     	;# 
   705  0515                     	;# 
   706  0617                     	;# 
   707  0618                     	;# 
   708  0619                     	;# 
   709  0619                     	;# 
   710  061A                     	;# 
   711  061B                     	;# 
   712  061C                     	;# 
   713  061C                     	;# 
   714  0691                     	;# 
   715  0692                     	;# 
   716  0693                     	;# 
   717  0694                     	;# 
   718  0695                     	;# 
   719  0696                     	;# 
   720  0697                     	;# 
   721  0698                     	;# 
   722  0699                     	;# 
   723  069A                     	;# 
   724  069B                     	;# 
   725  069C                     	;# 
   726  069D                     	;# 
   727  069E                     	;# 
   728  069F                     	;# 
   729  0E0F                     	;# 
   730  0E10                     	;# 
   731  0E11                     	;# 
   732  0E12                     	;# 
   733  0E13                     	;# 
   734  0E14                     	;# 
   735  0E15                     	;# 
   736  0E17                     	;# 
   737  0E20                     	;# 
   738  0E21                     	;# 
   739  0E22                     	;# 
   740  0E24                     	;# 
   741  0E25                     	;# 
   742  0E28                     	;# 
   743  0E29                     	;# 
   744  0E2A                     	;# 
   745  0E2B                     	;# 
   746  0E90                     	;# 
   747  0E91                     	;# 
   748  0E92                     	;# 
   749  0E94                     	;# 
   750  0E95                     	;# 
   751  0EA0                     	;# 
   752  0EA1                     	;# 
   753  0EA2                     	;# 
   754  0EA3                     	;# 
   755  0EA4                     	;# 
   756  0EA5                     	;# 
   757  0F0F                     	;# 
   758  0F10                     	;# 
   759  0F11                     	;# 
   760  0F12                     	;# 
   761  0F13                     	;# 
   762  0F14                     	;# 
   763  0F15                     	;# 
   764  0F16                     	;# 
   765  0F17                     	;# 
   766  0F18                     	;# 
   767  0F19                     	;# 
   768  0F1A                     	;# 
   769  0F1B                     	;# 
   770  0F1C                     	;# 
   771  0F1D                     	;# 
   772  0F1E                     	;# 
   773  0F1F                     	;# 
   774  0F20                     	;# 
   775  0F21                     	;# 
   776  0F22                     	;# 
   777  0F23                     	;# 
   778  0F24                     	;# 
   779  0F25                     	;# 
   780  0F26                     	;# 
   781  0F27                     	;# 
   782  0F28                     	;# 
   783  0F29                     	;# 
   784  0F2A                     	;# 
   785  0F2B                     	;# 
   786  0F2C                     	;# 
   787  0F2D                     	;# 
   788  0F9E                     	;# 
   789  0FE4                     	;# 
   790  0FE5                     	;# 
   791  0FE6                     	;# 
   792  0FE7                     	;# 
   793  0FE8                     	;# 
   794  0FE9                     	;# 
   795  0FEA                     	;# 
   796  0FEB                     	;# 
   797  0FED                     	;# 
   798  0FEE                     	;# 
   799  0FEF                     	;# 
   800  0000                     	;# 
   801  0001                     	;# 
   802  0002                     	;# 
   803  0003                     	;# 
   804  0004                     	;# 
   805  0005                     	;# 
   806  0006                     	;# 
   807  0007                     	;# 
   808  0008                     	;# 
   809  0009                     	;# 
   810  000A                     	;# 
   811  000B                     	;# 
   812  000C                     	;# 
   813  000E                     	;# 
   814  0011                     	;# 
   815  0012                     	;# 
   816  0013                     	;# 
   817  0015                     	;# 
   818  0016                     	;# 
   819  0016                     	;# 
   820  0017                     	;# 
   821  0018                     	;# 
   822  0019                     	;# 
   823  001A                     	;# 
   824  001B                     	;# 
   825  001C                     	;# 
   826  008C                     	;# 
   827  008E                     	;# 
   828  0091                     	;# 
   829  0092                     	;# 
   830  0093                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0097                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009A                     	;# 
   837  009B                     	;# 
   838  009B                     	;# 
   839  009C                     	;# 
   840  009D                     	;# 
   841  009E                     	;# 
   842  009F                     	;# 
   843  010C                     	;# 
   844  010E                     	;# 
   845  0111                     	;# 
   846  0112                     	;# 
   847  0113                     	;# 
   848  0114                     	;# 
   849  0115                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  0118                     	;# 
   853  0119                     	;# 
   854  011C                     	;# 
   855  018C                     	;# 
   856  018E                     	;# 
   857  0191                     	;# 
   858  0191                     	;# 
   859  0192                     	;# 
   860  0193                     	;# 
   861  0193                     	;# 
   862  0194                     	;# 
   863  0195                     	;# 
   864  0196                     	;# 
   865  0197                     	;# 
   866  0199                     	;# 
   867  0199                     	;# 
   868  0199                     	;# 
   869  019A                     	;# 
   870  019A                     	;# 
   871  019A                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019C                     	;# 
   878  019C                     	;# 
   879  019C                     	;# 
   880  019D                     	;# 
   881  019D                     	;# 
   882  019D                     	;# 
   883  019E                     	;# 
   884  019E                     	;# 
   885  019E                     	;# 
   886  019F                     	;# 
   887  019F                     	;# 
   888  019F                     	;# 
   889  019F                     	;# 
   890  019F                     	;# 
   891  020C                     	;# 
   892  020E                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  028C                     	;# 
   910  028E                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0293                     	;# 
   916  0298                     	;# 
   917  0298                     	;# 
   918  0299                     	;# 
   919  029A                     	;# 
   920  029A                     	;# 
   921  029E                     	;# 
   922  030C                     	;# 
   923  030E                     	;# 
   924  038C                     	;# 
   925  038E                     	;# 
   926  0391                     	;# 
   927  0392                     	;# 
   928  0393                     	;# 
   929  0397                     	;# 
   930  0398                     	;# 
   931  0399                     	;# 
   932  0415                     	;# 
   933  0416                     	;# 
   934  0417                     	;# 
   935  041C                     	;# 
   936  041D                     	;# 
   937  041E                     	;# 
   938  0511                     	;# 
   939  0515                     	;# 
   940  0617                     	;# 
   941  0618                     	;# 
   942  0619                     	;# 
   943  0619                     	;# 
   944  061A                     	;# 
   945  061B                     	;# 
   946  061C                     	;# 
   947  061C                     	;# 
   948  0691                     	;# 
   949  0692                     	;# 
   950  0693                     	;# 
   951  0694                     	;# 
   952  0695                     	;# 
   953  0696                     	;# 
   954  0697                     	;# 
   955  0698                     	;# 
   956  0699                     	;# 
   957  069A                     	;# 
   958  069B                     	;# 
   959  069C                     	;# 
   960  069D                     	;# 
   961  069E                     	;# 
   962  069F                     	;# 
   963  0E0F                     	;# 
   964  0E10                     	;# 
   965  0E11                     	;# 
   966  0E12                     	;# 
   967  0E13                     	;# 
   968  0E14                     	;# 
   969  0E15                     	;# 
   970  0E17                     	;# 
   971  0E20                     	;# 
   972  0E21                     	;# 
   973  0E22                     	;# 
   974  0E24                     	;# 
   975  0E25                     	;# 
   976  0E28                     	;# 
   977  0E29                     	;# 
   978  0E2A                     	;# 
   979  0E2B                     	;# 
   980  0E90                     	;# 
   981  0E91                     	;# 
   982  0E92                     	;# 
   983  0E94                     	;# 
   984  0E95                     	;# 
   985  0EA0                     	;# 
   986  0EA1                     	;# 
   987  0EA2                     	;# 
   988  0EA3                     	;# 
   989  0EA4                     	;# 
   990  0EA5                     	;# 
   991  0F0F                     	;# 
   992  0F10                     	;# 
   993  0F11                     	;# 
   994  0F12                     	;# 
   995  0F13                     	;# 
   996  0F14                     	;# 
   997  0F15                     	;# 
   998  0F16                     	;# 
   999  0F17                     	;# 
  1000  0F18                     	;# 
  1001  0F19                     	;# 
  1002  0F1A                     	;# 
  1003  0F1B                     	;# 
  1004  0F1C                     	;# 
  1005  0F1D                     	;# 
  1006  0F1E                     	;# 
  1007  0F1F                     	;# 
  1008  0F20                     	;# 
  1009  0F21                     	;# 
  1010  0F22                     	;# 
  1011  0F23                     	;# 
  1012  0F24                     	;# 
  1013  0F25                     	;# 
  1014  0F26                     	;# 
  1015  0F27                     	;# 
  1016  0F28                     	;# 
  1017  0F29                     	;# 
  1018  0F2A                     	;# 
  1019  0F2B                     	;# 
  1020  0F2C                     	;# 
  1021  0F2D                     	;# 
  1022  0F9E                     	;# 
  1023  0FE4                     	;# 
  1024  0FE5                     	;# 
  1025  0FE6                     	;# 
  1026  0FE7                     	;# 
  1027  0FE8                     	;# 
  1028  0FE9                     	;# 
  1029  0FEA                     	;# 
  1030  0FEB                     	;# 
  1031  0FED                     	;# 
  1032  0FEE                     	;# 
  1033  0FEF                     	;# 
  1034                           
  1035                           	psect	idataBANK0
  1036  0D99                     __pidataBANK0:	
  1037                           
  1038                           ;initializer for _cmdArray
  1039  0D99  342B               	retlw	low (_cmdEcho| (0+32768))
  1040  0D9A  3490               	retlw	high (_cmdEcho| (0+32768))
  1041  0D9B  3434               	retlw	low (_cmdGet| (0+32768))
  1042  0D9C  3490               	retlw	high (_cmdGet| (0+32768))
  1043  0D9D  3430               	retlw	low (_cmdSet| (0+32768))
  1044  0D9E  3490               	retlw	high (_cmdSet| (0+32768))
  1045  0D9F  3438               	retlw	low (_cmdX| (0+32768))
  1046  0DA0  3490               	retlw	high (_cmdX| (0+32768))
  1047                           
  1048                           ;initializer for prefX@F4812
  1049  0DA1  3458               	retlw	88
  1050  0DA2  343A               	retlw	58
  1051  0DA3  3400               	retlw	0
  1052                           
  1053                           	psect	idataBANK1
  1054  0D86                     __pidataBANK1:	
  1055                           
  1056                           ;initializer for _prefArray
  1057  0D86  349E               	retlw	low _prefEcho
  1058  0D87  3403               	retlw	high _prefEcho
  1059  0D88  343E               	retlw	low _prefGet
  1060  0D89  3402               	retlw	high _prefGet
  1061  0D8A  34AC               	retlw	low _prefSet
  1062  0D8B  3400               	retlw	high _prefSet
  1063  0D8C  34F0               	retlw	low _prefX
  1064  0D8D  3402               	retlw	high _prefX
  1065                           
  1066                           	psect	stringtext1
  1067  06C3                     __pstringtext1:	
  1068  06C3                     _base64chars:	
  1069  06C3  3441               	retlw	65
  1070  06C4  3442               	retlw	66
  1071  06C5  3443               	retlw	67
  1072  06C6  3444               	retlw	68
  1073  06C7  3445               	retlw	69
  1074  06C8  3446               	retlw	70
  1075  06C9  3447               	retlw	71
  1076  06CA  3448               	retlw	72
  1077  06CB  3449               	retlw	73
  1078  06CC  344A               	retlw	74
  1079  06CD  344B               	retlw	75
  1080  06CE  344C               	retlw	76
  1081  06CF  344D               	retlw	77
  1082  06D0  344E               	retlw	78
  1083  06D1  344F               	retlw	79
  1084  06D2  3450               	retlw	80
  1085  06D3  3451               	retlw	81
  1086  06D4  3452               	retlw	82
  1087  06D5  3453               	retlw	83
  1088  06D6  3454               	retlw	84
  1089  06D7  3455               	retlw	85
  1090  06D8  3456               	retlw	86
  1091  06D9  3457               	retlw	87
  1092  06DA  3458               	retlw	88
  1093  06DB  3459               	retlw	89
  1094  06DC  345A               	retlw	90
  1095  06DD  3461               	retlw	97
  1096  06DE  3462               	retlw	98
  1097  06DF  3463               	retlw	99
  1098  06E0  3464               	retlw	100
  1099  06E1  3465               	retlw	101
  1100  06E2  3466               	retlw	102
  1101  06E3  3467               	retlw	103
  1102  06E4  3468               	retlw	104
  1103  06E5  3469               	retlw	105
  1104  06E6  346A               	retlw	106
  1105  06E7  346B               	retlw	107
  1106  06E8  346C               	retlw	108
  1107  06E9  346D               	retlw	109
  1108  06EA  346E               	retlw	110
  1109  06EB  346F               	retlw	111
  1110  06EC  3470               	retlw	112
  1111  06ED  3471               	retlw	113
  1112  06EE  3472               	retlw	114
  1113  06EF  3473               	retlw	115
  1114  06F0  3474               	retlw	116
  1115  06F1  3475               	retlw	117
  1116  06F2  3476               	retlw	118
  1117  06F3  3477               	retlw	119
  1118  06F4  3478               	retlw	120
  1119  06F5  3479               	retlw	121
  1120  06F6  347A               	retlw	122
  1121  06F7  3430               	retlw	48
  1122  06F8  3431               	retlw	49
  1123  06F9  3432               	retlw	50
  1124  06FA  3433               	retlw	51
  1125  06FB  3434               	retlw	52
  1126  06FC  3435               	retlw	53
  1127  06FD  3436               	retlw	54
  1128  06FE  3437               	retlw	55
  1129  06FF  3438               	retlw	56
  1130  0700  3439               	retlw	57
  1131  0701  342B               	retlw	43
  1132  0702  342F               	retlw	47
  1133  0703  3400               	retlw	0
  1134  0704                     __end_of_base64chars:	
  1135                           
  1136                           	psect	stringtext2
  1137  1000                     __pstringtext2:	
  1138  1000                     _ivaMess:	
  1139  1000  3449               	retlw	73
  1140  1001  346E               	retlw	110
  1141  1002  3476               	retlw	118
  1142  1003  3461               	retlw	97
  1143  1004  346C               	retlw	108
  1144  1005  3469               	retlw	105
  1145  1006  3464               	retlw	100
  1146  1007  3420               	retlw	32
  1147  1008  3441               	retlw	65
  1148  1009  3452               	retlw	82
  1149  100A  3447               	retlw	71
  1150  100B  3455               	retlw	85
  1151  100C  344D               	retlw	77
  1152  100D  3445               	retlw	69
  1153  100E  344E               	retlw	78
  1154  100F  3454               	retlw	84
  1155  1010  343A               	retlw	58
  1156  1011  3420               	retlw	32
  1157  1012  3400               	retlw	0
  1158  1013                     __end_of_ivaMess:	
  1159                           
  1160                           	psect	stringtext3
  1161  1013                     __pstringtext3:	
  1162  1013                     _errMess:	
  1163  1013  3455               	retlw	85
  1164  1014  346E               	retlw	110
  1165  1015  346B               	retlw	107
  1166  1016  346E               	retlw	110
  1167  1017  346F               	retlw	111
  1168  1018  3477               	retlw	119
  1169  1019  346E               	retlw	110
  1170  101A  3420               	retlw	32
  1171  101B  3463               	retlw	99
  1172  101C  346F               	retlw	111
  1173  101D  346D               	retlw	109
  1174  101E  346D               	retlw	109
  1175  101F  3461               	retlw	97
  1176  1020  346E               	retlw	110
  1177  1021  3464               	retlw	100
  1178  1022  343A               	retlw	58
  1179  1023  3420               	retlw	32
  1180  1024  3400               	retlw	0
  1181  1025                     __end_of_errMess:	
  1182                           
  1183                           	psect	stringtext4
  1184  1025                     __pstringtext4:	
  1185  1025                     _msghi:	
  1186  1025  3448               	retlw	72
  1187  1026  3469               	retlw	105
  1188  1027  3421               	retlw	33
  1189  1028  340D               	retlw	13
  1190  1029  340A               	retlw	10
  1191  102A  3400               	retlw	0
  1192  102B                     __end_of_msghi:	
  1193                           
  1194                           	psect	stringtext5
  1195  102B                     __pstringtext5:	
  1196  102B                     _cmdEcho:	
  1197  102B  3445               	retlw	69
  1198  102C  3443               	retlw	67
  1199  102D  3448               	retlw	72
  1200  102E  344F               	retlw	79
  1201  102F  3400               	retlw	0
  1202  1030                     __end_of_cmdEcho:	
  1203                           
  1204                           	psect	stringtext6
  1205  1030                     __pstringtext6:	
  1206  1030                     _cmdSet:	
  1207  1030  3453               	retlw	83
  1208  1031  3445               	retlw	69
  1209  1032  3454               	retlw	84
  1210  1033  3400               	retlw	0
  1211  1034                     __end_of_cmdSet:	
  1212                           
  1213                           	psect	stringtext7
  1214  1034                     __pstringtext7:	
  1215  1034                     _cmdGet:	
  1216  1034  3447               	retlw	71
  1217  1035  3445               	retlw	69
  1218  1036  3454               	retlw	84
  1219  1037  3400               	retlw	0
  1220  1038                     __end_of_cmdGet:	
  1221                           
  1222                           	psect	stringtext8
  1223  1038                     __pstringtext8:	
  1224  1038                     _cmdX:	
  1225  1038  3458               	retlw	88
  1226  1039  3400               	retlw	0
  1227  103A                     __end_of_cmdX:	
  1228  000E                     _PORTCbits	set	14
  1229  000B                     _INTCONbits	set	11
  1230  0011                     _PIR1bits	set	17
  1231  0091                     _PIE1bits	set	145
  1232  0097                     _WDTCON	set	151
  1233  008E                     _TRISC	set	142
  1234  008C                     _TRISA	set	140
  1235  0099                     _OSCCON	set	153
  1236  019B                     _SP1BRG	set	411
  1237  019A                     _TX1REG	set	410
  1238  019E                     _TX1STAbits	set	414
  1239  019F                     _BAUD1CON	set	415
  1240  019E                     _TX1STA	set	414
  1241  018E                     _ANSELC	set	398
  1242  018C                     _ANSELA	set	396
  1243  019D                     _RC1STA	set	413
  1244  0199                     _RC1REG	set	409
  1245  019D                     _RC1STAbits	set	413
  1246  0215                     _SSP1CON1bits	set	533
  1247  0214                     _SSP1STATbits	set	532
  1248  0211                     _SSP1BUF	set	529
  1249  0216                     _SSP1CON2bits	set	534
  1250  0212                     _SSP1ADD	set	530
  1251  0215                     _SSP1CON1	set	533
  1252  0214                     _SSP1STAT	set	532
  1253  020E                     _WPUC	set	526
  1254  020C                     _WPUA	set	524
  1255  0E24                     _RXPPS	set	3620
  1256  0EA1                     _RC1PPS	set	3745
  1257  0EA0                     _RC0PPS	set	3744
  1258  0EA4                     _RC4PPS	set	3748
  1259                           
  1260                           ; #config settings
  1261  0000                     
  1262                           	psect	cinit
  1263  0072                     start_initialization:	
  1264  0072                     __initialization:	
  1265                           
  1266                           ; Initialize objects allocated to BANK0
  1267  0072  3099               	movlw	low __pidataBANK0
  1268  0073  0084               	movwf	4
  1269  0074  308D               	movlw	(high __pidataBANK0)| (0+128)
  1270  0075  0085               	movwf	5
  1271  0076  305C               	movlw	low __pdataBANK0
  1272  0077  0086               	movwf	6
  1273  0078  3000               	movlw	high __pdataBANK0
  1274  0079  0087               	movwf	7
  1275  007A  300B               	movlw	11
  1276  007B  318D  2580  3180   	fcall	init_ram
  1277                           
  1278                           ; Initialize objects allocated to BANK1
  1279  007E  3086               	movlw	low __pidataBANK1
  1280  007F  0084               	movwf	4
  1281  0080  308D               	movlw	(high __pidataBANK1)| (0+128)
  1282  0081  0085               	movwf	5
  1283  0082  30E0               	movlw	low __pdataBANK1
  1284  0083  0086               	movwf	6
  1285  0084  3000               	movlw	high __pdataBANK1
  1286  0085  0087               	movwf	7
  1287  0086  3008               	movlw	8
  1288  0087  318D  2580  3180   	fcall	init_ram
  1289                           
  1290                           ; Clear objects allocated to COMMON
  1291  008A  01F0               	clrf	__pbssCOMMON& (0+127)
  1292  008B  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1293  008C  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1294  008D  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1295  008E  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1296  008F  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  1297                           
  1298                           ; Clear objects allocated to BANK0
  1299  0090  3067               	movlw	low __pbssBANK0
  1300  0091  0084               	movwf	4
  1301  0092  3000               	movlw	high __pbssBANK0
  1302  0093  0085               	movwf	5
  1303  0094  3007               	movlw	7
  1304  0095  318D  257A  3180   	fcall	clear_ram0
  1305                           
  1306                           ; Clear objects allocated to BANK1
  1307  0098  30A0               	movlw	low __pbssBANK1
  1308  0099  0084               	movwf	4
  1309  009A  3000               	movlw	high __pbssBANK1
  1310  009B  0085               	movwf	5
  1311  009C  3040               	movlw	64
  1312  009D  318D  257A  3180   	fcall	clear_ram0
  1313                           
  1314                           ; Clear objects allocated to BANK2
  1315  00A0  3020               	movlw	low __pbssBANK2
  1316  00A1  0084               	movwf	4
  1317  00A2  3001               	movlw	high __pbssBANK2
  1318  00A3  0085               	movwf	5
  1319  00A4  3050               	movlw	80
  1320  00A5  318D  257A  3180   	fcall	clear_ram0
  1321  00A8                     end_of_initialization:	
  1322                           ;End of C runtime variable initialization code
  1323                           
  1324  00A8                     __end_of__initialization:	
  1325  00A8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1326  00A9  0020               	movlb	0
  1327  00AA  3184  2C39         	ljmp	_main	;jump to C main() function
  1328                           
  1329                           	psect	bssCOMMON
  1330  0070                     __pbssCOMMON:	
  1331  0070                     _i2cAddr:	
  1332  0070                     	ds	1
  1333  0071                     _echoFLG:	
  1334  0071                     	ds	1
  1335  0072                     _TxFlag:	
  1336  0072                     	ds	1
  1337  0073                     _Sending:	
  1338  0073                     	ds	1
  1339  0074                     _Tindex:	
  1340  0074                     	ds	1
  1341  0075                     _Index:	
  1342  0075                     	ds	1
  1343                           
  1344                           	psect	bssBANK0
  1345  0067                     __pbssBANK0:	
  1346  0067                     _convErr:	
  1347  0067                     	ds	1
  1348  0068                     _convData:	
  1349  0068                     	ds	1
  1350  0069                     _convMode:	
  1351  0069                     	ds	1
  1352  006A                     _lineBuff:	
  1353  006A                     	ds	1
  1354  006B                     _i2cNdata:	
  1355  006B                     	ds	1
  1356  006C                     _i2cReg:	
  1357  006C                     	ds	1
  1358  006D                     _RcvFlag:	
  1359  006D                     	ds	1
  1360                           
  1361                           	psect	dataBANK0
  1362  005C                     __pdataBANK0:	
  1363  005C                     _cmdArray:	
  1364  005C                     	ds	8
  1365  0064                     prefX@F4812:	
  1366  0064                     	ds	3
  1367                           
  1368                           	psect	bssBANK1
  1369  00A0                     __pbssBANK1:	
  1370  00A0                     _SBuff:	
  1371  00A0                     	ds	32
  1372  00C0                     _SndBuf:	
  1373  00C0                     	ds	32
  1374                           
  1375                           	psect	dataBANK1
  1376  00E0                     __pdataBANK1:	
  1377  00E0                     _prefArray:	
  1378  00E0                     	ds	8
  1379                           
  1380                           	psect	bssBANK2
  1381  0120                     __pbssBANK2:	
  1382  0120                     _i2cbuff:	
  1383  0120                     	ds	16
  1384  0130                     _Buffer:	
  1385  0130                     	ds	32
  1386  0150                     _RcvBuf:	
  1387  0150                     	ds	32
  1388                           
  1389                           	psect	inittext
  1390  0D80                     init_ram:	
  1391  0D80  00FE               	movwf	btemp
  1392  0D81                     initloop:	
  1393  0D81  0012               	moviw fsr0++
  1394  0D82  001E               	movwi fsr1++
  1395  0D83  0BFE               	decfsz	btemp,f
  1396  0D84  2D81               	goto	initloop
  1397  0D85  3400               	retlw	0
  1398                           
  1399                           	psect	clrtext
  1400  0D7A                     clear_ram0:	
  1401                           ;	Called with FSR0 containing the base address, and
  1402                           ;	WREG with the size to clear
  1403                           
  1404  0D7A  0064               	clrwdt	;clear the watchdog before getting into this loop
  1405  0D7B                     clrloop0:	
  1406  0D7B  0180               	clrf	0	;clear RAM location pointed to by FSR
  1407  0D7C  3101               	addfsr 0,1
  1408  0D7D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1409  0D7E  2D7B               	goto	clrloop0	;have we reached the end yet?
  1410  0D7F  3400               	retlw	0	;all done for this memory range, return
  1411                           
  1412                           	psect	cstackCOMMON
  1413  0076                     __pcstackCOMMON:	
  1414  0076                     ?_Send:	
  1415  0076                     ?_initI2C:	
  1416                           ; 1 bytes @ 0x0
  1417                           
  1418  0076                     ?_SendStr:	
  1419                           ; 1 bytes @ 0x0
  1420                           
  1421  0076                     ?_trySend:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424  0076                     ?_copyBuffer:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427  0076                     ?_parseCommand:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430  0076                     ?_QueOut:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433  0076                     ?_waitIdleI2C:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436  0076                     ?_printInvArgErr:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439  0076                     ?_nextItem:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442  0076                     ?_isr:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0076                     ?_QueIn:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0076                     ?_SendHex:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0076                     ?_setConvMode:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0076                     ?_newConvLine:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0076                     ?_skipblankLine:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0076                     ?_endofLine:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0076                     ?_myUpper:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0076                     ?_stobyte:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0076                     ?i1_QueIn:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0076                     ??i1_QueIn:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0076                     ?i1_QueOut:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0076                     ??i1_QueOut:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0076                     ?i1_Send:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0076                     ?_main:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487                           
  1488                           ; 2 bytes @ 0x0
  1489  0076                     	ds	1
  1490  0077                     i1QueIn@c:	
  1491  0077                     i1QueOut@c:	
  1492                           ; 1 bytes @ 0x1
  1493                           
  1494                           
  1495                           ; 1 bytes @ 0x1
  1496  0077                     	ds	1
  1497  0078                     ??i1_Send:	
  1498                           
  1499                           ; 1 bytes @ 0x2
  1500  0078                     	ds	1
  1501  0079                     i1Send@txchar:	
  1502                           
  1503                           ; 1 bytes @ 0x3
  1504  0079                     	ds	1
  1505  007A                     ??_isr:	
  1506                           
  1507                           ; 1 bytes @ 0x4
  1508  007A                     	ds	1
  1509  007B                     isr@data:	
  1510                           
  1511                           ; 1 bytes @ 0x5
  1512  007B                     	ds	1
  1513                           
  1514                           	psect	cstackBANK0
  1515  0020                     __pcstackBANK0:	
  1516  0020                     ??_initI2C:	
  1517  0020                     ?_copyConstStr:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0020                     ??_copyBuffer:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0020                     ??_QueOut:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0020                     ??_waitIdleI2C:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0020                     ??_QueIn:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0020                     ?_sendI2C:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0020                     ?_sendI2Cbyte:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0020                     ??_setConvMode:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  0020                     ??_myUpper:	
  1542                           ; 1 bytes @ 0x0
  1543                           
  1544  0020                     ?___bmul:	
  1545                           ; 1 bytes @ 0x0
  1546                           
  1547  0020                     ?_isspace:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  0020                     ?_isdigit:	
  1551                           ; 2 bytes @ 0x0
  1552                           
  1553  0020                     ?_isupper:	
  1554                           ; 2 bytes @ 0x0
  1555                           
  1556  0020                     ?_readI2C:	
  1557                           ; 2 bytes @ 0x0
  1558                           
  1559  0020                     sendI2C@buf:	
  1560                           ; 2 bytes @ 0x0
  1561                           
  1562  0020                     sendI2Cbyte@reg:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0020                     readI2C@buf:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0020                     myUpper@c:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0020                     ___bmul@multiplicand:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0020                     copyConstStr@src:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0020                     isdigit@c:	
  1578                           ; 2 bytes @ 0x0
  1579                           
  1580  0020                     isspace@c:	
  1581                           ; 2 bytes @ 0x0
  1582                           
  1583  0020                     isupper@c:	
  1584                           ; 2 bytes @ 0x0
  1585                           
  1586                           
  1587                           ; 2 bytes @ 0x0
  1588  0020                     	ds	1
  1589  0021                     ?_cmdCheck:	
  1590  0021                     ??___bmul:	
  1591                           ; 1 bytes @ 0x1
  1592                           
  1593  0021                     copyBuffer@p:	
  1594                           ; 1 bytes @ 0x1
  1595                           
  1596  0021                     QueIn@c:	
  1597                           ; 1 bytes @ 0x1
  1598                           
  1599  0021                     QueOut@c:	
  1600                           ; 1 bytes @ 0x1
  1601                           
  1602  0021                     initI2C@flag:	
  1603                           ; 1 bytes @ 0x1
  1604                           
  1605  0021                     sendI2C@n:	
  1606                           ; 1 bytes @ 0x1
  1607                           
  1608  0021                     sendI2Cbyte@data:	
  1609                           ; 1 bytes @ 0x1
  1610                           
  1611  0021                     readI2C@n:	
  1612                           ; 1 bytes @ 0x1
  1613                           
  1614  0021                     setConvMode@m:	
  1615                           ; 1 bytes @ 0x1
  1616                           
  1617  0021                     cmdCheck@c:	
  1618                           ; 1 bytes @ 0x1
  1619                           
  1620                           
  1621                           ; 2 bytes @ 0x1
  1622  0021                     	ds	1
  1623  0022                     ??_Send:	
  1624  0022                     ??_trySend:	
  1625                           ; 1 bytes @ 0x2
  1626                           
  1627  0022                     ??_isspace:	
  1628                           ; 1 bytes @ 0x2
  1629                           
  1630  0022                     ??_isdigit:	
  1631                           ; 1 bytes @ 0x2
  1632                           
  1633  0022                     ??_isupper:	
  1634                           ; 1 bytes @ 0x2
  1635                           
  1636  0022                     ??_sendI2C:	
  1637                           ; 1 bytes @ 0x2
  1638                           
  1639  0022                     ??_sendI2Cbyte:	
  1640                           ; 1 bytes @ 0x2
  1641                           
  1642  0022                     ??_readI2C:	
  1643                           ; 1 bytes @ 0x2
  1644                           
  1645  0022                     ??_newConvLine:	
  1646                           ; 1 bytes @ 0x2
  1647                           
  1648  0022                     copyBuffer@q:	
  1649                           ; 1 bytes @ 0x2
  1650                           
  1651  0022                     copyConstStr@dst:	
  1652                           ; 1 bytes @ 0x2
  1653                           
  1654  0022                     initI2C@stat:	
  1655                           ; 1 bytes @ 0x2
  1656                           
  1657  0022                     sendI2Cbyte@addr:	
  1658                           ; 1 bytes @ 0x2
  1659                           
  1660  0022                     ___bmul@product:	
  1661                           ; 1 bytes @ 0x2
  1662                           
  1663                           
  1664                           ; 1 bytes @ 0x2
  1665  0022                     	ds	1
  1666  0023                     ??_copyConstStr:	
  1667  0023                     ??_cmdCheck:	
  1668                           ; 1 bytes @ 0x3
  1669                           
  1670  0023                     Send@txchar:	
  1671                           ; 1 bytes @ 0x3
  1672                           
  1673  0023                     initI2C@baud:	
  1674                           ; 1 bytes @ 0x3
  1675                           
  1676  0023                     sendI2C@addr:	
  1677                           ; 1 bytes @ 0x3
  1678                           
  1679  0023                     readI2C@num:	
  1680                           ; 1 bytes @ 0x3
  1681                           
  1682  0023                     newConvLine@p:	
  1683                           ; 1 bytes @ 0x3
  1684                           
  1685  0023                     ___bmul@multiplier:	
  1686                           ; 1 bytes @ 0x3
  1687                           
  1688                           
  1689                           ; 1 bytes @ 0x3
  1690  0023                     	ds	1
  1691  0024                     ??_SendStr:	
  1692  0024                     ??_SendHex:	
  1693                           ; 1 bytes @ 0x4
  1694                           
  1695  0024                     readI2C@addr:	
  1696                           ; 1 bytes @ 0x4
  1697                           
  1698  0024                     cmdCheck@n:	
  1699                           ; 1 bytes @ 0x4
  1700                           
  1701  0024                     _isspace$962:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704                           
  1705                           ; 1 bytes @ 0x4
  1706  0024                     	ds	1
  1707  0025                     ??_skipblankLine:	
  1708  0025                     SendStr@i:	
  1709                           ; 1 bytes @ 0x5
  1710                           
  1711  0025                     cmdCheck@b:	
  1712                           ; 1 bytes @ 0x5
  1713                           
  1714                           
  1715                           ; 1 bytes @ 0x5
  1716  0025                     	ds	1
  1717  0026                     ??_stobyte:	
  1718  0026                     SendStr@str:	
  1719                           ; 1 bytes @ 0x6
  1720                           
  1721  0026                     SendHex@b:	
  1722                           ; 1 bytes @ 0x6
  1723                           
  1724                           
  1725                           ; 1 bytes @ 0x6
  1726  0026                     	ds	1
  1727  0027                     ?_sndStr:	
  1728  0027                     SendHex@c:	
  1729                           ; 1 bytes @ 0x7
  1730                           
  1731  0027                     sndStr@p:	
  1732                           ; 1 bytes @ 0x7
  1733                           
  1734  0027                     _skipblankLine$562:	
  1735                           ; 2 bytes @ 0x7
  1736                           
  1737                           
  1738                           ; 2 bytes @ 0x7
  1739  0027                     	ds	2
  1740  0029                     ??_sndStr:	
  1741  0029                     _skipblankLine$563:	
  1742                           ; 1 bytes @ 0x9
  1743                           
  1744                           
  1745                           ; 1 bytes @ 0x9
  1746  0029                     	ds	1
  1747  002A                     ??_endofLine:	
  1748  002A                     sndStr@q:	
  1749                           ; 1 bytes @ 0xA
  1750                           
  1751  002A                     endofLine@flag:	
  1752                           ; 1 bytes @ 0xA
  1753                           
  1754  002A                     _stobyte$596:	
  1755                           ; 1 bytes @ 0xA
  1756                           
  1757                           
  1758                           ; 2 bytes @ 0xA
  1759  002A                     	ds	1
  1760  002B                     ??_printInvArgErr:	
  1761  002B                     ??_nextItem:	
  1762                           ; 1 bytes @ 0xB
  1763                           
  1764                           
  1765                           ; 1 bytes @ 0xB
  1766  002B                     	ds	1
  1767  002C                     printInvArgErr@i:	
  1768  002C                     _stobyte$597:	
  1769                           ; 1 bytes @ 0xC
  1770                           
  1771                           
  1772                           ; 2 bytes @ 0xC
  1773  002C                     	ds	1
  1774  002D                     nextItem@p:	
  1775  002D                     printInvArgErr@args:	
  1776                           ; 1 bytes @ 0xD
  1777                           
  1778                           
  1779                           ; 1 bytes @ 0xD
  1780  002D                     	ds	1
  1781  002E                     stobyte@ans:	
  1782  002E                     _nextItem$574:	
  1783                           ; 1 bytes @ 0xE
  1784                           
  1785                           
  1786                           ; 2 bytes @ 0xE
  1787  002E                     	ds	1
  1788  002F                     stobyte@s:	
  1789                           
  1790                           ; 1 bytes @ 0xF
  1791  002F                     	ds	1
  1792  0030                     ?_prefEcho:	
  1793  0030                     ?_prefGet:	
  1794                           ; 1 bytes @ 0x10
  1795                           
  1796  0030                     ?_prefSet:	
  1797                           ; 1 bytes @ 0x10
  1798                           
  1799  0030                     ?_prefX:	
  1800                           ; 1 bytes @ 0x10
  1801                           
  1802  0030                     prefEcho@args:	
  1803                           ; 1 bytes @ 0x10
  1804                           
  1805  0030                     prefSet@args:	
  1806                           ; 1 bytes @ 0x10
  1807                           
  1808  0030                     prefGet@args:	
  1809                           ; 1 bytes @ 0x10
  1810                           
  1811  0030                     prefX@args:	
  1812                           ; 1 bytes @ 0x10
  1813                           
  1814  0030                     _nextItem$576:	
  1815                           ; 1 bytes @ 0x10
  1816                           
  1817                           
  1818                           ; 2 bytes @ 0x10
  1819  0030                     	ds	1
  1820  0031                     ??_prefEcho:	
  1821  0031                     ??_prefGet:	
  1822                           ; 1 bytes @ 0x11
  1823                           
  1824  0031                     ??_prefSet:	
  1825                           ; 1 bytes @ 0x11
  1826                           
  1827  0031                     ??_prefX:	
  1828                           ; 1 bytes @ 0x11
  1829                           
  1830                           
  1831                           ; 1 bytes @ 0x11
  1832  0031                     	ds	1
  1833  0032                     _nextItem$575:	
  1834                           
  1835                           ; 1 bytes @ 0x12
  1836  0032                     	ds	1
  1837  0033                     _nextItem$577:	
  1838  0033                     prefEcho@f:	
  1839                           ; 1 bytes @ 0x13
  1840                           
  1841  0033                     prefGet@buf:	
  1842                           ; 4 bytes @ 0x13
  1843                           
  1844                           
  1845                           ; 16 bytes @ 0x13
  1846  0033                     	ds	3
  1847  0036                     prefX@x:	
  1848  0036                     prefSet@buf:	
  1849                           ; 3 bytes @ 0x16
  1850                           
  1851                           
  1852                           ; 10 bytes @ 0x16
  1853  0036                     	ds	3
  1854  0039                     prefX@buf:	
  1855                           
  1856                           ; 10 bytes @ 0x19
  1857  0039                     	ds	7
  1858  0040                     _prefSet$615:	
  1859                           
  1860                           ; 2 bytes @ 0x20
  1861  0040                     	ds	2
  1862  0042                     prefSet@addr:	
  1863                           
  1864                           ; 1 bytes @ 0x22
  1865  0042                     	ds	1
  1866  0043                     prefSet@i:	
  1867  0043                     prefGet@reg:	
  1868                           ; 1 bytes @ 0x23
  1869                           
  1870  0043                     _prefX$636:	
  1871                           ; 1 bytes @ 0x23
  1872                           
  1873                           
  1874                           ; 2 bytes @ 0x23
  1875  0043                     	ds	1
  1876  0044                     prefGet@addr:	
  1877                           
  1878                           ; 1 bytes @ 0x24
  1879  0044                     	ds	1
  1880  0045                     prefX@reg:	
  1881                           
  1882                           ; 1 bytes @ 0x25
  1883  0045                     	ds	1
  1884  0046                     prefX@j:	
  1885                           
  1886                           ; 1 bytes @ 0x26
  1887  0046                     	ds	1
  1888  0047                     prefX@addr:	
  1889                           
  1890                           ; 1 bytes @ 0x27
  1891  0047                     	ds	1
  1892  0048                     prefX@i:	
  1893                           
  1894                           ; 1 bytes @ 0x28
  1895  0048                     	ds	1
  1896  0049                     ??_parseCommand:	
  1897                           
  1898                           ; 1 bytes @ 0x29
  1899  0049                     	ds	1
  1900  004A                     parseCommand@args:	
  1901                           
  1902                           ; 10 bytes @ 0x2A
  1903  004A                     	ds	10
  1904  0054                     parseCommand@q:	
  1905                           
  1906                           ; 1 bytes @ 0x34
  1907  0054                     	ds	1
  1908  0055                     parseCommand@p:	
  1909                           
  1910                           ; 1 bytes @ 0x35
  1911  0055                     	ds	1
  1912  0056                     parseCommand@i:	
  1913                           
  1914                           ; 1 bytes @ 0x36
  1915  0056                     	ds	1
  1916  0057                     ??_main:	
  1917                           
  1918                           ; 1 bytes @ 0x37
  1919  0057                     	ds	2
  1920  0059                     main@loop:	
  1921                           
  1922                           ; 2 bytes @ 0x39
  1923  0059                     	ds	2
  1924  005B                     main@bring:	
  1925                           
  1926                           ; 1 bytes @ 0x3B
  1927  005B                     	ds	1
  1928                           
  1929                           	psect	maintext
  1930  0439                     __pmaintext:	
  1931 ;;
  1932 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1933 ;;
  1934 ;; *************** function _main *****************
  1935 ;; Defined at:
  1936 ;;		line 120 in file "SerialBase.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  loop            2   57[BANK0 ] unsigned int 
  1941 ;;  bring           1   59[BANK0 ] unsigned char 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  2  112[None  ] int 
  1944 ;; Registers used:
  1945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : B1F/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1952 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1954 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1955 ;;Total ram usage:        5 bytes
  1956 ;; Hardware stack levels required when called:   10
  1957 ;; This function calls:
  1958 ;;		_SendStr
  1959 ;;		_copyBuffer
  1960 ;;		_copyConstStr
  1961 ;;		_initI2C
  1962 ;;		_parseCommand
  1963 ;;		_trySend
  1964 ;; This function is called by:
  1965 ;;		Startup code after reset
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           
  1970                           ;psect for function _main
  1971  0439                     _main:	
  1972  0439                     l4271:	
  1973                           ;incstack = 0
  1974                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1975                           
  1976                           
  1977                           ;SerialBase.c: 121:     char bring = 1;
  1978  0439  0020               	movlb	0	; select bank0
  1979  043A  01DB               	clrf	main@bring
  1980  043B  0ADB               	incf	main@bring,f
  1981  043C                     l4273:	
  1982                           
  1983                           ;SerialBase.c: 122:     unsigned int loop=30000;
  1984  043C  3030               	movlw	48
  1985  043D  00D9               	movwf	main@loop
  1986  043E  3075               	movlw	117
  1987  043F  00DA               	movwf	main@loop+1
  1988                           
  1989                           ;SerialBase.c: 124:     OSCCON = 0xF0;
  1990  0440  30F0               	movlw	240
  1991  0441  0021               	movlb	1	; select bank1
  1992  0442  0099               	movwf	25	;volatile
  1993  0443                     l4275:	
  1994                           
  1995                           ;SerialBase.c: 126:     ANSELA = 0x00;
  1996  0443  0023               	movlb	3	; select bank3
  1997  0444  018C               	clrf	12	;volatile
  1998  0445                     l4277:	
  1999                           
  2000                           ;SerialBase.c: 127:     ANSELC = 0x00;
  2001  0445  018E               	clrf	14	;volatile
  2002                           
  2003                           ;SerialBase.c: 128:     TRISA = 0xFF;
  2004  0446  30FF               	movlw	255
  2005  0447  0021               	movlb	1	; select bank1
  2006  0448  008C               	movwf	12	;volatile
  2007                           
  2008                           ;SerialBase.c: 129:     TRISC = 0xF7;
  2009  0449  30F7               	movlw	247
  2010  044A  008E               	movwf	14	;volatile
  2011                           
  2012                           ;SerialBase.c: 130:     WPUA = 0x3F;
  2013  044B  303F               	movlw	63
  2014  044C  0024               	movlb	4	; select bank4
  2015  044D  008C               	movwf	12	;volatile
  2016                           
  2017                           ;SerialBase.c: 131:     WPUC = 0x0F;
  2018  044E  300F               	movlw	15
  2019  044F  008E               	movwf	14	;volatile
  2020                           
  2021                           ;SerialBase.c: 134:     RC4PPS = 0b00010100;
  2022  0450  3014               	movlw	20
  2023  0451  003D               	movlb	29	; select bank29
  2024  0452  00A4               	movwf	36	;volatile
  2025                           
  2026                           ;SerialBase.c: 135:     RXPPS = 0b00010101;
  2027  0453  3015               	movlw	21
  2028  0454  003C               	movlb	28	; select bank28
  2029  0455  00A4               	movwf	36	;volatile
  2030                           
  2031                           ;SerialBase.c: 136:     RC0PPS = 0b00010000;
  2032  0456  3010               	movlw	16
  2033  0457  003D               	movlb	29	; select bank29
  2034  0458  00A0               	movwf	32	;volatile
  2035                           
  2036                           ;SerialBase.c: 137:     RC1PPS = 0b00010001;
  2037  0459  3011               	movlw	17
  2038  045A  00A1               	movwf	33	;volatile
  2039                           
  2040                           ;SerialBase.c: 140:     TX1STA = 0x24;
  2041  045B  3024               	movlw	36
  2042  045C  0023               	movlb	3	; select bank3
  2043  045D  009E               	movwf	30	;volatile
  2044                           
  2045                           ;SerialBase.c: 141:     RC1STA = 0x90;
  2046  045E  3090               	movlw	144
  2047  045F  009D               	movwf	29	;volatile
  2048                           
  2049                           ;SerialBase.c: 142:     BAUD1CON= 0x08;
  2050  0460  3008               	movlw	8
  2051  0461  009F               	movwf	31	;volatile
  2052  0462                     l4279:	
  2053                           
  2054                           ;SerialBase.c: 143:     SP1BRG = 68;
  2055  0462  3000               	movlw	0
  2056  0463  009C               	movwf	28	;volatile
  2057  0464  3044               	movlw	68
  2058  0465  009B               	movwf	27	;volatile
  2059  0466                     l4281:	
  2060                           
  2061                           ;SerialBase.c: 145:     Tindex = 0;
  2062  0466  01F4               	clrf	_Tindex
  2063  0467                     l4283:	
  2064                           
  2065                           ;SerialBase.c: 146:     Sending = 0;
  2066  0467  01F3               	clrf	_Sending
  2067  0468                     l4285:	
  2068                           
  2069                           ;SerialBase.c: 147:     TxFlag = 0;
  2070  0468  01F2               	clrf	_TxFlag
  2071  0469                     l4287:	
  2072                           
  2073                           ;SerialBase.c: 150:     WDTCON = 0x16;
  2074  0469  3016               	movlw	22
  2075  046A  0021               	movlb	1	; select bank1
  2076  046B  0097               	movwf	23	;volatile
  2077  046C  0064               	clrwdt	;# 
  2078                           
  2079                           ;SerialBase.c: 153:     Index = 0;
  2080  046D  01F5               	clrf	_Index
  2081                           
  2082                           ;SerialBase.c: 154:     RcvFlag = 0;
  2083  046E  0020               	movlb	0	; select bank0
  2084  046F  01ED               	clrf	_RcvFlag
  2085  0470                     l4289:	
  2086                           
  2087                           ;SerialBase.c: 156:     PIR1bits.RCIF = 0;
  2088  0470  1291               	bcf	17,5	;volatile
  2089  0471                     l4291:	
  2090                           
  2091                           ;SerialBase.c: 157:     PIE1bits.RCIE = 1;
  2092  0471  0021               	movlb	1	; select bank1
  2093  0472  1691               	bsf	17,5	;volatile
  2094  0473                     l4293:	
  2095                           
  2096                           ;SerialBase.c: 158:     INTCONbits.PEIE = 1;
  2097  0473  170B               	bsf	11,6	;volatile
  2098  0474                     l4295:	
  2099                           
  2100                           ;SerialBase.c: 159:     INTCONbits.GIE = 1;
  2101  0474  178B               	bsf	11,7	;volatile
  2102  0475                     l4297:	
  2103                           
  2104                           ;SerialBase.c: 161:       initI2C(0);
  2105  0475  3000               	movlw	0
  2106  0476  318E  2654  3184   	fcall	_initI2C
  2107  0479                     l4299:	
  2108                           
  2109                           ;SerialBase.c: 164:     _delay((unsigned long)((100)*(32000000/4000.0)));
  2110  0479  3005               	movlw	5
  2111  047A  0020               	movlb	0	; select bank0
  2112  047B  00D8               	movwf	??_main+1
  2113  047C  300F               	movlw	15
  2114  047D  00D7               	movwf	??_main
  2115  047E  30F1               	movlw	241
  2116  047F                     u5527:	
  2117  047F  0B89               	decfsz	9,f
  2118  0480  2C7F               	goto	u5527
  2119  0481  0BD7               	decfsz	??_main,f
  2120  0482  2C7F               	goto	u5527
  2121  0483  0BD8               	decfsz	??_main+1,f
  2122  0484  2C7F               	goto	u5527
  2123  0485                     l4301:	
  2124                           
  2125                           ;SerialBase.c: 165:  echoFLG = 0;
  2126  0485  01F1               	clrf	_echoFLG
  2127  0486                     l4303:	
  2128                           
  2129                           ;SerialBase.c: 169:     _delay((unsigned long)((100)*(32000000/4000.0)));
  2130  0486  3005               	movlw	5
  2131  0487  0020               	movlb	0	; select bank0
  2132  0488  00D8               	movwf	??_main+1
  2133  0489  300F               	movlw	15
  2134  048A  00D7               	movwf	??_main
  2135  048B  30F1               	movlw	241
  2136  048C                     u5537:	
  2137  048C  0B89               	decfsz	9,f
  2138  048D  2C8C               	goto	u5537
  2139  048E  0BD7               	decfsz	??_main,f
  2140  048F  2C8C               	goto	u5537
  2141  0490  0BD8               	decfsz	??_main+1,f
  2142  0491  2C8C               	goto	u5537
  2143  0492                     l4305:	
  2144                           
  2145                           ;SerialBase.c: 175:     (copyConstStr(msghi,SndBuf),SendStr());
  2146  0492  3025               	movlw	low (_msghi| (0+32768))
  2147  0493  0020               	movlb	0	; select bank0
  2148  0494  00A0               	movwf	copyConstStr@src
  2149  0495  3090               	movlw	high (_msghi| (0+32768))
  2150  0496  00A1               	movwf	copyConstStr@src+1
  2151  0497  30C0               	movlw	(low (_SndBuf| 0))& (0+255)
  2152  0498  00D7               	movwf	??_main
  2153  0499  0857               	movf	??_main,w
  2154  049A  00A2               	movwf	copyConstStr@dst
  2155  049B  318E  26D4  3184   	fcall	_copyConstStr
  2156  049E                     l4307:	
  2157  049E  318F  271A  3184   	fcall	_SendStr
  2158  04A1                     l113:	
  2159                           ;SerialBase.c: 177:     while(1) {
  2160                           
  2161  04A1  0064               	clrwdt	;# 
  2162  04A2                     l4309:	
  2163                           
  2164                           ;SerialBase.c: 179:         if(++loop >= 30000) {
  2165  04A2  3001               	movlw	1
  2166  04A3  0020               	movlb	0	; select bank0
  2167  04A4  07D9               	addwf	main@loop,f
  2168  04A5  3000               	movlw	0
  2169  04A6  3DDA               	addwfc	main@loop+1,f
  2170  04A7  3075               	movlw	117
  2171  04A8  025A               	subwf	main@loop+1,w
  2172  04A9  3030               	movlw	48
  2173  04AA  1903               	skipnz
  2174  04AB  0259               	subwf	main@loop,w
  2175  04AC  1C03               	skipc
  2176  04AD  2CAF               	goto	u4971
  2177  04AE  2CB0               	goto	u4970
  2178  04AF                     u4971:	
  2179  04AF  2CBC               	goto	l4315
  2180  04B0                     u4970:	
  2181  04B0                     l4311:	
  2182                           
  2183                           ;SerialBase.c: 180:             PORTCbits.RC3 = bring;
  2184  04B0  0C5B               	rrf	main@bring,w
  2185  04B1  1C03               	skipc
  2186  04B2  118E               	bcf	14,3	;volatile
  2187  04B3  1803               	skipnc
  2188  04B4  158E               	bsf	14,3	;volatile
  2189  04B5                     l4313:	
  2190                           
  2191                           ;SerialBase.c: 181:             bring = 1 - bring;
  2192  04B5  085B               	movf	main@bring,w
  2193  04B6  3C01               	sublw	1
  2194  04B7  00D7               	movwf	??_main
  2195  04B8  0857               	movf	??_main,w
  2196  04B9  00DB               	movwf	main@bring
  2197                           
  2198                           ;SerialBase.c: 182:             loop=0;
  2199  04BA  01D9               	clrf	main@loop
  2200  04BB  01DA               	clrf	main@loop+1
  2201  04BC                     l4315:	
  2202                           
  2203                           ;SerialBase.c: 184:         trySend();
  2204  04BC  318D  25A4  3184   	fcall	_trySend
  2205  04BF                     l4317:	
  2206                           
  2207                           ;SerialBase.c: 185:         if(RcvFlag) {
  2208  04BF  0020               	movlb	0	; select bank0
  2209  04C0  086D               	movf	_RcvFlag,w
  2210  04C1  1903               	btfsc	3,2
  2211  04C2  2CC4               	goto	u4981
  2212  04C3  2CC5               	goto	u4980
  2213  04C4                     u4981:	
  2214  04C4  2CA1               	goto	l113
  2215  04C5                     u4980:	
  2216  04C5                     l4319:	
  2217                           
  2218                           ;SerialBase.c: 186:    copyBuffer();
  2219  04C5  318F  276A  3184   	fcall	_copyBuffer
  2220  04C8                     l4321:	
  2221                           
  2222                           ;SerialBase.c: 187:    parseCommand();
  2223  04C8  3184  24D0  3184   	fcall	_parseCommand
  2224  04CB                     l4323:	
  2225                           
  2226                           ;SerialBase.c: 188:    RcvFlag = 0;
  2227  04CB  0020               	movlb	0	; select bank0
  2228  04CC  01ED               	clrf	_RcvFlag
  2229  04CD  2CA1               	goto	l113
  2230  04CE  3180  2870         	ljmp	start
  2231  04D0                     __end_of_main:	
  2232                           
  2233                           	psect	text1
  2234  0DA4                     __ptext1:	
  2235 ;; *************** function _trySend *****************
  2236 ;; Defined at:
  2237 ;;		line 213 in file "SerialBase.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    4
  2258 ;; This function calls:
  2259 ;;		_QueOut
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function _trySend
  2267  0DA4                     _trySend:	
  2268  0DA4                     l4191:	
  2269                           ;incstack = 0
  2270                           ; Regs used in _trySend: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2271                           
  2272                           
  2273                           ;SerialBase.c: 214:     if(TxFlag && TX1STAbits.TRMT) TX1REG = QueOut();
  2274  0DA4  0872               	movf	_TxFlag,w
  2275  0DA5  1903               	btfsc	3,2
  2276  0DA6  2DA8               	goto	u4881
  2277  0DA7  2DA9               	goto	u4880
  2278  0DA8                     u4881:	
  2279  0DA8  2DB3               	goto	l135
  2280  0DA9                     u4880:	
  2281  0DA9                     l4193:	
  2282  0DA9  0023               	movlb	3	; select bank3
  2283  0DAA  1C9E               	btfss	30,1	;volatile
  2284  0DAB  2DAD               	goto	u4891
  2285  0DAC  2DAE               	goto	u4890
  2286  0DAD                     u4891:	
  2287  0DAD  2DB3               	goto	l135
  2288  0DAE                     u4890:	
  2289  0DAE                     l4195:	
  2290  0DAE  318E  260A  318D   	fcall	_QueOut
  2291  0DB1  0023               	movlb	3	; select bank3
  2292  0DB2  009A               	movwf	26	;volatile
  2293  0DB3                     l135:	
  2294  0DB3  0008               	return
  2295  0DB4                     __end_of_trySend:	
  2296                           
  2297                           	psect	text2
  2298  04D0                     __ptext2:	
  2299 ;; *************** function _parseCommand *****************
  2300 ;; Defined at:
  2301 ;;		line 96 in file "parseline.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  args           10   42[BANK0 ] PTR unsigned char [10]
  2306 ;;		 -> NULL(0), Buffer(32), 
  2307 ;;  i               1   54[BANK0 ] unsigned char 
  2308 ;;  p               1   53[BANK0 ] PTR unsigned char 
  2309 ;;		 -> NULL(0), Buffer(32), 
  2310 ;;  q               1   52[BANK0 ] PTR unsigned char 
  2311 ;;		 -> NULL(0), Buffer(32), 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2322 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2324 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2325 ;;Total ram usage:       14 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    9
  2328 ;; This function calls:
  2329 ;;		_Send
  2330 ;;		_SendStr
  2331 ;;		_cmdCheck
  2332 ;;		_copyConstStr
  2333 ;;		_newConvLine
  2334 ;;		_nextItem
  2335 ;;		_prefEcho
  2336 ;;		_prefGet
  2337 ;;		_prefSet
  2338 ;;		_prefX
  2339 ;;		_sndStr
  2340 ;; This function is called by:
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _parseCommand
  2347  04D0                     _parseCommand:	
  2348  04D0                     l4215:	
  2349                           ;incstack = 0
  2350                           ; Regs used in _parseCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2351                           
  2352                           
  2353                           ;parseline.c: 97:     Byte i,*p,*q;;parseline.c: 98:  Byte *args[10];;parseline.c: 99:  
      +                          newConvLine(Buffer);
  2354  04D0  3030               	movlw	(low (_Buffer| (0+256)))& (0+255)
  2355  04D1  318D  258E  3184   	fcall	_newConvLine
  2356  04D4                     l4217:	
  2357                           
  2358                           ;parseline.c: 100:  p = nextItem();
  2359  04D4  3185  255E  3184   	fcall	_nextItem
  2360  04D7  0020               	movlb	0	; select bank0
  2361  04D8  00C9               	movwf	??_parseCommand
  2362  04D9  0849               	movf	??_parseCommand,w
  2363  04DA  00D5               	movwf	parseCommand@p
  2364  04DB                     l4219:	
  2365                           
  2366                           ;parseline.c: 101:  if(p == ((void*)0)) return;
  2367  04DB  0855               	movf	parseCommand@p,w
  2368  04DC  1D03               	btfss	3,2
  2369  04DD  2CDF               	goto	u4911
  2370  04DE  2CE0               	goto	u4910
  2371  04DF                     u4911:	
  2372  04DF  2CE1               	goto	l4223
  2373  04E0                     u4910:	
  2374  04E0  2D5D               	goto	l524
  2375  04E1                     l4223:	
  2376                           
  2377                           ;parseline.c: 104:  for(i=0;i<10;i++) {
  2378  04E1  01D6               	clrf	parseCommand@i
  2379  04E2                     l4229:	
  2380                           
  2381                           ;parseline.c: 105:   args[i] = ((void*)0);
  2382  04E2  0856               	movf	parseCommand@i,w
  2383  04E3  3E4A               	addlw	(low (parseCommand@args| 0))& (0+255)
  2384  04E4  0086               	movwf	6
  2385  04E5  0187               	clrf	7
  2386  04E6  0181               	clrf	1
  2387  04E7                     l4231:	
  2388                           
  2389                           ;parseline.c: 106:  }
  2390  04E7  3001               	movlw	1
  2391  04E8  00C9               	movwf	??_parseCommand
  2392  04E9  0849               	movf	??_parseCommand,w
  2393  04EA  07D6               	addwf	parseCommand@i,f
  2394  04EB                     l4233:	
  2395  04EB  300A               	movlw	10
  2396  04EC  0256               	subwf	parseCommand@i,w
  2397  04ED  1C03               	skipc
  2398  04EE  2CF0               	goto	u4921
  2399  04EF  2CF1               	goto	u4920
  2400  04F0                     u4921:	
  2401  04F0  2CE2               	goto	l4229
  2402  04F1                     u4920:	
  2403  04F1                     l4235:	
  2404                           
  2405                           ;parseline.c: 107:  i = 0;
  2406  04F1  01D6               	clrf	parseCommand@i
  2407                           
  2408                           ;parseline.c: 108:  while(i < 10 && (q = nextItem())) {
  2409  04F2  2CFF               	goto	l4241
  2410  04F3                     l4237:	
  2411                           
  2412                           ;parseline.c: 109:   args[i] = q;
  2413  04F3  0854               	movf	parseCommand@q,w
  2414  04F4  00C9               	movwf	??_parseCommand
  2415  04F5  0856               	movf	parseCommand@i,w
  2416  04F6  3E4A               	addlw	(low (parseCommand@args| 0))& (0+255)
  2417  04F7  0086               	movwf	6
  2418  04F8  0187               	clrf	7
  2419  04F9  0849               	movf	??_parseCommand,w
  2420  04FA  0081               	movwf	1
  2421  04FB                     l4239:	
  2422                           
  2423                           ;parseline.c: 110:   i++;
  2424  04FB  3001               	movlw	1
  2425  04FC  00C9               	movwf	??_parseCommand
  2426  04FD  0849               	movf	??_parseCommand,w
  2427  04FE  07D6               	addwf	parseCommand@i,f
  2428  04FF                     l4241:	
  2429                           
  2430                           ;parseline.c: 108:  while(i < 10 && (q = nextItem())) {
  2431  04FF  300A               	movlw	10
  2432  0500  0256               	subwf	parseCommand@i,w
  2433  0501  1803               	skipnc
  2434  0502  2D04               	goto	u4931
  2435  0503  2D05               	goto	u4930
  2436  0504                     u4931:	
  2437  0504  2D11               	goto	l4245
  2438  0505                     u4930:	
  2439  0505                     l4243:	
  2440  0505  3185  255E  3184   	fcall	_nextItem
  2441  0508  0020               	movlb	0	; select bank0
  2442  0509  00C9               	movwf	??_parseCommand
  2443  050A  0849               	movf	??_parseCommand,w
  2444  050B  00D4               	movwf	parseCommand@q
  2445  050C  0854               	movf	parseCommand@q,w
  2446  050D  1D03               	btfss	3,2
  2447  050E  2D10               	goto	u4941
  2448  050F  2D11               	goto	u4940
  2449  0510                     u4941:	
  2450  0510  2CF3               	goto	l4237
  2451  0511                     u4940:	
  2452  0511                     l4245:	
  2453                           
  2454                           ;parseline.c: 112:     for(i=0; i < 4; i++) {
  2455  0511  01D6               	clrf	parseCommand@i
  2456  0512                     l4251:	
  2457                           
  2458                           ;parseline.c: 113:   if(cmdCheck(p,cmdArray[i])>0) {
  2459  0512  3556               	lslf	parseCommand@i,w
  2460  0513  3E5C               	addlw	(low (_cmdArray| 0))& (0+255)
  2461  0514  0086               	movwf	6
  2462  0515  0187               	clrf	7
  2463  0516  3F40               	moviw [0]fsr1
  2464  0517  00A1               	movwf	cmdCheck@c
  2465  0518  3F41               	moviw [1]fsr1
  2466  0519  00A2               	movwf	cmdCheck@c+1
  2467  051A  0855               	movf	parseCommand@p,w
  2468  051B  3185  25EA  3184   	fcall	_cmdCheck
  2469  051E  3A00               	xorlw	0
  2470  051F  1903               	skipnz
  2471  0520  2D22               	goto	u4951
  2472  0521  2D23               	goto	u4950
  2473  0522                     u4951:	
  2474  0522  2D32               	goto	l4257
  2475  0523                     u4950:	
  2476  0523                     l4253:	
  2477                           
  2478                           ;parseline.c: 114:    (*prefArray[i])(args);
  2479  0523  304A               	movlw	(low (parseCommand@args| 0))& (0+255)
  2480  0524  0020               	movlb	0	; select bank0
  2481  0525  00C9               	movwf	??_parseCommand
  2482  0526  0849               	movf	??_parseCommand,w
  2483  0527  00B0               	movwf	prefX@args
  2484  0528  3556               	lslf	parseCommand@i,w
  2485  0529  3EE0               	addlw	(low (_prefArray| 0))& (0+255)
  2486  052A  0086               	movwf	6
  2487  052B  0187               	clrf	7
  2488  052C  3F41               	moviw [1]fsr1
  2489  052D  008A               	movwf	10
  2490  052E  3F40               	moviw [0]fsr1
  2491  052F  000A               	callw
  2492  0530  3184               	pagesel	$
  2493  0531  2D5D               	goto	l524
  2494  0532                     l4257:	
  2495                           
  2496                           ;parseline.c: 117:  }
  2497  0532  3001               	movlw	1
  2498  0533  0020               	movlb	0	; select bank0
  2499  0534  00C9               	movwf	??_parseCommand
  2500  0535  0849               	movf	??_parseCommand,w
  2501  0536  07D6               	addwf	parseCommand@i,f
  2502  0537                     l4259:	
  2503  0537  3004               	movlw	4
  2504  0538  0256               	subwf	parseCommand@i,w
  2505  0539  1C03               	skipc
  2506  053A  2D3C               	goto	u4961
  2507  053B  2D3D               	goto	u4960
  2508  053C                     u4961:	
  2509  053C  2D12               	goto	l4251
  2510  053D                     u4960:	
  2511  053D                     l4261:	
  2512                           
  2513                           ;parseline.c: 118:  (copyConstStr(errMess,SndBuf),SendStr());
  2514  053D  3013               	movlw	low (_errMess| (0+32768))
  2515  053E  00A0               	movwf	copyConstStr@src
  2516  053F  3090               	movlw	high (_errMess| (0+32768))
  2517  0540  00A1               	movwf	copyConstStr@src+1
  2518  0541  30C0               	movlw	(low (_SndBuf| 0))& (0+255)
  2519  0542  00C9               	movwf	??_parseCommand
  2520  0543  0849               	movf	??_parseCommand,w
  2521  0544  00A2               	movwf	copyConstStr@dst
  2522  0545  318E  26D4  3184   	fcall	_copyConstStr
  2523  0548                     l4263:	
  2524  0548  318F  271A  3184   	fcall	_SendStr
  2525  054B                     l4265:	
  2526                           
  2527                           ;parseline.c: 119:  sndStr(p);
  2528  054B  0020               	movlb	0	; select bank0
  2529  054C  0855               	movf	parseCommand@p,w
  2530  054D  00A7               	movwf	sndStr@p
  2531  054E  39FF               	andlw	255
  2532  054F  1D03               	skipz
  2533  0550  3001               	movlw	1
  2534  0551  00A8               	movwf	sndStr@p+1
  2535  0552  318F  2740  3184   	fcall	_sndStr
  2536  0555                     l4267:	
  2537                           
  2538                           ;parseline.c: 121:  (Send('\r'),Send('\n'));
  2539  0555  300D               	movlw	13
  2540  0556  3186  267D  3184   	fcall	_Send
  2541  0559                     l4269:	
  2542  0559  300A               	movlw	10
  2543  055A  3186  267D  3184   	fcall	_Send
  2544  055D                     l524:	
  2545  055D  0008               	return
  2546  055E                     __end_of_parseCommand:	
  2547                           
  2548                           	psect	text3
  2549  00AC                     __ptext3:	
  2550 ;; *************** function _prefSet *****************
  2551 ;; Defined at:
  2552 ;;		line 218 in file "parseline.c"
  2553 ;; Parameters:    Size  Location     Type
  2554 ;;  args            1   16[BANK0 ] PTR PTR unsigned char 
  2555 ;;		 -> parseCommand@args(10), 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  buf            10   22[BANK0 ] unsigned char [10]
  2558 ;;  p               2    0        PTR unsigned char 
  2559 ;;  i               1   35[BANK0 ] unsigned char 
  2560 ;;  addr            1   34[BANK0 ] unsigned char 
  2561 ;;  data            1    0        unsigned char 
  2562 ;;  reg             1    0        unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2572 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2573 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2574 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2575 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2576 ;;Total ram usage:       20 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    8
  2579 ;; This function calls:
  2580 ;;		_isdigit
  2581 ;;		_printInvArgErr
  2582 ;;		_sendI2C
  2583 ;;		_sendI2Cbyte
  2584 ;;		_stobyte
  2585 ;; This function is called by:
  2586 ;;		_parseCommand
  2587 ;; This function uses a non-reentrant model
  2588 ;;
  2589                           
  2590                           
  2591                           ;psect for function _prefSet
  2592  00AC                     _prefSet:	
  2593  00AC                     l4049:	
  2594                           ;incstack = 0
  2595                           ; Regs used in _prefSet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2596                           
  2597                           
  2598                           ;parseline.c: 219:  Byte addr,reg,data,*p,i;;parseline.c: 220:  Byte buf[10];;parseline.
      +                          c: 222:  if(args[0] == ((void*)0)) goto err;
  2599  00AC  0020               	movlb	0	; select bank0
  2600  00AD  0830               	movf	prefSet@args,w
  2601  00AE  0086               	movwf	6
  2602  00AF  0187               	clrf	7
  2603  00B0  0801               	movf	1,w
  2604  00B1  1D03               	btfss	3,2
  2605  00B2  28B4               	goto	u4671
  2606  00B3  28B5               	goto	u4670
  2607  00B4                     u4671:	
  2608  00B4  28B6               	goto	l4053
  2609  00B5                     u4670:	
  2610  00B5  297B               	goto	l4095
  2611  00B6                     l4053:	
  2612                           
  2613                           ;parseline.c: 223:  addr = stobyte(args[0]);
  2614  00B6  0830               	movf	prefSet@args,w
  2615  00B7  0086               	movwf	6
  2616  00B8  0187               	clrf	7
  2617  00B9  0801               	movf	1,w
  2618  00BA  3181  2180  3180   	fcall	_stobyte
  2619  00BD  0020               	movlb	0	; select bank0
  2620  00BE  00B1               	movwf	??_prefSet
  2621  00BF  0831               	movf	??_prefSet,w
  2622  00C0  00C2               	movwf	prefSet@addr
  2623  00C1                     l4055:	
  2624                           
  2625                           ;parseline.c: 224:  if(addr == 0) goto err;
  2626  00C1  0842               	movf	prefSet@addr,w
  2627  00C2  1D03               	btfss	3,2
  2628  00C3  28C5               	goto	u4681
  2629  00C4  28C6               	goto	u4680
  2630  00C5                     u4681:	
  2631  00C5  28C7               	goto	l610
  2632  00C6                     u4680:	
  2633  00C6  297B               	goto	l4095
  2634  00C7                     l610:	
  2635                           
  2636                           ;parseline.c: 226:  for(i = 1; i < 10 && args[i] != ((void*)0); i++) {
  2637  00C7  01C3               	clrf	prefSet@i
  2638  00C8  0AC3               	incf	prefSet@i,f
  2639  00C9  2909               	goto	l4069
  2640  00CA                     l4059:	
  2641  00CA  0843               	movf	prefSet@i,w
  2642  00CB  0730               	addwf	prefSet@args,w
  2643  00CC  00B1               	movwf	??_prefSet
  2644  00CD  0831               	movf	??_prefSet,w
  2645  00CE  0086               	movwf	6
  2646  00CF  0187               	clrf	7
  2647  00D0  0801               	movf	1,w
  2648  00D1  0086               	movwf	6
  2649  00D2  3001               	movlw	1	; select bank2/3
  2650  00D3  0087               	movwf	7
  2651  00D4  0801               	movf	1,w
  2652  00D5  3ED0               	addlw	208
  2653  00D6  00B2               	movwf	??_prefSet+1
  2654  00D7  30FF               	movlw	255
  2655  00D8  1803               	skipnc
  2656  00D9  3000               	movlw	0
  2657  00DA  00B3               	movwf	??_prefSet+2
  2658  00DB  3000               	movlw	0
  2659  00DC  0233               	subwf	??_prefSet+2,w
  2660  00DD  300A               	movlw	10
  2661  00DE  1903               	skipnz
  2662  00DF  0232               	subwf	??_prefSet+1,w
  2663  00E0  1C03               	skipc
  2664  00E1  28E3               	goto	u4691
  2665  00E2  28E5               	goto	u4690
  2666  00E3                     u4691:	
  2667  00E3  3001               	movlw	1
  2668  00E4  28E6               	goto	u4700
  2669  00E5                     u4690:	
  2670  00E5  3000               	movlw	0
  2671  00E6                     u4700:	
  2672  00E6  00B4               	movwf	??_prefSet+3
  2673  00E7  01B5               	clrf	??_prefSet+4
  2674  00E8  0834               	movf	??_prefSet+3,w
  2675  00E9  00C0               	movwf	_prefSet$615
  2676  00EA  0835               	movf	??_prefSet+4,w
  2677  00EB  00C1               	movwf	_prefSet$615+1
  2678  00EC                     l4063:	
  2679  00EC  0840               	movf	_prefSet$615,w
  2680  00ED  0441               	iorwf	_prefSet$615+1,w
  2681  00EE  1903               	btfsc	3,2
  2682  00EF  28F1               	goto	u4711
  2683  00F0  28F2               	goto	u4710
  2684  00F1                     u4711:	
  2685  00F1  291A               	goto	l4073
  2686  00F2                     u4710:	
  2687  00F2                     l4065:	
  2688  00F2  0843               	movf	prefSet@i,w
  2689  00F3  0730               	addwf	prefSet@args,w
  2690  00F4  00B1               	movwf	??_prefSet
  2691  00F5  0831               	movf	??_prefSet,w
  2692  00F6  0086               	movwf	6
  2693  00F7  0187               	clrf	7
  2694  00F8  0801               	movf	1,w
  2695  00F9  3181  2180  3180   	fcall	_stobyte
  2696  00FC  0020               	movlb	0	; select bank0
  2697  00FD  00B2               	movwf	??_prefSet+1
  2698  00FE  0843               	movf	prefSet@i,w
  2699  00FF  3EFF               	addlw	255
  2700  0100  3E36               	addlw	(low (prefSet@buf| 0))& (0+255)
  2701  0101  0086               	movwf	6
  2702  0102  0187               	clrf	7
  2703  0103  0832               	movf	??_prefSet+1,w
  2704  0104  0081               	movwf	1
  2705  0105                     l4067:	
  2706                           
  2707                           ;parseline.c: 229:  }
  2708  0105  3001               	movlw	1
  2709  0106  00B1               	movwf	??_prefSet
  2710  0107  0831               	movf	??_prefSet,w
  2711  0108  07C3               	addwf	prefSet@i,f
  2712  0109                     l4069:	
  2713  0109  300A               	movlw	10
  2714  010A  0243               	subwf	prefSet@i,w
  2715  010B  1803               	skipnc
  2716  010C  290E               	goto	u4721
  2717  010D  290F               	goto	u4720
  2718  010E                     u4721:	
  2719  010E  291A               	goto	l4073
  2720  010F                     u4720:	
  2721  010F                     l4071:	
  2722  010F  0843               	movf	prefSet@i,w
  2723  0110  0730               	addwf	prefSet@args,w
  2724  0111  00B1               	movwf	??_prefSet
  2725  0112  0831               	movf	??_prefSet,w
  2726  0113  0086               	movwf	6
  2727  0114  0187               	clrf	7
  2728  0115  0801               	movf	1,w
  2729  0116  1D03               	btfss	3,2
  2730  0117  2919               	goto	u4731
  2731  0118  291A               	goto	u4730
  2732  0119                     u4731:	
  2733  0119  28CA               	goto	l4059
  2734  011A                     u4730:	
  2735  011A                     l4073:	
  2736                           
  2737                           ;parseline.c: 230:  if(i < 10 && args[i] != ((void*)0)) {
  2738  011A  300A               	movlw	10
  2739  011B  0243               	subwf	prefSet@i,w
  2740  011C  1803               	skipnc
  2741  011D  291F               	goto	u4741
  2742  011E  2920               	goto	u4740
  2743  011F                     u4741:	
  2744  011F  296D               	goto	l4091
  2745  0120                     u4740:	
  2746  0120                     l4075:	
  2747  0120  0843               	movf	prefSet@i,w
  2748  0121  0730               	addwf	prefSet@args,w
  2749  0122  00B1               	movwf	??_prefSet
  2750  0123  0831               	movf	??_prefSet,w
  2751  0124  0086               	movwf	6
  2752  0125  0187               	clrf	7
  2753  0126  0801               	movf	1,w
  2754  0127  1903               	btfsc	3,2
  2755  0128  292A               	goto	u4751
  2756  0129  292B               	goto	u4750
  2757  012A                     u4751:	
  2758  012A  296D               	goto	l4091
  2759  012B                     u4750:	
  2760  012B  2947               	goto	l4089
  2761  012C                     l626:	
  2762                           ;parseline.c: 233:   case 'c': case 'C':
  2763                           
  2764  012C                     l4079:	
  2765                           
  2766                           ;parseline.c: 234:    sendI2Cbyte(addr,buf[0],buf[1]);
  2767  012C  0836               	movf	prefSet@buf,w
  2768  012D  00B1               	movwf	??_prefSet
  2769  012E  0831               	movf	??_prefSet,w
  2770  012F  00A0               	movwf	sendI2Cbyte@reg
  2771  0130  0837               	movf	prefSet@buf+1,w
  2772  0131  00B2               	movwf	??_prefSet+1
  2773  0132  0832               	movf	??_prefSet+1,w
  2774  0133  00A1               	movwf	sendI2Cbyte@data
  2775  0134  0842               	movf	prefSet@addr,w
  2776  0135  318F  2797  3180   	fcall	_sendI2Cbyte
  2777  0138  297F               	goto	l628
  2778  0139                     l4083:	
  2779                           
  2780                           ;parseline.c: 237:    sendI2C(addr,buf,i-1);
  2781  0139  3036               	movlw	(low (prefSet@buf| 0))& (0+255)
  2782  013A  00B1               	movwf	??_prefSet
  2783  013B  0831               	movf	??_prefSet,w
  2784  013C  00A0               	movwf	sendI2C@buf
  2785  013D  0843               	movf	prefSet@i,w
  2786  013E  3EFF               	addlw	255
  2787  013F  00B2               	movwf	??_prefSet+1
  2788  0140  0832               	movf	??_prefSet+1,w
  2789  0141  00A1               	movwf	sendI2C@n
  2790  0142  0842               	movf	prefSet@addr,w
  2791  0143  3187  27BE  3180   	fcall	_sendI2C
  2792  0146  297F               	goto	l628
  2793  0147                     l4089:	
  2794  0147  0843               	movf	prefSet@i,w
  2795  0148  0730               	addwf	prefSet@args,w
  2796  0149  00B1               	movwf	??_prefSet
  2797  014A  0831               	movf	??_prefSet,w
  2798  014B  0086               	movwf	6
  2799  014C  0187               	clrf	7
  2800  014D  0801               	movf	1,w
  2801  014E  0086               	movwf	6
  2802  014F  3001               	movlw	1	; select bank2/3
  2803  0150  0087               	movwf	7
  2804  0151  0801               	movf	1,w
  2805  0152  00B2               	movwf	??_prefSet+1
  2806  0153  01B3               	clrf	??_prefSet+2
  2807                           
  2808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2809                           ; Switch size 1, requested type "simple"
  2810                           ; Number of cases is 1, Range of values is 0 to 0
  2811                           ; switch strategies available:
  2812                           ; Name         Instructions Cycles
  2813                           ; simple_byte            4     3 (average)
  2814                           ; direct_byte            8     6 (fixed)
  2815                           ; jumptable            260     6 (fixed)
  2816                           ;	Chosen strategy is simple_byte
  2817  0154  0833               	movf	??_prefSet+2,w
  2818  0155  3A00               	xorlw	0	; case 0
  2819  0156  1903               	skipnz
  2820  0157  2959               	goto	l4629
  2821  0158  297B               	goto	l4095
  2822  0159                     l4629:	
  2823                           
  2824                           ; Switch size 1, requested type "simple"
  2825                           ; Number of cases is 6, Range of values is 66 to 105
  2826                           ; switch strategies available:
  2827                           ; Name         Instructions Cycles
  2828                           ; simple_byte           19    10 (average)
  2829                           ; direct_byte           89     9 (fixed)
  2830                           ; jumptable            263     9 (fixed)
  2831                           ;	Chosen strategy is simple_byte
  2832  0159  0832               	movf	??_prefSet+1,w
  2833  015A  3A42               	xorlw	66	; case 66
  2834  015B  1903               	skipnz
  2835  015C  292C               	goto	l4079
  2836  015D  3A01               	xorlw	1	; case 67
  2837  015E  1903               	skipnz
  2838  015F  292C               	goto	l4079
  2839  0160  3A0A               	xorlw	10	; case 73
  2840  0161  1903               	skipnz
  2841  0162  2939               	goto	l4083
  2842  0163  3A2B               	xorlw	43	; case 98
  2843  0164  1903               	skipnz
  2844  0165  292C               	goto	l626
  2845  0166  3A01               	xorlw	1	; case 99
  2846  0167  1903               	skipnz
  2847  0168  292C               	goto	l4079
  2848  0169  3A0A               	xorlw	10	; case 105
  2849  016A  1903               	skipnz
  2850  016B  2939               	goto	l4083
  2851  016C  297B               	goto	l4095
  2852  016D                     l4091:	
  2853                           
  2854                           ;parseline.c: 241:   sendI2C(addr,buf,i-1);
  2855  016D  3036               	movlw	(low (prefSet@buf| 0))& (0+255)
  2856  016E  00B1               	movwf	??_prefSet
  2857  016F  0831               	movf	??_prefSet,w
  2858  0170  00A0               	movwf	sendI2C@buf
  2859  0171  0843               	movf	prefSet@i,w
  2860  0172  3EFF               	addlw	255
  2861  0173  00B2               	movwf	??_prefSet+1
  2862  0174  0832               	movf	??_prefSet+1,w
  2863  0175  00A1               	movwf	sendI2C@n
  2864  0176  0842               	movf	prefSet@addr,w
  2865  0177  3187  27BE  3180   	fcall	_sendI2C
  2866  017A  297F               	goto	l628
  2867  017B                     l4095:	
  2868                           
  2869                           ;parseline.c: 246:  printInvArgErr(args);
  2870  017B  0830               	movf	prefSet@args,w
  2871  017C  3187  2745  3180   	fcall	_printInvArgErr
  2872  017F                     l628:	
  2873  017F  0008               	return
  2874  0180                     __end_of_prefSet:	
  2875                           
  2876                           	psect	text4
  2877  023E                     __ptext4:	
  2878 ;; *************** function _prefGet *****************
  2879 ;; Defined at:
  2880 ;;		line 252 in file "parseline.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  args            1   16[BANK0 ] PTR PTR unsigned char 
  2883 ;;		 -> parseCommand@args(10), 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  buf            16   19[BANK0 ] unsigned char [16]
  2886 ;;  p               2    0        PTR unsigned char 
  2887 ;;  addr            1   36[BANK0 ] unsigned char 
  2888 ;;  reg             1   35[BANK0 ] unsigned char 
  2889 ;;  i               1    0        unsigned char 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2899 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2900 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;Total ram usage:       21 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    8
  2906 ;; This function calls:
  2907 ;;		_Send
  2908 ;;		_SendHex
  2909 ;;		_printInvArgErr
  2910 ;;		_readI2C
  2911 ;;		_sendI2C
  2912 ;;		_stobyte
  2913 ;; This function is called by:
  2914 ;;		_parseCommand
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           
  2919                           ;psect for function _prefGet
  2920  023E                     _prefGet:	
  2921  023E                     l4103:	
  2922                           ;incstack = 0
  2923                           ; Regs used in _prefGet: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2924                           
  2925                           
  2926                           ;parseline.c: 253:  Byte addr,reg,*p,i;;parseline.c: 254:  Byte buf[16];;parseline.c: 25
      +                          6:  if(args[0] == ((void*)0)) goto err;
  2927  023E  0020               	movlb	0	; select bank0
  2928  023F  0830               	movf	prefGet@args,w
  2929  0240  0086               	movwf	6
  2930  0241  0187               	clrf	7
  2931  0242  0801               	movf	1,w
  2932  0243  1D03               	btfss	3,2
  2933  0244  2A46               	goto	u4761
  2934  0245  2A47               	goto	u4760
  2935  0246                     u4761:	
  2936  0246  2A48               	goto	l4107
  2937  0247                     u4760:	
  2938  0247  2AEB               	goto	l4135
  2939  0248                     l4107:	
  2940                           
  2941                           ;parseline.c: 257:  addr = stobyte(args[0]);
  2942  0248  0830               	movf	prefGet@args,w
  2943  0249  0086               	movwf	6
  2944  024A  0187               	clrf	7
  2945  024B  0801               	movf	1,w
  2946  024C  3181  2180  3182   	fcall	_stobyte
  2947  024F  0020               	movlb	0	; select bank0
  2948  0250  00B1               	movwf	??_prefGet
  2949  0251  0831               	movf	??_prefGet,w
  2950  0252  00C4               	movwf	prefGet@addr
  2951  0253                     l4109:	
  2952                           
  2953                           ;parseline.c: 258:  if(addr == 0) goto err;
  2954  0253  0844               	movf	prefGet@addr,w
  2955  0254  1D03               	btfss	3,2
  2956  0255  2A57               	goto	u4771
  2957  0256  2A58               	goto	u4770
  2958  0257                     u4771:	
  2959  0257  2A59               	goto	l4113
  2960  0258                     u4770:	
  2961  0258  2AEB               	goto	l4135
  2962  0259                     l4113:	
  2963                           
  2964                           ;parseline.c: 260:  if(args[1] != ((void*)0)) {
  2965  0259  0A30               	incf	prefGet@args,w
  2966  025A  0086               	movwf	6
  2967  025B  0187               	clrf	7
  2968  025C  0801               	movf	1,w
  2969  025D  1903               	btfsc	3,2
  2970  025E  2A60               	goto	u4781
  2971  025F  2A61               	goto	u4780
  2972  0260                     u4781:	
  2973  0260  2AEB               	goto	l4135
  2974  0261                     u4780:	
  2975  0261                     l4115:	
  2976                           
  2977                           ;parseline.c: 261:   reg = stobyte(args[1]);
  2978  0261  0A30               	incf	prefGet@args,w
  2979  0262  0086               	movwf	6
  2980  0263  0187               	clrf	7
  2981  0264  0801               	movf	1,w
  2982  0265  3181  2180  3182   	fcall	_stobyte
  2983  0268  0020               	movlb	0	; select bank0
  2984  0269  00B1               	movwf	??_prefGet
  2985  026A  0831               	movf	??_prefGet,w
  2986  026B  00C3               	movwf	prefGet@reg
  2987  026C                     l4117:	
  2988                           
  2989                           ;parseline.c: 262:   buf[0] = reg;
  2990  026C  0843               	movf	prefGet@reg,w
  2991  026D  00B1               	movwf	??_prefGet
  2992  026E  0831               	movf	??_prefGet,w
  2993  026F  00B3               	movwf	prefGet@buf
  2994  0270                     l4119:	
  2995                           
  2996                           ;parseline.c: 265:   if(args[2] != ((void*)0)) {
  2997  0270  0830               	movf	prefGet@args,w
  2998  0271  3E02               	addlw	2
  2999  0272  0086               	movwf	6
  3000  0273  0187               	clrf	7
  3001  0274  0801               	movf	1,w
  3002  0275  1903               	btfsc	3,2
  3003  0276  2A78               	goto	u4791
  3004  0277  2A79               	goto	u4790
  3005  0278                     u4791:	
  3006  0278  2AEB               	goto	l4135
  3007  0279                     u4790:	
  3008  0279  2AC7               	goto	l4133
  3009  027A                     l643:	
  3010                           ;parseline.c: 268:    case 'c': case 'C':
  3011                           
  3012  027A                     l4123:	
  3013                           
  3014                           ;parseline.c: 269:     sendI2C(addr,&reg,1);
  3015  027A  3043               	movlw	(low (prefGet@reg| 0))& (0+255)
  3016  027B  00B1               	movwf	??_prefGet
  3017  027C  0831               	movf	??_prefGet,w
  3018  027D  00A0               	movwf	sendI2C@buf
  3019  027E  01A1               	clrf	sendI2C@n
  3020  027F  0AA1               	incf	sendI2C@n,f
  3021  0280  0844               	movf	prefGet@addr,w
  3022  0281  3187  27BE  3182   	fcall	_sendI2C
  3023                           
  3024                           ;parseline.c: 270:     readI2C(addr,buf,1);
  3025  0284  3033               	movlw	(low (prefGet@buf| 0))& (0+255)
  3026  0285  0020               	movlb	0	; select bank0
  3027  0286  00B1               	movwf	??_prefGet
  3028  0287  0831               	movf	??_prefGet,w
  3029  0288  00A0               	movwf	readI2C@buf
  3030  0289  01A1               	clrf	readI2C@n
  3031  028A  0AA1               	incf	readI2C@n,f
  3032  028B  0844               	movf	prefGet@addr,w
  3033  028C  3186  2634  3182   	fcall	_readI2C
  3034                           
  3035                           ;parseline.c: 271:     SendHex(buf[0]);
  3036  028F  0020               	movlb	0	; select bank0
  3037  0290  0833               	movf	prefGet@buf,w
  3038  0291  3187  2785  3182   	fcall	_SendHex
  3039                           
  3040                           ;parseline.c: 272:     (Send('\r'),Send('\n'));
  3041  0294  300D               	movlw	13
  3042  0295  3186  267D  3182   	fcall	_Send
  3043  0298  300A               	movlw	10
  3044  0299  3186  267D  3182   	fcall	_Send
  3045  029C  2AEF               	goto	l645
  3046  029D                     l4127:	
  3047                           
  3048                           ;parseline.c: 275:     sendI2C(addr,&reg,1);
  3049  029D  3043               	movlw	(low (prefGet@reg| 0))& (0+255)
  3050  029E  00B1               	movwf	??_prefGet
  3051  029F  0831               	movf	??_prefGet,w
  3052  02A0  00A0               	movwf	sendI2C@buf
  3053  02A1  01A1               	clrf	sendI2C@n
  3054  02A2  0AA1               	incf	sendI2C@n,f
  3055  02A3  0844               	movf	prefGet@addr,w
  3056  02A4  3187  27BE  3182   	fcall	_sendI2C
  3057                           
  3058                           ;parseline.c: 276:     readI2C(addr,buf,2);
  3059  02A7  3033               	movlw	(low (prefGet@buf| 0))& (0+255)
  3060  02A8  0020               	movlb	0	; select bank0
  3061  02A9  00B1               	movwf	??_prefGet
  3062  02AA  0831               	movf	??_prefGet,w
  3063  02AB  00A0               	movwf	readI2C@buf
  3064  02AC  3002               	movlw	2
  3065  02AD  00B2               	movwf	??_prefGet+1
  3066  02AE  0832               	movf	??_prefGet+1,w
  3067  02AF  00A1               	movwf	readI2C@n
  3068  02B0  0844               	movf	prefGet@addr,w
  3069  02B1  3186  2634  3182   	fcall	_readI2C
  3070                           
  3071                           ;parseline.c: 277:     SendHex(buf[0]);
  3072  02B4  0020               	movlb	0	; select bank0
  3073  02B5  0833               	movf	prefGet@buf,w
  3074  02B6  3187  2785  3182   	fcall	_SendHex
  3075                           
  3076                           ;parseline.c: 278:     SendHex(buf[1]);
  3077  02B9  0020               	movlb	0	; select bank0
  3078  02BA  0834               	movf	prefGet@buf+1,w
  3079  02BB  3187  2785  3182   	fcall	_SendHex
  3080                           
  3081                           ;parseline.c: 279:     (Send('\r'),Send('\n'));
  3082  02BE  300D               	movlw	13
  3083  02BF  3186  267D  3182   	fcall	_Send
  3084  02C2  300A               	movlw	10
  3085  02C3  3186  267D  3182   	fcall	_Send
  3086  02C6  2AEF               	goto	l645
  3087  02C7                     l4133:	
  3088  02C7  0830               	movf	prefGet@args,w
  3089  02C8  3E02               	addlw	2
  3090  02C9  0086               	movwf	6
  3091  02CA  0187               	clrf	7
  3092  02CB  0801               	movf	1,w
  3093  02CC  0086               	movwf	6
  3094  02CD  3001               	movlw	1	; select bank2/3
  3095  02CE  0087               	movwf	7
  3096  02CF  0801               	movf	1,w
  3097  02D0  00B1               	movwf	??_prefGet
  3098  02D1  01B2               	clrf	??_prefGet+1
  3099                           
  3100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3101                           ; Switch size 1, requested type "simple"
  3102                           ; Number of cases is 1, Range of values is 0 to 0
  3103                           ; switch strategies available:
  3104                           ; Name         Instructions Cycles
  3105                           ; simple_byte            4     3 (average)
  3106                           ; direct_byte            8     6 (fixed)
  3107                           ; jumptable            260     6 (fixed)
  3108                           ;	Chosen strategy is simple_byte
  3109  02D2  0832               	movf	??_prefGet+1,w
  3110  02D3  3A00               	xorlw	0	; case 0
  3111  02D4  1903               	skipnz
  3112  02D5  2AD7               	goto	l4631
  3113  02D6  2AEB               	goto	l4135
  3114  02D7                     l4631:	
  3115                           
  3116                           ; Switch size 1, requested type "simple"
  3117                           ; Number of cases is 6, Range of values is 66 to 119
  3118                           ; switch strategies available:
  3119                           ; Name         Instructions Cycles
  3120                           ; simple_byte           19    10 (average)
  3121                           ; direct_byte          117     9 (fixed)
  3122                           ; jumptable            263     9 (fixed)
  3123                           ;	Chosen strategy is simple_byte
  3124  02D7  0831               	movf	??_prefGet,w
  3125  02D8  3A42               	xorlw	66	; case 66
  3126  02D9  1903               	skipnz
  3127  02DA  2A7A               	goto	l4123
  3128  02DB  3A01               	xorlw	1	; case 67
  3129  02DC  1903               	skipnz
  3130  02DD  2A7A               	goto	l4123
  3131  02DE  3A14               	xorlw	20	; case 87
  3132  02DF  1903               	skipnz
  3133  02E0  2A9D               	goto	l4127
  3134  02E1  3A35               	xorlw	53	; case 98
  3135  02E2  1903               	skipnz
  3136  02E3  2A7A               	goto	l643
  3137  02E4  3A01               	xorlw	1	; case 99
  3138  02E5  1903               	skipnz
  3139  02E6  2A7A               	goto	l4123
  3140  02E7  3A14               	xorlw	20	; case 119
  3141  02E8  1903               	skipnz
  3142  02E9  2A9D               	goto	l4127
  3143  02EA  2AEB               	goto	l4135
  3144  02EB                     l4135:	
  3145                           
  3146                           ;parseline.c: 287:  printInvArgErr(args);
  3147  02EB  0830               	movf	prefGet@args,w
  3148  02EC  3187  2745  3182   	fcall	_printInvArgErr
  3149  02EF                     l645:	
  3150  02EF  0008               	return
  3151  02F0                     __end_of_prefGet:	
  3152                           
  3153                           	psect	text5
  3154  039E                     __ptext5:	
  3155 ;; *************** function _prefEcho *****************
  3156 ;; Defined at:
  3157 ;;		line 187 in file "parseline.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  args            1   16[BANK0 ] PTR PTR unsigned char 
  3160 ;;		 -> parseCommand@args(10), 
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;  f               4   19[BANK0 ] unsigned char [4]
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3172 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3174 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3175 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3176 ;;Total ram usage:        7 bytes
  3177 ;; Hardware stack levels used:    1
  3178 ;; Hardware stack levels required when called:    8
  3179 ;; This function calls:
  3180 ;;		_Send
  3181 ;;		_SendStr
  3182 ;;		_copyConstStr
  3183 ;;		_printInvArgErr
  3184 ;;		_sndStr
  3185 ;; This function is called by:
  3186 ;;		_parseCommand
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function _prefEcho
  3192  039E                     _prefEcho:	
  3193  039E                     l3993:	
  3194                           ;incstack = 0
  3195                           ; Regs used in _prefEcho: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3196                           
  3197                           
  3198                           ;parseline.c: 188:  Byte f[4];;parseline.c: 189:  f[0] = 'O'; f[1] = 'f'; f[2] = 'f';f[3
      +                          ] = '\0';
  3199  039E  304F               	movlw	79
  3200  039F  0020               	movlb	0	; select bank0
  3201  03A0  00B1               	movwf	??_prefEcho
  3202  03A1  0831               	movf	??_prefEcho,w
  3203  03A2  00B3               	movwf	prefEcho@f
  3204  03A3  3066               	movlw	102
  3205  03A4  00B1               	movwf	??_prefEcho
  3206  03A5  0831               	movf	??_prefEcho,w
  3207  03A6  00B4               	movwf	prefEcho@f+1
  3208  03A7  3066               	movlw	102
  3209  03A8  00B1               	movwf	??_prefEcho
  3210  03A9  0831               	movf	??_prefEcho,w
  3211  03AA  00B5               	movwf	prefEcho@f+2
  3212  03AB                     l3995:	
  3213  03AB  01B6               	clrf	prefEcho@f+3
  3214  03AC                     l3997:	
  3215                           
  3216                           ;parseline.c: 190:  if(args[0] == ((void*)0)) {
  3217  03AC  0830               	movf	prefEcho@args,w
  3218  03AD  0086               	movwf	6
  3219  03AE  0187               	clrf	7
  3220  03AF  0801               	movf	1,w
  3221  03B0  1D03               	btfss	3,2
  3222  03B1  2BB3               	goto	u4621
  3223  03B2  2BB4               	goto	u4620
  3224  03B3                     u4621:	
  3225  03B3  2BE2               	goto	l4021
  3226  03B4                     u4620:	
  3227  03B4                     l3999:	
  3228                           
  3229                           ;parseline.c: 191:   (copyConstStr(cmdEcho,SndBuf),SendStr()); Send(' ');
  3230  03B4  302B               	movlw	low (_cmdEcho| (0+32768))
  3231  03B5  00A0               	movwf	copyConstStr@src
  3232  03B6  3090               	movlw	high (_cmdEcho| (0+32768))
  3233  03B7  00A1               	movwf	copyConstStr@src+1
  3234  03B8  30C0               	movlw	(low (_SndBuf| 0))& (0+255)
  3235  03B9  00B1               	movwf	??_prefEcho
  3236  03BA  0831               	movf	??_prefEcho,w
  3237  03BB  00A2               	movwf	copyConstStr@dst
  3238  03BC  318E  26D4  3183   	fcall	_copyConstStr
  3239  03BF                     l4001:	
  3240  03BF  318F  271A  3183   	fcall	_SendStr
  3241  03C2                     l4003:	
  3242  03C2  3020               	movlw	32
  3243  03C3  3186  267D  3183   	fcall	_Send
  3244  03C6                     l4005:	
  3245                           
  3246                           ;parseline.c: 192:   if(echoFLG) {
  3247  03C6  0871               	movf	_echoFLG,w
  3248  03C7  1903               	btfsc	3,2
  3249  03C8  2BCA               	goto	u4631
  3250  03C9  2BCB               	goto	u4630
  3251  03CA                     u4631:	
  3252  03CA  2BD1               	goto	l4011
  3253  03CB                     u4630:	
  3254  03CB                     l4007:	
  3255                           
  3256                           ;parseline.c: 193:    f[1] = 'n';
  3257  03CB  306E               	movlw	110
  3258  03CC  0020               	movlb	0	; select bank0
  3259  03CD  00B1               	movwf	??_prefEcho
  3260  03CE  0831               	movf	??_prefEcho,w
  3261  03CF  00B4               	movwf	prefEcho@f+1
  3262  03D0                     l4009:	
  3263                           
  3264                           ;parseline.c: 194:    f[2] = '\0';
  3265  03D0  01B5               	clrf	prefEcho@f+2
  3266  03D1                     l4011:	
  3267                           
  3268                           ;parseline.c: 196:   sndStr(f); (Send('\r'),Send('\n'));
  3269  03D1  3033               	movlw	low prefEcho@f
  3270  03D2  0020               	movlb	0	; select bank0
  3271  03D3  00A7               	movwf	sndStr@p
  3272  03D4  3000               	movlw	high prefEcho@f
  3273  03D5  00A8               	movwf	sndStr@p+1
  3274  03D6  318F  2740  3183   	fcall	_sndStr
  3275  03D9                     l4013:	
  3276  03D9  300D               	movlw	13
  3277  03DA  3186  267D  3183   	fcall	_Send
  3278  03DD                     l4015:	
  3279  03DD  300A               	movlw	10
  3280  03DE  3186  267D  3183   	fcall	_Send
  3281  03E1  2C38               	goto	l589
  3282  03E2                     l4021:	
  3283  03E2  0A30               	incf	prefEcho@args,w
  3284  03E3  0086               	movwf	6
  3285  03E4  0187               	clrf	7
  3286  03E5  0801               	movf	1,w
  3287  03E6  1D03               	btfss	3,2
  3288  03E7  2BE9               	goto	u4641
  3289  03E8  2BEA               	goto	u4640
  3290  03E9                     u4641:	
  3291  03E9  2C34               	goto	l4041
  3292  03EA                     u4640:	
  3293  03EA  2C0B               	goto	l4039
  3294  03EB                     l4025:	
  3295                           
  3296                           ;parseline.c: 201:    echoFLG = 0;
  3297  03EB  01F1               	clrf	_echoFLG
  3298  03EC  2C38               	goto	l589
  3299  03ED                     l598:	
  3300                           
  3301                           ;parseline.c: 204:    echoFLG = 1;
  3302  03ED  01F1               	clrf	_echoFLG
  3303  03EE  0AF1               	incf	_echoFLG,f
  3304                           
  3305                           ;parseline.c: 205:    return;
  3306  03EF  2C38               	goto	l589
  3307  03F0                     l4029:	
  3308                           
  3309                           ;parseline.c: 207:    if(*(args[0]+1) == 'n' || *(args[0]+1) == 'N') echoFLG = 1;
  3310  03F0  0830               	movf	prefEcho@args,w
  3311  03F1  0086               	movwf	6
  3312  03F2  0187               	clrf	7
  3313  03F3  0A01               	incf	1,w
  3314  03F4  0086               	movwf	6
  3315  03F5  3001               	movlw	1	; select bank2/3
  3316  03F6  0087               	movwf	7
  3317  03F7  306E               	movlw	110
  3318  03F8  0601               	xorwf	1,w
  3319  03F9  1903               	btfsc	3,2
  3320  03FA  2BFC               	goto	u4651
  3321  03FB  2BFD               	goto	u4650
  3322  03FC                     u4651:	
  3323  03FC  2BED               	goto	l598
  3324  03FD                     u4650:	
  3325  03FD                     l4031:	
  3326  03FD  0830               	movf	prefEcho@args,w
  3327  03FE  0086               	movwf	6
  3328  03FF  0187               	clrf	7
  3329  0400  0A01               	incf	1,w
  3330  0401  0086               	movwf	6
  3331  0402  3001               	movlw	1	; select bank2/3
  3332  0403  0087               	movwf	7
  3333  0404  304E               	movlw	78
  3334  0405  0601               	xorwf	1,w
  3335  0406  1D03               	btfss	3,2
  3336  0407  2C09               	goto	u4661
  3337  0408  2C0A               	goto	u4660
  3338  0409                     u4661:	
  3339  0409  2BEB               	goto	l4025
  3340  040A                     u4660:	
  3341  040A  2BED               	goto	l598
  3342  040B                     l4039:	
  3343  040B  0830               	movf	prefEcho@args,w
  3344  040C  0086               	movwf	6
  3345  040D  0187               	clrf	7
  3346  040E  0801               	movf	1,w
  3347  040F  0086               	movwf	6
  3348  0410  3001               	movlw	1	; select bank2/3
  3349  0411  0087               	movwf	7
  3350  0412  0801               	movf	1,w
  3351  0413  00B1               	movwf	??_prefEcho
  3352  0414  01B2               	clrf	??_prefEcho+1
  3353                           
  3354                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3355                           ; Switch size 1, requested type "simple"
  3356                           ; Number of cases is 1, Range of values is 0 to 0
  3357                           ; switch strategies available:
  3358                           ; Name         Instructions Cycles
  3359                           ; simple_byte            4     3 (average)
  3360                           ; direct_byte            8     6 (fixed)
  3361                           ; jumptable            260     6 (fixed)
  3362                           ;	Chosen strategy is simple_byte
  3363  0415  0832               	movf	??_prefEcho+1,w
  3364  0416  3A00               	xorlw	0	; case 0
  3365  0417  1903               	skipnz
  3366  0418  2C1A               	goto	l4633
  3367  0419  2C34               	goto	l4041
  3368  041A                     l4633:	
  3369                           
  3370                           ; Switch size 1, requested type "simple"
  3371                           ; Number of cases is 8, Range of values is 48 to 116
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           25    13 (average)
  3375                           ; direct_byte          147     9 (fixed)
  3376                           ; jumptable            263     9 (fixed)
  3377                           ;	Chosen strategy is simple_byte
  3378  041A  0831               	movf	??_prefEcho,w
  3379  041B  3A30               	xorlw	48	; case 48
  3380  041C  1903               	skipnz
  3381  041D  2BEB               	goto	l4025
  3382  041E  3A01               	xorlw	1	; case 49
  3383  041F  1903               	skipnz
  3384  0420  2BED               	goto	l598
  3385  0421  3A77               	xorlw	119	; case 70
  3386  0422  1903               	skipnz
  3387  0423  2BEB               	goto	l4025
  3388  0424  3A09               	xorlw	9	; case 79
  3389  0425  1903               	skipnz
  3390  0426  2BF0               	goto	l4029
  3391  0427  3A1B               	xorlw	27	; case 84
  3392  0428  1903               	skipnz
  3393  0429  2BED               	goto	l598
  3394  042A  3A32               	xorlw	50	; case 102
  3395  042B  1903               	skipnz
  3396  042C  2BEB               	goto	l4025
  3397  042D  3A09               	xorlw	9	; case 111
  3398  042E  1903               	skipnz
  3399  042F  2BF0               	goto	l4029
  3400  0430  3A1B               	xorlw	27	; case 116
  3401  0431  1903               	skipnz
  3402  0432  2BED               	goto	l598
  3403  0433  2C34               	goto	l4041
  3404  0434                     l4041:	
  3405                           
  3406                           ;parseline.c: 212:  printInvArgErr(args);
  3407  0434  0830               	movf	prefEcho@args,w
  3408  0435  3187  2745  3183   	fcall	_printInvArgErr
  3409  0438                     l589:	
  3410  0438  0008               	return
  3411  0439                     __end_of_prefEcho:	
  3412                           
  3413                           	psect	text6
  3414  02F0                     __ptext6:	
  3415 ;; *************** function _prefX *****************
  3416 ;; Defined at:
  3417 ;;		line 290 in file "parseline.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  args            1   16[BANK0 ] PTR PTR unsigned char 
  3420 ;;		 -> parseCommand@args(10), 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;  buf            10   25[BANK0 ] unsigned char [10]
  3423 ;;  x               3   22[BANK0 ] unsigned char [3]
  3424 ;;  i               1   40[BANK0 ] unsigned char 
  3425 ;;  addr            1   39[BANK0 ] unsigned char 
  3426 ;;  j               1   38[BANK0 ] unsigned char 
  3427 ;;  reg             1   37[BANK0 ] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  1    wreg      void 
  3430 ;; Registers used:
  3431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3437 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3438 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3439 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3440 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3441 ;;Total ram usage:       25 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    7
  3444 ;; This function calls:
  3445 ;;		_Send
  3446 ;;		_SendHex
  3447 ;;		_isdigit
  3448 ;;		_readI2C
  3449 ;;		_sendI2C
  3450 ;;		_sndStr
  3451 ;;		_stobyte
  3452 ;; This function is called by:
  3453 ;;		_parseCommand
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _prefX
  3459  02F0                     _prefX:	
  3460  02F0                     l4143:	
  3461                           ;incstack = 0
  3462                           ; Regs used in _prefX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3463                           
  3464                           
  3465                           ;parseline.c: 291:  Byte j,i,addr,reg;;parseline.c: 292:  Byte buf[10];;parseline.c: 293
      +                          :  Byte x[] = "X:";
  3466  02F0  0020               	movlb	0	; select bank0
  3467  02F1  0864               	movf	prefX@F4812,w
  3468  02F2  00B6               	movwf	prefX@x
  3469  02F3  0865               	movf	prefX@F4812+1,w
  3470  02F4  00B7               	movwf	prefX@x+1
  3471  02F5  0866               	movf	prefX@F4812+2,w
  3472  02F6  00B8               	movwf	prefX@x+2
  3473  02F7                     l4145:	
  3474                           
  3475                           ;parseline.c: 294:  for(i = 0; i < 10 && args[i] != ((void*)0); i++) {
  3476  02F7  01C8               	clrf	prefX@i
  3477  02F8  2B37               	goto	l4157
  3478  02F9                     l4147:	
  3479  02F9  0848               	movf	prefX@i,w
  3480  02FA  0730               	addwf	prefX@args,w
  3481  02FB  00B1               	movwf	??_prefX
  3482  02FC  0831               	movf	??_prefX,w
  3483  02FD  0086               	movwf	6
  3484  02FE  0187               	clrf	7
  3485  02FF  0801               	movf	1,w
  3486  0300  0086               	movwf	6
  3487  0301  3001               	movlw	1	; select bank2/3
  3488  0302  0087               	movwf	7
  3489  0303  0801               	movf	1,w
  3490  0304  3ED0               	addlw	208
  3491  0305  00B2               	movwf	??_prefX+1
  3492  0306  30FF               	movlw	255
  3493  0307  1803               	skipnc
  3494  0308  3000               	movlw	0
  3495  0309  00B3               	movwf	??_prefX+2
  3496  030A  3000               	movlw	0
  3497  030B  0233               	subwf	??_prefX+2,w
  3498  030C  300A               	movlw	10
  3499  030D  1903               	skipnz
  3500  030E  0232               	subwf	??_prefX+1,w
  3501  030F  1C03               	skipc
  3502  0310  2B12               	goto	u4801
  3503  0311  2B14               	goto	u4800
  3504  0312                     u4801:	
  3505  0312  3001               	movlw	1
  3506  0313  2B15               	goto	u4810
  3507  0314                     u4800:	
  3508  0314  3000               	movlw	0
  3509  0315                     u4810:	
  3510  0315  00B4               	movwf	??_prefX+3
  3511  0316  01B5               	clrf	??_prefX+4
  3512  0317  0834               	movf	??_prefX+3,w
  3513  0318  00C3               	movwf	_prefX$636
  3514  0319  0835               	movf	??_prefX+4,w
  3515  031A  00C4               	movwf	_prefX$636+1
  3516  031B                     l4151:	
  3517  031B  0843               	movf	_prefX$636,w
  3518  031C  0444               	iorwf	_prefX$636+1,w
  3519  031D  1903               	btfsc	3,2
  3520  031E  2B20               	goto	u4821
  3521  031F  2B21               	goto	u4820
  3522  0320                     u4821:	
  3523  0320  2B48               	goto	l4161
  3524  0321                     u4820:	
  3525  0321                     l4153:	
  3526  0321  0848               	movf	prefX@i,w
  3527  0322  0730               	addwf	prefX@args,w
  3528  0323  00B1               	movwf	??_prefX
  3529  0324  0831               	movf	??_prefX,w
  3530  0325  0086               	movwf	6
  3531  0326  0187               	clrf	7
  3532  0327  0801               	movf	1,w
  3533  0328  3181  2180  3182   	fcall	_stobyte
  3534  032B  0020               	movlb	0	; select bank0
  3535  032C  00B2               	movwf	??_prefX+1
  3536  032D  0848               	movf	prefX@i,w
  3537  032E  3E39               	addlw	(low (prefX@buf| 0))& (0+255)
  3538  032F  0086               	movwf	6
  3539  0330  0187               	clrf	7
  3540  0331  0832               	movf	??_prefX+1,w
  3541  0332  0081               	movwf	1
  3542  0333                     l4155:	
  3543                           
  3544                           ;parseline.c: 297:  }
  3545  0333  3001               	movlw	1
  3546  0334  00B1               	movwf	??_prefX
  3547  0335  0831               	movf	??_prefX,w
  3548  0336  07C8               	addwf	prefX@i,f
  3549  0337                     l4157:	
  3550  0337  300A               	movlw	10
  3551  0338  0248               	subwf	prefX@i,w
  3552  0339  1803               	skipnc
  3553  033A  2B3C               	goto	u4831
  3554  033B  2B3D               	goto	u4830
  3555  033C                     u4831:	
  3556  033C  2B48               	goto	l4161
  3557  033D                     u4830:	
  3558  033D                     l4159:	
  3559  033D  0848               	movf	prefX@i,w
  3560  033E  0730               	addwf	prefX@args,w
  3561  033F  00B1               	movwf	??_prefX
  3562  0340  0831               	movf	??_prefX,w
  3563  0341  0086               	movwf	6
  3564  0342  0187               	clrf	7
  3565  0343  0801               	movf	1,w
  3566  0344  1D03               	btfss	3,2
  3567  0345  2B47               	goto	u4841
  3568  0346  2B48               	goto	u4840
  3569  0347                     u4841:	
  3570  0347  2AF9               	goto	l4147
  3571  0348                     u4840:	
  3572  0348                     l4161:	
  3573                           
  3574                           ;parseline.c: 298:  if(i<3) return;
  3575  0348  3003               	movlw	3
  3576  0349  0248               	subwf	prefX@i,w
  3577  034A  1803               	skipnc
  3578  034B  2B4D               	goto	u4851
  3579  034C  2B4E               	goto	u4850
  3580  034D                     u4851:	
  3581  034D  2B4F               	goto	l4165
  3582  034E                     u4850:	
  3583  034E  2B9D               	goto	l666
  3584  034F                     l4165:	
  3585                           
  3586                           ;parseline.c: 299:  addr = buf[0];
  3587  034F  0839               	movf	prefX@buf,w
  3588  0350  00B1               	movwf	??_prefX
  3589  0351  0831               	movf	??_prefX,w
  3590  0352  00C7               	movwf	prefX@addr
  3591                           
  3592                           ;parseline.c: 300:  reg = buf[1];
  3593  0353  083A               	movf	prefX@buf+1,w
  3594  0354  00B1               	movwf	??_prefX
  3595  0355  0831               	movf	??_prefX,w
  3596  0356  00C5               	movwf	prefX@reg
  3597                           
  3598                           ;parseline.c: 301:  j = buf[2];
  3599  0357  083B               	movf	prefX@buf+2,w
  3600  0358  00B1               	movwf	??_prefX
  3601  0359  0831               	movf	??_prefX,w
  3602  035A  00C6               	movwf	prefX@j
  3603  035B                     l4167:	
  3604                           
  3605                           ;parseline.c: 302:  sendI2C(addr,&reg,1);
  3606  035B  3045               	movlw	(low (prefX@reg| 0))& (0+255)
  3607  035C  00B1               	movwf	??_prefX
  3608  035D  0831               	movf	??_prefX,w
  3609  035E  00A0               	movwf	sendI2C@buf
  3610  035F  01A1               	clrf	sendI2C@n
  3611  0360  0AA1               	incf	sendI2C@n,f
  3612  0361  0847               	movf	prefX@addr,w
  3613  0362  3187  27BE  3182   	fcall	_sendI2C
  3614  0365                     l4169:	
  3615                           
  3616                           ;parseline.c: 303:  readI2C(addr,buf,j);
  3617  0365  3039               	movlw	(low (prefX@buf| 0))& (0+255)
  3618  0366  0020               	movlb	0	; select bank0
  3619  0367  00B1               	movwf	??_prefX
  3620  0368  0831               	movf	??_prefX,w
  3621  0369  00A0               	movwf	readI2C@buf
  3622  036A  0846               	movf	prefX@j,w
  3623  036B  00B2               	movwf	??_prefX+1
  3624  036C  0832               	movf	??_prefX+1,w
  3625  036D  00A1               	movwf	readI2C@n
  3626  036E  0847               	movf	prefX@addr,w
  3627  036F  3186  2634  3182   	fcall	_readI2C
  3628  0372                     l4171:	
  3629                           
  3630                           ;parseline.c: 305:  sndStr(x);
  3631  0372  3036               	movlw	low prefX@x
  3632  0373  0020               	movlb	0	; select bank0
  3633  0374  00A7               	movwf	sndStr@p
  3634  0375  3000               	movlw	high prefX@x
  3635  0376  00A8               	movwf	sndStr@p+1
  3636  0377  318F  2740  3182   	fcall	_sndStr
  3637  037A                     l4173:	
  3638                           
  3639                           ;parseline.c: 306:  for(i = 0; i < j; i++) {
  3640  037A  0020               	movlb	0	; select bank0
  3641  037B  01C8               	clrf	prefX@i
  3642  037C  2B8F               	goto	l4179
  3643  037D                     l4175:	
  3644                           
  3645                           ;parseline.c: 307:   Send(' ');
  3646  037D  3020               	movlw	32
  3647  037E  3186  267D  3182   	fcall	_Send
  3648                           
  3649                           ;parseline.c: 308:   SendHex(buf[i]);
  3650  0381  0020               	movlb	0	; select bank0
  3651  0382  0848               	movf	prefX@i,w
  3652  0383  3E39               	addlw	(low (prefX@buf| 0))& (0+255)
  3653  0384  0086               	movwf	6
  3654  0385  0187               	clrf	7
  3655  0386  0801               	movf	1,w
  3656  0387  3187  2785  3182   	fcall	_SendHex
  3657  038A                     l4177:	
  3658                           
  3659                           ;parseline.c: 309:  }
  3660  038A  3001               	movlw	1
  3661  038B  0020               	movlb	0	; select bank0
  3662  038C  00B1               	movwf	??_prefX
  3663  038D  0831               	movf	??_prefX,w
  3664  038E  07C8               	addwf	prefX@i,f
  3665  038F                     l4179:	
  3666  038F  0846               	movf	prefX@j,w
  3667  0390  0248               	subwf	prefX@i,w
  3668  0391  1C03               	skipc
  3669  0392  2B94               	goto	u4861
  3670  0393  2B95               	goto	u4860
  3671  0394                     u4861:	
  3672  0394  2B7D               	goto	l4175
  3673  0395                     u4860:	
  3674  0395                     l4181:	
  3675                           
  3676                           ;parseline.c: 310:  (Send('\r'),Send('\n'));
  3677  0395  300D               	movlw	13
  3678  0396  3186  267D  3182   	fcall	_Send
  3679  0399  300A               	movlw	10
  3680  039A  3186  267D  3182   	fcall	_Send
  3681  039D                     l666:	
  3682  039D  0008               	return
  3683  039E                     __end_of_prefX:	
  3684                           
  3685                           	psect	text7
  3686  0F97                     __ptext7:	
  3687 ;; *************** function _sendI2Cbyte *****************
  3688 ;; Defined at:
  3689 ;;		line 36 in file "I2CBase.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  addr            1    wreg     unsigned char 
  3692 ;;  reg             1    0[BANK0 ] unsigned char 
  3693 ;;  data            1    1[BANK0 ] unsigned char 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  addr            1    2[BANK0 ] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0, pclath, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3708 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3709 ;;Total ram usage:        3 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    4
  3712 ;; This function calls:
  3713 ;;		_waitIdleI2C
  3714 ;; This function is called by:
  3715 ;;		_prefSet
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           
  3720                           ;psect for function _sendI2Cbyte
  3721  0F97                     _sendI2Cbyte:	
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _sendI2Cbyte: [wreg+status,2+status,0+pclath+cstack]
  3725                           ;sendI2Cbyte@addr stored from wreg
  3726  0F97  0020               	movlb	0	; select bank0
  3727  0F98  00A2               	movwf	sendI2Cbyte@addr
  3728  0F99                     l3775:	
  3729                           
  3730                           ;I2CBase.c: 37:     SSP1CON2bits.SEN = 1;
  3731  0F99  0024               	movlb	4	; select bank4
  3732  0F9A  1416               	bsf	22,0	;volatile
  3733  0F9B                     l247:	
  3734                           ;I2CBase.c: 38:     while(SSP1CON2bits.SEN==1);
  3735                           
  3736  0F9B  1816               	btfsc	22,0	;volatile
  3737  0F9C  2F9E               	goto	u4191
  3738  0F9D  2F9F               	goto	u4190
  3739  0F9E                     u4191:	
  3740  0F9E  2F9B               	goto	l247
  3741  0F9F                     u4190:	
  3742  0F9F                     l3777:	
  3743                           
  3744                           ;I2CBase.c: 39:     SSP1BUF = addr << 1;
  3745  0F9F  0020               	movlb	0	; select bank0
  3746  0FA0  3522               	lslf	sendI2Cbyte@addr,w
  3747  0FA1  0024               	movlb	4	; select bank4
  3748  0FA2  0091               	movwf	17	;volatile
  3749  0FA3                     l250:	
  3750                           ;I2CBase.c: 40:     while(SSP1STATbits.BF==1);
  3751                           
  3752  0FA3  1814               	btfsc	20,0	;volatile
  3753  0FA4  2FA6               	goto	u4201
  3754  0FA5  2FA7               	goto	u4200
  3755  0FA6                     u4201:	
  3756  0FA6  2FA3               	goto	l250
  3757  0FA7                     u4200:	
  3758  0FA7                     l253:	
  3759  0FA7  1B16               	btfsc	22,6	;volatile
  3760  0FA8  2FAA               	goto	u4211
  3761  0FA9  2FAB               	goto	u4210
  3762  0FAA                     u4211:	
  3763  0FAA  2FA7               	goto	l253
  3764  0FAB                     u4210:	
  3765  0FAB                     l3779:	
  3766                           
  3767                           ;I2CBase.c: 42:     waitIdleI2C();
  3768  0FAB  318D  25C7  318F   	fcall	_waitIdleI2C
  3769  0FAE                     l3781:	
  3770                           
  3771                           ;I2CBase.c: 45:     SSP1BUF = reg;
  3772  0FAE  0020               	movlb	0	; select bank0
  3773  0FAF  0820               	movf	sendI2Cbyte@reg,w
  3774  0FB0  0024               	movlb	4	; select bank4
  3775  0FB1  0091               	movwf	17	;volatile
  3776  0FB2                     l256:	
  3777                           ;I2CBase.c: 46:     while(SSP1STATbits.BF);
  3778                           
  3779  0FB2  1814               	btfsc	20,0	;volatile
  3780  0FB3  2FB5               	goto	u4221
  3781  0FB4  2FB6               	goto	u4220
  3782  0FB5                     u4221:	
  3783  0FB5  2FB2               	goto	l256
  3784  0FB6                     u4220:	
  3785  0FB6                     l3783:	
  3786                           
  3787                           ;I2CBase.c: 47:     waitIdleI2C();
  3788  0FB6  318D  25C7  318F   	fcall	_waitIdleI2C
  3789  0FB9                     l3785:	
  3790                           
  3791                           ;I2CBase.c: 50:     SSP1BUF = data;
  3792  0FB9  0020               	movlb	0	; select bank0
  3793  0FBA  0821               	movf	sendI2Cbyte@data,w
  3794  0FBB  0024               	movlb	4	; select bank4
  3795  0FBC  0091               	movwf	17	;volatile
  3796  0FBD                     l259:	
  3797                           ;I2CBase.c: 51:     while(SSP1STATbits.BF);
  3798                           
  3799  0FBD  1814               	btfsc	20,0	;volatile
  3800  0FBE  2FC0               	goto	u4231
  3801  0FBF  2FC1               	goto	u4230
  3802  0FC0                     u4231:	
  3803  0FC0  2FBD               	goto	l259
  3804  0FC1                     u4230:	
  3805  0FC1                     l3787:	
  3806                           
  3807                           ;I2CBase.c: 52:     waitIdleI2C();
  3808  0FC1  318D  25C7  318F   	fcall	_waitIdleI2C
  3809  0FC4                     l3789:	
  3810                           
  3811                           ;I2CBase.c: 54:     SSP1CON2bits.PEN = 1;
  3812  0FC4  0024               	movlb	4	; select bank4
  3813  0FC5  1516               	bsf	22,2	;volatile
  3814  0FC6                     l262:	
  3815                           ;I2CBase.c: 55:     while(SSP1CON2bits.PEN);
  3816                           
  3817  0FC6  1916               	btfsc	22,2	;volatile
  3818  0FC7  2FC9               	goto	u4241
  3819  0FC8  2FCA               	goto	u4240
  3820  0FC9                     u4241:	
  3821  0FC9  2FC6               	goto	l262
  3822  0FCA                     u4240:	
  3823  0FCA                     l265:	
  3824  0FCA  0008               	return
  3825  0FCB                     __end_of_sendI2Cbyte:	
  3826                           
  3827                           	psect	text8
  3828  0180                     __ptext8:	
  3829 ;; *************** function _stobyte *****************
  3830 ;; Defined at:
  3831 ;;		line 125 in file "parseline.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  s               1    wreg     PTR unsigned char 
  3834 ;;		 -> NULL(0), Buffer(32), 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  s               1   15[BANK0 ] PTR unsigned char 
  3837 ;;		 -> NULL(0), Buffer(32), 
  3838 ;;  ans             1   14[BANK0 ] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  1    wreg      unsigned char 
  3841 ;; Registers used:
  3842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3850 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;Total ram usage:       10 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    4
  3855 ;; This function calls:
  3856 ;;		___bmul
  3857 ;;		_isdigit
  3858 ;;		_isupper
  3859 ;; This function is called by:
  3860 ;;		_prefSet
  3861 ;;		_prefGet
  3862 ;;		_prefX
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           
  3867                           ;psect for function _stobyte
  3868  0180                     _stobyte:	
  3869                           
  3870                           ;incstack = 0
  3871                           ; Regs used in _stobyte: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3872                           ;stobyte@s stored from wreg
  3873  0180  0020               	movlb	0	; select bank0
  3874  0181  00AF               	movwf	stobyte@s
  3875  0182                     l3849:	
  3876                           
  3877                           ;parseline.c: 127:  Byte ans = 0;
  3878  0182  01AE               	clrf	stobyte@ans
  3879  0183                     l3851:	
  3880                           
  3881                           ;parseline.c: 128:     if(*s=='0') {
  3882  0183  082F               	movf	stobyte@s,w
  3883  0184  0086               	movwf	6
  3884  0185  3001               	movlw	1	; select bank2/3
  3885  0186  0087               	movwf	7
  3886  0187  3030               	movlw	48
  3887  0188  0601               	xorwf	1,w
  3888  0189  1D03               	btfss	3,2
  3889  018A  298C               	goto	u4371
  3890  018B  298D               	goto	u4370
  3891  018C                     u4371:	
  3892  018C  2A33               	goto	l3895
  3893  018D                     u4370:	
  3894  018D                     l3853:	
  3895                           
  3896                           ;parseline.c: 129:   s++;
  3897  018D  3001               	movlw	1
  3898  018E  00A6               	movwf	??_stobyte
  3899  018F  0826               	movf	??_stobyte,w
  3900  0190  07AF               	addwf	stobyte@s,f
  3901  0191                     l3855:	
  3902                           
  3903                           ;parseline.c: 131:   if(*s == 'x' || *s == 'X') {
  3904  0191  082F               	movf	stobyte@s,w
  3905  0192  0086               	movwf	6
  3906  0193  3001               	movlw	1	; select bank2/3
  3907  0194  0087               	movwf	7
  3908  0195  3078               	movlw	120
  3909  0196  0601               	xorwf	1,w
  3910  0197  1903               	btfsc	3,2
  3911  0198  299A               	goto	u4381
  3912  0199  299B               	goto	u4380
  3913  019A                     u4381:	
  3914  019A  29A5               	goto	l3859
  3915  019B                     u4380:	
  3916  019B                     l3857:	
  3917  019B  082F               	movf	stobyte@s,w
  3918  019C  0086               	movwf	6
  3919  019D  3001               	movlw	1	; select bank2/3
  3920  019E  0087               	movwf	7
  3921  019F  3058               	movlw	88
  3922  01A0  0601               	xorwf	1,w
  3923  01A1  1D03               	btfss	3,2
  3924  01A2  29A4               	goto	u4391
  3925  01A3  29A5               	goto	u4390
  3926  01A4                     u4391:	
  3927  01A4  2A33               	goto	l3895
  3928  01A5                     u4390:	
  3929  01A5                     l3859:	
  3930                           
  3931                           ;parseline.c: 132:    s++;
  3932  01A5  3001               	movlw	1
  3933  01A6  00A6               	movwf	??_stobyte
  3934  01A7  0826               	movf	??_stobyte,w
  3935  01A8  07AF               	addwf	stobyte@s,f
  3936                           
  3937                           ;parseline.c: 133:    while(*s != '\0') {
  3938  01A9  2A0F               	goto	l3883
  3939  01AA                     l3861:	
  3940                           
  3941                           ;parseline.c: 135:     if((0 ? isdigit(*s) : ((unsigned)(*s)-'0') < 10))
  3942  01AA  0EAE               	swapf	stobyte@ans,f
  3943  01AB  30F0               	movlw	240
  3944  01AC  05AE               	andwf	stobyte@ans,f
  3945  01AD                     l3863:	
  3946  01AD  082F               	movf	stobyte@s,w
  3947  01AE  0086               	movwf	6
  3948  01AF  3001               	movlw	1	; select bank2/3
  3949  01B0  0087               	movwf	7
  3950  01B1  0801               	movf	1,w
  3951  01B2  3ED0               	addlw	208
  3952  01B3  00A6               	movwf	??_stobyte
  3953  01B4  30FF               	movlw	255
  3954  01B5  1803               	skipnc
  3955  01B6  3000               	movlw	0
  3956  01B7  00A7               	movwf	??_stobyte+1
  3957  01B8  3000               	movlw	0
  3958  01B9  0227               	subwf	??_stobyte+1,w
  3959  01BA  300A               	movlw	10
  3960  01BB  1903               	skipnz
  3961  01BC  0226               	subwf	??_stobyte,w
  3962  01BD  1C03               	skipc
  3963  01BE  29C0               	goto	u4401
  3964  01BF  29C2               	goto	u4400
  3965  01C0                     u4401:	
  3966  01C0  3001               	movlw	1
  3967  01C1  29C3               	goto	u4410
  3968  01C2                     u4400:	
  3969  01C2  3000               	movlw	0
  3970  01C3                     u4410:	
  3971  01C3  00A8               	movwf	??_stobyte+2
  3972  01C4  01A9               	clrf	??_stobyte+3
  3973  01C5  0828               	movf	??_stobyte+2,w
  3974  01C6  00AA               	movwf	_stobyte$596
  3975  01C7  0829               	movf	??_stobyte+3,w
  3976  01C8  00AB               	movwf	_stobyte$596+1
  3977  01C9                     l3867:	
  3978  01C9  082A               	movf	_stobyte$596,w
  3979  01CA  042B               	iorwf	_stobyte$596+1,w
  3980  01CB  1903               	btfsc	3,2
  3981  01CC  29CE               	goto	u4421
  3982  01CD  29CF               	goto	u4420
  3983  01CE                     u4421:	
  3984  01CE  29D9               	goto	l3871
  3985  01CF                     u4420:	
  3986  01CF                     l3869:	
  3987                           
  3988                           ;parseline.c: 136:      ans += *s -'0';
  3989  01CF  082F               	movf	stobyte@s,w
  3990  01D0  0086               	movwf	6
  3991  01D1  3001               	movlw	1	; select bank2/3
  3992  01D2  0087               	movwf	7
  3993  01D3  0801               	movf	1,w
  3994  01D4  3ED0               	addlw	208
  3995  01D5  00A6               	movwf	??_stobyte
  3996  01D6  0826               	movf	??_stobyte,w
  3997  01D7  07AE               	addwf	stobyte@ans,f
  3998  01D8  29A5               	goto	l3859
  3999  01D9                     l3871:	
  4000  01D9  082F               	movf	stobyte@s,w
  4001  01DA  0086               	movwf	6
  4002  01DB  3001               	movlw	1	; select bank2/3
  4003  01DC  0087               	movwf	7
  4004  01DD  0801               	movf	1,w
  4005  01DE  3EBF               	addlw	191
  4006  01DF  00A6               	movwf	??_stobyte
  4007  01E0  30FF               	movlw	255
  4008  01E1  1803               	skipnc
  4009  01E2  3000               	movlw	0
  4010  01E3  00A7               	movwf	??_stobyte+1
  4011  01E4  3000               	movlw	0
  4012  01E5  0227               	subwf	??_stobyte+1,w
  4013  01E6  301A               	movlw	26
  4014  01E7  1903               	skipnz
  4015  01E8  0226               	subwf	??_stobyte,w
  4016  01E9  1C03               	skipc
  4017  01EA  29EC               	goto	u4431
  4018  01EB  29EE               	goto	u4430
  4019  01EC                     u4431:	
  4020  01EC  3001               	movlw	1
  4021  01ED  29EF               	goto	u4440
  4022  01EE                     u4430:	
  4023  01EE  3000               	movlw	0
  4024  01EF                     u4440:	
  4025  01EF  00A8               	movwf	??_stobyte+2
  4026  01F0  01A9               	clrf	??_stobyte+3
  4027  01F1  0828               	movf	??_stobyte+2,w
  4028  01F2  00AC               	movwf	_stobyte$597
  4029  01F3  0829               	movf	??_stobyte+3,w
  4030  01F4  00AD               	movwf	_stobyte$597+1
  4031  01F5                     l3875:	
  4032  01F5  082C               	movf	_stobyte$597,w
  4033  01F6  042D               	iorwf	_stobyte$597+1,w
  4034  01F7  1903               	btfsc	3,2
  4035  01F8  29FA               	goto	u4451
  4036  01F9  29FB               	goto	u4450
  4037  01FA                     u4451:	
  4038  01FA  2A05               	goto	l3879
  4039  01FB                     u4450:	
  4040  01FB                     l3877:	
  4041                           
  4042                           ;parseline.c: 138:      ans += *s - 'A' + 10;
  4043  01FB  082F               	movf	stobyte@s,w
  4044  01FC  0086               	movwf	6
  4045  01FD  3001               	movlw	1	; select bank2/3
  4046  01FE  0087               	movwf	7
  4047  01FF  0801               	movf	1,w
  4048  0200  3EC9               	addlw	201
  4049  0201  00A6               	movwf	??_stobyte
  4050  0202  0826               	movf	??_stobyte,w
  4051  0203  07AE               	addwf	stobyte@ans,f
  4052  0204  29A5               	goto	l3859
  4053  0205                     l3879:	
  4054                           
  4055                           ;parseline.c: 140:      ans += *s - 'a' + 10;
  4056  0205  082F               	movf	stobyte@s,w
  4057  0206  0086               	movwf	6
  4058  0207  3001               	movlw	1	; select bank2/3
  4059  0208  0087               	movwf	7
  4060  0209  0801               	movf	1,w
  4061  020A  3EA9               	addlw	169
  4062  020B  00A6               	movwf	??_stobyte
  4063  020C  0826               	movf	??_stobyte,w
  4064  020D  07AE               	addwf	stobyte@ans,f
  4065  020E  29A5               	goto	l3859
  4066  020F                     l3883:	
  4067                           
  4068                           ;parseline.c: 133:    while(*s != '\0') {
  4069  020F  082F               	movf	stobyte@s,w
  4070  0210  0086               	movwf	6
  4071  0211  3001               	movlw	1	; select bank2/3
  4072  0212  0087               	movwf	7
  4073  0213  0801               	movf	1,w
  4074  0214  1D03               	btfss	3,2
  4075  0215  2A17               	goto	u4461
  4076  0216  2A18               	goto	u4460
  4077  0217                     u4461:	
  4078  0217  29AA               	goto	l3861
  4079  0218                     u4460:	
  4080  0218                     l3885:	
  4081                           
  4082                           ;parseline.c: 143:    return ans;
  4083  0218  082E               	movf	stobyte@ans,w
  4084  0219  2A3D               	goto	l556
  4085  021A                     l3889:	
  4086                           
  4087                           ;parseline.c: 147:   ans *= 10;
  4088  021A  082E               	movf	stobyte@ans,w
  4089  021B  00A6               	movwf	??_stobyte
  4090  021C  0826               	movf	??_stobyte,w
  4091  021D  00A0               	movwf	___bmul@multiplicand
  4092  021E  300A               	movlw	10
  4093  021F  318D  25DD  3181   	fcall	___bmul
  4094  0222  0020               	movlb	0	; select bank0
  4095  0223  00A7               	movwf	??_stobyte+1
  4096  0224  0827               	movf	??_stobyte+1,w
  4097  0225  00AE               	movwf	stobyte@ans
  4098  0226                     l3891:	
  4099                           
  4100                           ;parseline.c: 148:   ans += *s - '0';
  4101  0226  082F               	movf	stobyte@s,w
  4102  0227  0086               	movwf	6
  4103  0228  3001               	movlw	1	; select bank2/3
  4104  0229  0087               	movwf	7
  4105  022A  0801               	movf	1,w
  4106  022B  3ED0               	addlw	208
  4107  022C  00A6               	movwf	??_stobyte
  4108  022D  0826               	movf	??_stobyte,w
  4109  022E  07AE               	addwf	stobyte@ans,f
  4110  022F                     l3893:	
  4111                           
  4112                           ;parseline.c: 149:   s++;
  4113  022F  3001               	movlw	1
  4114  0230  00A6               	movwf	??_stobyte
  4115  0231  0826               	movf	??_stobyte,w
  4116  0232  07AF               	addwf	stobyte@s,f
  4117  0233                     l3895:	
  4118                           
  4119                           ;parseline.c: 146:  while(*s != '\0') {
  4120  0233  082F               	movf	stobyte@s,w
  4121  0234  0086               	movwf	6
  4122  0235  3001               	movlw	1	; select bank2/3
  4123  0236  0087               	movwf	7
  4124  0237  0801               	movf	1,w
  4125  0238  1D03               	btfss	3,2
  4126  0239  2A3B               	goto	u4471
  4127  023A  2A3C               	goto	u4470
  4128  023B                     u4471:	
  4129  023B  2A1A               	goto	l3889
  4130  023C                     u4470:	
  4131  023C  2A18               	goto	l3885
  4132  023D                     l556:	
  4133  023D  0008               	return
  4134  023E                     __end_of_stobyte:	
  4135                           
  4136                           	psect	text9
  4137  0E3B                     __ptext9:	
  4138 ;; *************** function _isupper *****************
  4139 ;; Defined at:
  4140 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  c               2    0[BANK0 ] int 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  2    0[BANK0 ] int 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4154 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;Total ram usage:        6 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    3
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_stobyte
  4165 ;;		_stoint
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _isupper
  4171  0E3B                     _isupper:	
  4172  0E3B                     l3721:	
  4173                           ;incstack = 0
  4174                           ; Regs used in _isupper: [wreg+status,2+status,0]
  4175                           
  4176  0E3B  0020               	movlb	0	; select bank0
  4177  0E3C  0820               	movf	isupper@c,w
  4178  0E3D  3EBF               	addlw	191
  4179  0E3E  00A2               	movwf	??_isupper
  4180  0E3F  30FF               	movlw	255
  4181  0E40  3D21               	addwfc	isupper@c+1,w
  4182  0E41  00A3               	movwf	??_isupper+1
  4183  0E42  3000               	movlw	0
  4184  0E43  0223               	subwf	??_isupper+1,w
  4185  0E44  301A               	movlw	26
  4186  0E45  1903               	skipnz
  4187  0E46  0222               	subwf	??_isupper,w
  4188  0E47  1C03               	skipc
  4189  0E48  2E4A               	goto	u4061
  4190  0E49  2E4C               	goto	u4060
  4191  0E4A                     u4061:	
  4192  0E4A  3001               	movlw	1
  4193  0E4B  2E4D               	goto	u4070
  4194  0E4C                     u4060:	
  4195  0E4C  3000               	movlw	0
  4196  0E4D                     u4070:	
  4197  0E4D  00A4               	movwf	??_isupper+2
  4198  0E4E  01A5               	clrf	??_isupper+3
  4199  0E4F  0824               	movf	??_isupper+2,w
  4200  0E50  00A0               	movwf	?_isupper
  4201  0E51  0825               	movf	??_isupper+3,w
  4202  0E52  00A1               	movwf	?_isupper+1
  4203  0E53                     l1210:	
  4204  0E53  0008               	return
  4205  0E54                     __end_of_isupper:	
  4206                           
  4207                           	psect	text10
  4208  0E22                     __ptext10:	
  4209 ;; *************** function _isdigit *****************
  4210 ;; Defined at:
  4211 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  c               2    0[BANK0 ] int 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  2    0[BANK0 ] int 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;Total ram usage:        6 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    3
  4232 ;; This function calls:
  4233 ;;		Nothing
  4234 ;; This function is called by:
  4235 ;;		_stobyte
  4236 ;;		_prefSet
  4237 ;;		_prefX
  4238 ;;		_str2Byte
  4239 ;;		_str2Hxs
  4240 ;;		_stoint
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _isdigit
  4246  0E22                     _isdigit:	
  4247  0E22                     l3699:	
  4248                           ;incstack = 0
  4249                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4250                           
  4251  0E22  0020               	movlb	0	; select bank0
  4252  0E23  0820               	movf	isdigit@c,w
  4253  0E24  3ED0               	addlw	208
  4254  0E25  00A2               	movwf	??_isdigit
  4255  0E26  30FF               	movlw	255
  4256  0E27  3D21               	addwfc	isdigit@c+1,w
  4257  0E28  00A3               	movwf	??_isdigit+1
  4258  0E29  3000               	movlw	0
  4259  0E2A  0223               	subwf	??_isdigit+1,w
  4260  0E2B  300A               	movlw	10
  4261  0E2C  1903               	skipnz
  4262  0E2D  0222               	subwf	??_isdigit,w
  4263  0E2E  1C03               	skipc
  4264  0E2F  2E31               	goto	u4011
  4265  0E30  2E33               	goto	u4010
  4266  0E31                     u4011:	
  4267  0E31  3001               	movlw	1
  4268  0E32  2E34               	goto	u4020
  4269  0E33                     u4010:	
  4270  0E33  3000               	movlw	0
  4271  0E34                     u4020:	
  4272  0E34  00A4               	movwf	??_isdigit+2
  4273  0E35  01A5               	clrf	??_isdigit+3
  4274  0E36  0824               	movf	??_isdigit+2,w
  4275  0E37  00A0               	movwf	?_isdigit
  4276  0E38  0825               	movf	??_isdigit+3,w
  4277  0E39  00A1               	movwf	?_isdigit+1
  4278  0E3A                     l1196:	
  4279  0E3A  0008               	return
  4280  0E3B                     __end_of_isdigit:	
  4281                           
  4282                           	psect	text11
  4283  0DDD                     __ptext11:	
  4284 ;; *************** function ___bmul *****************
  4285 ;; Defined at:
  4286 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  multiplier      1    wreg     unsigned char 
  4289 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4290 ;; Auto vars:     Size  Location     Type
  4291 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4292 ;;  product         1    2[BANK0 ] unsigned char 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      unsigned char 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4302 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4306 ;;Total ram usage:        4 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    3
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_stobyte
  4313 ;;		_str2Byte
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function ___bmul
  4319  0DDD                     ___bmul:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4323                           ;___bmul@multiplier stored from wreg
  4324  0DDD  0020               	movlb	0	; select bank0
  4325  0DDE  00A3               	movwf	___bmul@multiplier
  4326  0DDF                     l3725:	
  4327  0DDF  01A2               	clrf	___bmul@product
  4328  0DE0                     l3727:	
  4329  0DE0  1C23               	btfss	___bmul@multiplier,0
  4330  0DE1  2DE3               	goto	u4081
  4331  0DE2  2DE4               	goto	u4080
  4332  0DE3                     u4081:	
  4333  0DE3  2DE8               	goto	l3731
  4334  0DE4                     u4080:	
  4335  0DE4                     l3729:	
  4336  0DE4  0820               	movf	___bmul@multiplicand,w
  4337  0DE5  00A1               	movwf	??___bmul
  4338  0DE6  0821               	movf	??___bmul,w
  4339  0DE7  07A2               	addwf	___bmul@product,f
  4340  0DE8                     l3731:	
  4341  0DE8  1003               	clrc
  4342  0DE9  0DA0               	rlf	___bmul@multiplicand,f
  4343  0DEA                     l3733:	
  4344  0DEA  1003               	clrc
  4345  0DEB  0CA3               	rrf	___bmul@multiplier,f
  4346  0DEC  0823               	movf	___bmul@multiplier,w
  4347  0DED  1D03               	btfss	3,2
  4348  0DEE  2DF0               	goto	u4091
  4349  0DEF  2DF1               	goto	u4090
  4350  0DF0                     u4091:	
  4351  0DF0  2DE0               	goto	l3727
  4352  0DF1                     u4090:	
  4353  0DF1                     l3735:	
  4354  0DF1  0822               	movf	___bmul@product,w
  4355  0DF2                     l769:	
  4356  0DF2  0008               	return
  4357  0DF3                     __end_of___bmul:	
  4358                           
  4359                           	psect	text12
  4360  07BE                     __ptext12:	
  4361 ;; *************** function _sendI2C *****************
  4362 ;; Defined at:
  4363 ;;		line 18 in file "I2CBase.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  addr            1    wreg     unsigned char 
  4366 ;;  buf             1    0[BANK0 ] PTR unsigned char 
  4367 ;;		 -> prefX@reg(1), prefGet@reg(1), prefSet@buf(10), 
  4368 ;;  n               1    1[BANK0 ] unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  addr            1    3[BANK0 ] unsigned char 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      void 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        4 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    4
  4387 ;; This function calls:
  4388 ;;		_waitIdleI2C
  4389 ;; This function is called by:
  4390 ;;		_prefSet
  4391 ;;		_prefGet
  4392 ;;		_prefX
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           
  4397                           ;psect for function _sendI2C
  4398  07BE                     _sendI2C:	
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _sendI2C: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4402                           ;sendI2C@addr stored from wreg
  4403  07BE  0020               	movlb	0	; select bank0
  4404  07BF  00A3               	movwf	sendI2C@addr
  4405  07C0                     l3759:	
  4406                           
  4407                           ;I2CBase.c: 19:     SSP1CON2bits.SEN = 1;
  4408  07C0  0024               	movlb	4	; select bank4
  4409  07C1  1416               	bsf	22,0	;volatile
  4410  07C2                     l226:	
  4411                           ;I2CBase.c: 20:     while(SSP1CON2bits.SEN==1);
  4412                           
  4413  07C2  1816               	btfsc	22,0	;volatile
  4414  07C3  2FC5               	goto	u4131
  4415  07C4  2FC6               	goto	u4130
  4416  07C5                     u4131:	
  4417  07C5  2FC2               	goto	l226
  4418  07C6                     u4130:	
  4419  07C6                     l3761:	
  4420                           
  4421                           ;I2CBase.c: 21:     SSP1BUF = addr << 1;
  4422  07C6  0020               	movlb	0	; select bank0
  4423  07C7  3523               	lslf	sendI2C@addr,w
  4424  07C8  0024               	movlb	4	; select bank4
  4425  07C9  0091               	movwf	17	;volatile
  4426  07CA                     l229:	
  4427                           ;I2CBase.c: 22:     while(SSP1STATbits.BF==1);
  4428                           
  4429  07CA  1814               	btfsc	20,0	;volatile
  4430  07CB  2FCD               	goto	u4141
  4431  07CC  2FCE               	goto	u4140
  4432  07CD                     u4141:	
  4433  07CD  2FCA               	goto	l229
  4434  07CE                     u4140:	
  4435  07CE                     l232:	
  4436  07CE  1B16               	btfsc	22,6	;volatile
  4437  07CF  2FD1               	goto	u4151
  4438  07D0  2FD2               	goto	u4150
  4439  07D1                     u4151:	
  4440  07D1  2FCE               	goto	l232
  4441  07D2                     u4150:	
  4442  07D2                     l3763:	
  4443                           
  4444                           ;I2CBase.c: 24:     waitIdleI2C();
  4445  07D2  318D  25C7  3187   	fcall	_waitIdleI2C
  4446                           
  4447                           ;I2CBase.c: 26:     while(n) {
  4448  07D5  2FE9               	goto	l3773
  4449  07D6                     l3765:	
  4450                           
  4451                           ;I2CBase.c: 27:         SSP1BUF = *buf++;
  4452  07D6  0820               	movf	sendI2C@buf,w
  4453  07D7  0086               	movwf	6
  4454  07D8  0187               	clrf	7
  4455  07D9  0801               	movf	1,w
  4456  07DA  0024               	movlb	4	; select bank4
  4457  07DB  0091               	movwf	17	;volatile
  4458  07DC                     l3767:	
  4459  07DC  3001               	movlw	1
  4460  07DD  0020               	movlb	0	; select bank0
  4461  07DE  00A2               	movwf	??_sendI2C
  4462  07DF  0822               	movf	??_sendI2C,w
  4463  07E0  07A0               	addwf	sendI2C@buf,f
  4464  07E1                     l3769:	
  4465                           
  4466                           ;I2CBase.c: 28:         n--;
  4467  07E1  3001               	movlw	1
  4468  07E2  02A1               	subwf	sendI2C@n,f
  4469  07E3                     l237:	
  4470                           ;I2CBase.c: 29:         while(SSP1STATbits.BF);
  4471                           
  4472  07E3  0024               	movlb	4	; select bank4
  4473  07E4  1814               	btfsc	20,0	;volatile
  4474  07E5  2FE7               	goto	u4161
  4475  07E6  2FE8               	goto	u4160
  4476  07E7                     u4161:	
  4477  07E7  2FE3               	goto	l237
  4478  07E8                     u4160:	
  4479  07E8  2FD2               	goto	l3763
  4480  07E9                     l3773:	
  4481                           
  4482                           ;I2CBase.c: 26:     while(n) {
  4483  07E9  0020               	movlb	0	; select bank0
  4484  07EA  0821               	movf	sendI2C@n,w
  4485  07EB  1D03               	btfss	3,2
  4486  07EC  2FEE               	goto	u4171
  4487  07ED  2FEF               	goto	u4170
  4488  07EE                     u4171:	
  4489  07EE  2FD6               	goto	l3765
  4490  07EF                     u4170:	
  4491  07EF                     l240:	
  4492                           
  4493                           ;I2CBase.c: 32:     SSP1CON2bits.PEN = 1;
  4494  07EF  0024               	movlb	4	; select bank4
  4495  07F0  1516               	bsf	22,2	;volatile
  4496  07F1                     l241:	
  4497                           ;I2CBase.c: 33:     while(SSP1CON2bits.PEN);
  4498                           
  4499  07F1  1916               	btfsc	22,2	;volatile
  4500  07F2  2FF4               	goto	u4181
  4501  07F3  2FF5               	goto	u4180
  4502  07F4                     u4181:	
  4503  07F4  2FF1               	goto	l241
  4504  07F5                     u4180:	
  4505  07F5                     l244:	
  4506  07F5  0008               	return
  4507  07F6                     __end_of_sendI2C:	
  4508                           
  4509                           	psect	text13
  4510  0634                     __ptext13:	
  4511 ;; *************** function _readI2C *****************
  4512 ;; Defined at:
  4513 ;;		line 58 in file "I2CBase.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  addr            1    wreg     unsigned char 
  4516 ;;  buf             1    0[BANK0 ] PTR unsigned char 
  4517 ;;		 -> prefX@buf(10), prefGet@buf(16), 
  4518 ;;  n               1    1[BANK0 ] unsigned char 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  addr            1    4[BANK0 ] unsigned char 
  4521 ;;  num             1    3[BANK0 ] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  2    0[BANK0 ] int 
  4524 ;; Registers used:
  4525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4531 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;Total ram usage:        5 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    4
  4538 ;; This function calls:
  4539 ;;		_waitIdleI2C
  4540 ;; This function is called by:
  4541 ;;		_prefGet
  4542 ;;		_prefX
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _readI2C
  4548  0634                     _readI2C:	
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _readI2C: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4552                           ;readI2C@addr stored from wreg
  4553  0634  0020               	movlb	0	; select bank0
  4554  0635  00A4               	movwf	readI2C@addr
  4555  0636                     l3791:	
  4556                           
  4557                           ;I2CBase.c: 59:     unsigned char num = 0;
  4558  0636  01A3               	clrf	readI2C@num
  4559  0637                     l3793:	
  4560                           
  4561                           ;I2CBase.c: 60:     SSP1CON2bits.SEN = 1;
  4562  0637  0024               	movlb	4	; select bank4
  4563  0638  1416               	bsf	22,0	;volatile
  4564  0639                     l268:	
  4565                           ;I2CBase.c: 61:     while(SSP1CON2bits.SEN);
  4566                           
  4567  0639  1816               	btfsc	22,0	;volatile
  4568  063A  2E3C               	goto	u4251
  4569  063B  2E3D               	goto	u4250
  4570  063C                     u4251:	
  4571  063C  2E39               	goto	l268
  4572  063D                     u4250:	
  4573  063D                     l3795:	
  4574                           
  4575                           ;I2CBase.c: 62:     SSP1BUF = (addr << 1) | 0x01;
  4576  063D  1403               	setc
  4577  063E  0020               	movlb	0	; select bank0
  4578  063F  0D24               	rlf	readI2C@addr,w
  4579  0640  0024               	movlb	4	; select bank4
  4580  0641  0091               	movwf	17	;volatile
  4581  0642                     l271:	
  4582                           ;I2CBase.c: 63:     while(SSP1STATbits.BF);
  4583                           
  4584  0642  1814               	btfsc	20,0	;volatile
  4585  0643  2E45               	goto	u4261
  4586  0644  2E46               	goto	u4260
  4587  0645                     u4261:	
  4588  0645  2E42               	goto	l271
  4589  0646                     u4260:	
  4590  0646                     l3797:	
  4591                           
  4592                           ;I2CBase.c: 64:     waitIdleI2C();
  4593  0646  318D  25C7  3186   	fcall	_waitIdleI2C
  4594                           
  4595                           ;I2CBase.c: 66:     while(n) {
  4596  0649  2E70               	goto	l3815
  4597  064A                     l3799:	
  4598                           
  4599                           ;I2CBase.c: 67:         if(n <= 1) SSP1CON2bits.ACKDT = 1;
  4600  064A  3002               	movlw	2
  4601  064B  0221               	subwf	readI2C@n,w
  4602  064C  1803               	skipnc
  4603  064D  2E4F               	goto	u4271
  4604  064E  2E50               	goto	u4270
  4605  064F                     u4271:	
  4606  064F  2E53               	goto	l276
  4607  0650                     u4270:	
  4608  0650                     l3801:	
  4609  0650  0024               	movlb	4	; select bank4
  4610  0651  1696               	bsf	22,5	;volatile
  4611  0652  2E55               	goto	l277
  4612  0653                     l276:	
  4613                           ;I2CBase.c: 68:         else SSP1CON2bits.ACKDT = 0;
  4614                           
  4615  0653  0024               	movlb	4	; select bank4
  4616  0654  1296               	bcf	22,5	;volatile
  4617  0655                     l277:	
  4618                           
  4619                           ;I2CBase.c: 69:         SSP1CON2bits.RCEN = 1;
  4620  0655  1596               	bsf	22,3	;volatile
  4621  0656                     l278:	
  4622                           ;I2CBase.c: 70:         while(! SSP1STATbits.BF);
  4623                           
  4624  0656  1C14               	btfss	20,0	;volatile
  4625  0657  2E59               	goto	u4281
  4626  0658  2E5A               	goto	u4280
  4627  0659                     u4281:	
  4628  0659  2E56               	goto	l278
  4629  065A                     u4280:	
  4630  065A                     l280:	
  4631                           
  4632                           ;I2CBase.c: 71:         SSP1CON2bits.ACKEN = 1;
  4633  065A  1616               	bsf	22,4	;volatile
  4634  065B                     l3803:	
  4635                           
  4636                           ;I2CBase.c: 72:         *buf++ = SSP1BUF;
  4637  065B  0811               	movf	17,w	;volatile
  4638  065C  0020               	movlb	0	; select bank0
  4639  065D  00A2               	movwf	??_readI2C
  4640  065E  0820               	movf	readI2C@buf,w
  4641  065F  0086               	movwf	6
  4642  0660  0187               	clrf	7
  4643  0661  0822               	movf	??_readI2C,w
  4644  0662  0081               	movwf	1
  4645  0663                     l3805:	
  4646  0663  3001               	movlw	1
  4647  0664  00A2               	movwf	??_readI2C
  4648  0665  0822               	movf	??_readI2C,w
  4649  0666  07A0               	addwf	readI2C@buf,f
  4650  0667                     l3807:	
  4651                           
  4652                           ;I2CBase.c: 73:         num++;
  4653  0667  3001               	movlw	1
  4654  0668  00A2               	movwf	??_readI2C
  4655  0669  0822               	movf	??_readI2C,w
  4656  066A  07A3               	addwf	readI2C@num,f
  4657  066B                     l3809:	
  4658                           
  4659                           ;I2CBase.c: 74:         n--;
  4660  066B  3001               	movlw	1
  4661  066C  02A1               	subwf	readI2C@n,f
  4662  066D                     l3811:	
  4663                           
  4664                           ;I2CBase.c: 75:         SSP1CON1bits.SSPOV = 0;
  4665  066D  0024               	movlb	4	; select bank4
  4666  066E  1315               	bcf	21,6	;volatile
  4667  066F  2E46               	goto	l3797
  4668  0670                     l3815:	
  4669                           
  4670                           ;I2CBase.c: 66:     while(n) {
  4671  0670  0020               	movlb	0	; select bank0
  4672  0671  0821               	movf	readI2C@n,w
  4673  0672  1D03               	btfss	3,2
  4674  0673  2E75               	goto	u4291
  4675  0674  2E76               	goto	u4290
  4676  0675                     u4291:	
  4677  0675  2E4A               	goto	l3799
  4678  0676                     u4290:	
  4679  0676                     l281:	
  4680                           
  4681                           ;I2CBase.c: 78:     SSP1CON2bits.PEN = 1;
  4682  0676  0024               	movlb	4	; select bank4
  4683  0677  1516               	bsf	22,2	;volatile
  4684  0678                     l282:	
  4685                           ;I2CBase.c: 79:     while(SSP1CON2bits.PEN);
  4686                           
  4687  0678  1916               	btfsc	22,2	;volatile
  4688  0679  2E7B               	goto	u4301
  4689  067A  2E7C               	goto	u4300
  4690  067B                     u4301:	
  4691  067B  2E78               	goto	l282
  4692  067C                     u4300:	
  4693  067C                     l285:	
  4694  067C  0008               	return
  4695  067D                     __end_of_readI2C:	
  4696                           
  4697                           	psect	text14
  4698  0DC7                     __ptext14:	
  4699 ;; *************** function _waitIdleI2C *****************
  4700 ;; Defined at:
  4701 ;;		line 83 in file "I2CBase.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		None
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;Total ram usage:        0 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    3
  4722 ;; This function calls:
  4723 ;;		Nothing
  4724 ;; This function is called by:
  4725 ;;		_sendI2C
  4726 ;;		_sendI2Cbyte
  4727 ;;		_readI2C
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           
  4732                           ;psect for function _waitIdleI2C
  4733  0DC7                     _waitIdleI2C:	
  4734  0DC7                     l3689:	
  4735                           ;incstack = 0
  4736                           ; Regs used in _waitIdleI2C: []
  4737                           
  4738  0DC7                     l288:	
  4739                           ;I2CBase.c: 85:             SSP1CON2bits.RCEN || SSP1CON2bits.SEN || SSP1CON2bits.PEN);
  4740                           
  4741                           
  4742                           ;I2CBase.c: 84:     while(SSP1STATbits.R_nW || SSP1CON2bits.ACKEN ||
  4743  0DC7  0024               	movlb	4	; select bank4
  4744  0DC8  1914               	btfsc	20,2	;volatile
  4745  0DC9  2DCB               	goto	u3961
  4746  0DCA  2DCC               	goto	u3960
  4747  0DCB                     u3961:	
  4748  0DCB  2DC7               	goto	l288
  4749  0DCC                     u3960:	
  4750  0DCC                     l3691:	
  4751  0DCC  1A16               	btfsc	22,4	;volatile
  4752  0DCD  2DCF               	goto	u3971
  4753  0DCE  2DD0               	goto	u3970
  4754  0DCF                     u3971:	
  4755  0DCF  2DC7               	goto	l288
  4756  0DD0                     u3970:	
  4757  0DD0                     l3693:	
  4758  0DD0  1996               	btfsc	22,3	;volatile
  4759  0DD1  2DD3               	goto	u3981
  4760  0DD2  2DD4               	goto	u3980
  4761  0DD3                     u3981:	
  4762  0DD3  2DC7               	goto	l288
  4763  0DD4                     u3980:	
  4764  0DD4                     l3695:	
  4765  0DD4  1816               	btfsc	22,0	;volatile
  4766  0DD5  2DD7               	goto	u3991
  4767  0DD6  2DD8               	goto	u3990
  4768  0DD7                     u3991:	
  4769  0DD7  2DC7               	goto	l288
  4770  0DD8                     u3990:	
  4771  0DD8                     l3697:	
  4772  0DD8  1916               	btfsc	22,2	;volatile
  4773  0DD9  2DDB               	goto	u4001
  4774  0DDA  2DDC               	goto	u4000
  4775  0DDB                     u4001:	
  4776  0DDB  2DC7               	goto	l288
  4777  0DDC                     u4000:	
  4778  0DDC                     l291:	
  4779  0DDC  0008               	return
  4780  0DDD                     __end_of_waitIdleI2C:	
  4781                           
  4782                           	psect	text15
  4783  0785                     __ptext15:	
  4784 ;; *************** function _SendHex *****************
  4785 ;; Defined at:
  4786 ;;		line 269 in file "SerialBase.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  b               1    wreg     unsigned char 
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;  b               1    6[BANK0 ] unsigned char 
  4791 ;;  c               1    7[BANK0 ] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  1    wreg      void 
  4794 ;; Registers used:
  4795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;Total ram usage:        4 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    5
  4808 ;; This function calls:
  4809 ;;		_Send
  4810 ;; This function is called by:
  4811 ;;		_prefGet
  4812 ;;		_prefX
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _SendHex
  4818  0785                     _SendHex:	
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _SendHex: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4822                           ;SendHex@b stored from wreg
  4823  0785  0020               	movlb	0	; select bank0
  4824  0786  00A6               	movwf	SendHex@b
  4825  0787                     l3739:	
  4826                           
  4827                           ;SerialBase.c: 270:     unsigned char c = b >> 4;
  4828  0787  0826               	movf	SendHex@b,w
  4829  0788  00A4               	movwf	??_SendHex
  4830  0789  3004               	movlw	4
  4831  078A                     u4105:	
  4832  078A  36A4               	lsrf	??_SendHex,f
  4833  078B  0B89               	decfsz	9,f
  4834  078C  2F8A               	goto	u4105
  4835  078D  0824               	movf	??_SendHex,w
  4836  078E  00A5               	movwf	??_SendHex+1
  4837  078F  0825               	movf	??_SendHex+1,w
  4838  0790  00A7               	movwf	SendHex@c
  4839  0791                     l3741:	
  4840                           
  4841                           ;SerialBase.c: 271:     if(c <= 9) c += '0';
  4842  0791  300A               	movlw	10
  4843  0792  0227               	subwf	SendHex@c,w
  4844  0793  1803               	skipnc
  4845  0794  2F96               	goto	u4111
  4846  0795  2F97               	goto	u4110
  4847  0796                     u4111:	
  4848  0796  2F9C               	goto	l3745
  4849  0797                     u4110:	
  4850  0797                     l3743:	
  4851  0797  3030               	movlw	48
  4852  0798  00A4               	movwf	??_SendHex
  4853  0799  0824               	movf	??_SendHex,w
  4854  079A  07A7               	addwf	SendHex@c,f
  4855  079B  2FA0               	goto	l3747
  4856  079C                     l3745:	
  4857  079C  3037               	movlw	55
  4858  079D  00A4               	movwf	??_SendHex
  4859  079E  0824               	movf	??_SendHex,w
  4860  079F  07A7               	addwf	SendHex@c,f
  4861  07A0                     l3747:	
  4862                           
  4863                           ;SerialBase.c: 273:     Send(c);
  4864  07A0  0827               	movf	SendHex@c,w
  4865  07A1  3186  267D  3187   	fcall	_Send
  4866  07A4                     l3749:	
  4867                           
  4868                           ;SerialBase.c: 274:     c = b & 0x0f;
  4869  07A4  0020               	movlb	0	; select bank0
  4870  07A5  0826               	movf	SendHex@b,w
  4871  07A6  390F               	andlw	15
  4872  07A7  00A4               	movwf	??_SendHex
  4873  07A8  0824               	movf	??_SendHex,w
  4874  07A9  00A7               	movwf	SendHex@c
  4875  07AA                     l3751:	
  4876                           
  4877                           ;SerialBase.c: 275:     if(c <= 9) c += '0';
  4878  07AA  300A               	movlw	10
  4879  07AB  0227               	subwf	SendHex@c,w
  4880  07AC  1803               	skipnc
  4881  07AD  2FAF               	goto	u4121
  4882  07AE  2FB0               	goto	u4120
  4883  07AF                     u4121:	
  4884  07AF  2FB5               	goto	l3755
  4885  07B0                     u4120:	
  4886  07B0                     l3753:	
  4887  07B0  3030               	movlw	48
  4888  07B1  00A4               	movwf	??_SendHex
  4889  07B2  0824               	movf	??_SendHex,w
  4890  07B3  07A7               	addwf	SendHex@c,f
  4891  07B4  2FB9               	goto	l3757
  4892  07B5                     l3755:	
  4893  07B5  3037               	movlw	55
  4894  07B6  00A4               	movwf	??_SendHex
  4895  07B7  0824               	movf	??_SendHex,w
  4896  07B8  07A7               	addwf	SendHex@c,f
  4897  07B9                     l3757:	
  4898                           
  4899                           ;SerialBase.c: 277:     Send(c);
  4900  07B9  0827               	movf	SendHex@c,w
  4901  07BA  3186  267D  3187   	fcall	_Send
  4902  07BD                     l177:	
  4903  07BD  0008               	return
  4904  07BE                     __end_of_SendHex:	
  4905                           
  4906                           	psect	text16
  4907  0745                     __ptext16:	
  4908 ;; *************** function _printInvArgErr *****************
  4909 ;; Defined at:
  4910 ;;		line 313 in file "parseline.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  args            1    wreg     PTR PTR unsigned char 
  4913 ;;		 -> parseCommand@args(10), 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  args            1   13[BANK0 ] PTR PTR unsigned char 
  4916 ;;		 -> parseCommand@args(10), 
  4917 ;;  i               1   12[BANK0 ] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4928 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;Total ram usage:        3 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    7
  4934 ;; This function calls:
  4935 ;;		_Send
  4936 ;;		_SendStr
  4937 ;;		_copyConstStr
  4938 ;;		_sndStr
  4939 ;; This function is called by:
  4940 ;;		_prefEcho
  4941 ;;		_prefSet
  4942 ;;		_prefGet
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           
  4947                           ;psect for function _printInvArgErr
  4948  0745                     _printInvArgErr:	
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _printInvArgErr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4952                           ;printInvArgErr@args stored from wreg
  4953  0745  0020               	movlb	0	; select bank0
  4954  0746  00AD               	movwf	printInvArgErr@args
  4955  0747                     l3901:	
  4956                           
  4957                           ;parseline.c: 314:  Byte i;;parseline.c: 315:  (copyConstStr(ivaMess,SndBuf),SendStr());
  4958  0747  3000               	movlw	low (_ivaMess| (0+32768))
  4959  0748  00A0               	movwf	copyConstStr@src
  4960  0749  3090               	movlw	high (_ivaMess| (0+32768))
  4961  074A  00A1               	movwf	copyConstStr@src+1
  4962  074B  30C0               	movlw	(low (_SndBuf| 0))& (0+255)
  4963  074C  00AB               	movwf	??_printInvArgErr
  4964  074D  082B               	movf	??_printInvArgErr,w
  4965  074E  00A2               	movwf	copyConstStr@dst
  4966  074F  318E  26D4  3187   	fcall	_copyConstStr
  4967  0752                     l3903:	
  4968  0752  318F  271A  3187   	fcall	_SendStr
  4969  0755                     l3905:	
  4970                           
  4971                           ;parseline.c: 317:  for(i=0; args[i] != ((void*)0); i++) {
  4972  0755  0020               	movlb	0	; select bank0
  4973  0756  01AC               	clrf	printInvArgErr@i
  4974  0757  2F71               	goto	l3911
  4975  0758                     l3907:	
  4976                           
  4977                           ;parseline.c: 318:   Send(' ');
  4978  0758  3020               	movlw	32
  4979  0759  3186  267D  3187   	fcall	_Send
  4980                           
  4981                           ;parseline.c: 319:   sndStr(args[i]);
  4982  075C  0020               	movlb	0	; select bank0
  4983  075D  082C               	movf	printInvArgErr@i,w
  4984  075E  072D               	addwf	printInvArgErr@args,w
  4985  075F  00AB               	movwf	??_printInvArgErr
  4986  0760  082B               	movf	??_printInvArgErr,w
  4987  0761  0086               	movwf	6
  4988  0762  0187               	clrf	7
  4989  0763  0801               	movf	1,w
  4990  0764  00A7               	movwf	sndStr@p
  4991  0765  39FF               	andlw	255
  4992  0766  1D03               	skipz
  4993  0767  3001               	movlw	1
  4994  0768  00A8               	movwf	sndStr@p+1
  4995  0769  318F  2740  3187   	fcall	_sndStr
  4996  076C                     l3909:	
  4997                           
  4998                           ;parseline.c: 320:  }
  4999  076C  3001               	movlw	1
  5000  076D  0020               	movlb	0	; select bank0
  5001  076E  00AB               	movwf	??_printInvArgErr
  5002  076F  082B               	movf	??_printInvArgErr,w
  5003  0770  07AC               	addwf	printInvArgErr@i,f
  5004  0771                     l3911:	
  5005  0771  082C               	movf	printInvArgErr@i,w
  5006  0772  072D               	addwf	printInvArgErr@args,w
  5007  0773  00AB               	movwf	??_printInvArgErr
  5008  0774  082B               	movf	??_printInvArgErr,w
  5009  0775  0086               	movwf	6
  5010  0776  0187               	clrf	7
  5011  0777  0801               	movf	1,w
  5012  0778  1D03               	btfss	3,2
  5013  0779  2F7B               	goto	u4481
  5014  077A  2F7C               	goto	u4480
  5015  077B                     u4481:	
  5016  077B  2F58               	goto	l3907
  5017  077C                     u4480:	
  5018  077C                     l3913:	
  5019                           
  5020                           ;parseline.c: 322:  (Send('\r'),Send('\n'));
  5021  077C  300D               	movlw	13
  5022  077D  3186  267D  3187   	fcall	_Send
  5023  0780  300A               	movlw	10
  5024  0781  3186  267D  3187   	fcall	_Send
  5025  0784                     l675:	
  5026  0784  0008               	return
  5027  0785                     __end_of_printInvArgErr:	
  5028                           
  5029                           	psect	text17
  5030  0F40                     __ptext17:	
  5031 ;; *************** function _sndStr *****************
  5032 ;; Defined at:
  5033 ;;		line 262 in file "SerialBase.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  p               2    7[BANK0 ] PTR unsigned char 
  5036 ;;		 -> prefX@x(3), prefEcho@f(4), NULL(0), Buffer(32), 
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  q               1   10[BANK0 ] PTR unsigned char 
  5039 ;;		 -> SndBuf(32), 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5053 ;;Total ram usage:        4 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    6
  5056 ;; This function calls:
  5057 ;;		_SendStr
  5058 ;; This function is called by:
  5059 ;;		_parseCommand
  5060 ;;		_prefEcho
  5061 ;;		_prefX
  5062 ;;		_printInvArgErr
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _sndStr
  5068  0F40                     _sndStr:	
  5069  0F40                     l3677:	
  5070                           ;incstack = 0
  5071                           ; Regs used in _sndStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5072                           
  5073                           
  5074                           ;SerialBase.c: 263:  unsigned char *q = SndBuf;
  5075  0F40  30C0               	movlw	(low (_SndBuf| 0))& (0+255)
  5076  0F41  0020               	movlb	0	; select bank0
  5077  0F42  00A9               	movwf	??_sndStr
  5078  0F43  0829               	movf	??_sndStr,w
  5079  0F44  00AA               	movwf	sndStr@q
  5080                           
  5081                           ;SerialBase.c: 264:  while(*p) *q++ = *p++;
  5082  0F45  2F59               	goto	l167
  5083  0F46                     l3679:	
  5084  0F46  0827               	movf	sndStr@p,w
  5085  0F47  0086               	movwf	6
  5086  0F48  0828               	movf	sndStr@p+1,w
  5087  0F49  0087               	movwf	7
  5088  0F4A  0801               	movf	1,w
  5089  0F4B  00A9               	movwf	??_sndStr
  5090  0F4C  082A               	movf	sndStr@q,w
  5091  0F4D  0086               	movwf	6
  5092  0F4E  0187               	clrf	7
  5093  0F4F  0829               	movf	??_sndStr,w
  5094  0F50  0081               	movwf	1
  5095  0F51                     l3681:	
  5096  0F51  3001               	movlw	1
  5097  0F52  07A7               	addwf	sndStr@p,f
  5098  0F53  3000               	movlw	0
  5099  0F54  3DA8               	addwfc	sndStr@p+1,f
  5100  0F55                     l3683:	
  5101  0F55  3001               	movlw	1
  5102  0F56  00A9               	movwf	??_sndStr
  5103  0F57  0829               	movf	??_sndStr,w
  5104  0F58  07AA               	addwf	sndStr@q,f
  5105  0F59                     l167:	
  5106  0F59  0827               	movf	sndStr@p,w
  5107  0F5A  0086               	movwf	6
  5108  0F5B  0828               	movf	sndStr@p+1,w
  5109  0F5C  0087               	movwf	7
  5110  0F5D  0801               	movf	1,w
  5111  0F5E  1D03               	btfss	3,2
  5112  0F5F  2F61               	goto	u3951
  5113  0F60  2F62               	goto	u3950
  5114  0F61                     u3951:	
  5115  0F61  2F46               	goto	l3679
  5116  0F62                     u3950:	
  5117  0F62                     l3685:	
  5118                           
  5119                           ;SerialBase.c: 265:  *q = '\0';
  5120  0F62  082A               	movf	sndStr@q,w
  5121  0F63  0086               	movwf	6
  5122  0F64  0187               	clrf	7
  5123  0F65  0181               	clrf	1
  5124  0F66                     l3687:	
  5125                           
  5126                           ;SerialBase.c: 266:  SendStr();
  5127  0F66  318F  271A  318F   	fcall	_SendStr
  5128  0F69                     l170:	
  5129  0F69  0008               	return
  5130  0F6A                     __end_of_sndStr:	
  5131                           
  5132                           	psect	text18
  5133  0F1A                     __ptext18:	
  5134 ;; *************** function _SendStr *****************
  5135 ;; Defined at:
  5136 ;;		line 252 in file "SerialBase.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  str             1    6[BANK0 ] PTR unsigned char 
  5141 ;;		 -> SndBuf(32), 
  5142 ;;  i               1    5[BANK0 ] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  1    wreg      void 
  5145 ;; Registers used:
  5146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;Total ram usage:        3 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    5
  5159 ;; This function calls:
  5160 ;;		_Send
  5161 ;; This function is called by:
  5162 ;;		_main
  5163 ;;		_sndStr
  5164 ;;		_parseCommand
  5165 ;;		_prefEcho
  5166 ;;		_printInvArgErr
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           
  5171                           ;psect for function _SendStr
  5172  0F1A                     _SendStr:	
  5173  0F1A                     l3641:	
  5174                           ;incstack = 0
  5175                           ; Regs used in _SendStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5176                           
  5177                           
  5178                           ;SerialBase.c: 253:     unsigned char *str=SndBuf;
  5179  0F1A  30C0               	movlw	(low (_SndBuf| 0))& (0+255)
  5180  0F1B  0020               	movlb	0	; select bank0
  5181  0F1C  00A4               	movwf	??_SendStr
  5182  0F1D  0824               	movf	??_SendStr,w
  5183  0F1E  00A6               	movwf	SendStr@str
  5184                           
  5185                           ;SerialBase.c: 254:     char i = 32;
  5186  0F1F  3020               	movlw	32
  5187  0F20  00A4               	movwf	??_SendStr
  5188  0F21  0824               	movf	??_SendStr,w
  5189  0F22  00A5               	movwf	SendStr@i
  5190                           
  5191                           ;SerialBase.c: 255:     while(i > 0 && *str != '\0') {
  5192  0F23  2F32               	goto	l3649
  5193  0F24                     l3643:	
  5194                           
  5195                           ;SerialBase.c: 256:         Send(*str);
  5196  0F24  0826               	movf	SendStr@str,w
  5197  0F25  0086               	movwf	6
  5198  0F26  0187               	clrf	7
  5199  0F27  0801               	movf	1,w
  5200  0F28  3186  267D  318F   	fcall	_Send
  5201  0F2B                     l3645:	
  5202                           
  5203                           ;SerialBase.c: 257:         str++;
  5204  0F2B  3001               	movlw	1
  5205  0F2C  0020               	movlb	0	; select bank0
  5206  0F2D  00A4               	movwf	??_SendStr
  5207  0F2E  0824               	movf	??_SendStr,w
  5208  0F2F  07A6               	addwf	SendStr@str,f
  5209  0F30                     l3647:	
  5210                           
  5211                           ;SerialBase.c: 258:         i--;
  5212  0F30  3001               	movlw	1
  5213  0F31  02A5               	subwf	SendStr@i,f
  5214  0F32                     l3649:	
  5215                           
  5216                           ;SerialBase.c: 255:     while(i > 0 && *str != '\0') {
  5217  0F32  0825               	movf	SendStr@i,w
  5218  0F33  1903               	btfsc	3,2
  5219  0F34  2F36               	goto	u3901
  5220  0F35  2F37               	goto	u3900
  5221  0F36                     u3901:	
  5222  0F36  2F3F               	goto	l164
  5223  0F37                     u3900:	
  5224  0F37                     l3651:	
  5225  0F37  0826               	movf	SendStr@str,w
  5226  0F38  0086               	movwf	6
  5227  0F39  0187               	clrf	7
  5228  0F3A  0801               	movf	1,w
  5229  0F3B  1D03               	btfss	3,2
  5230  0F3C  2F3E               	goto	u3911
  5231  0F3D  2F3F               	goto	u3910
  5232  0F3E                     u3911:	
  5233  0F3E  2F24               	goto	l3643
  5234  0F3F                     u3910:	
  5235  0F3F                     l164:	
  5236  0F3F  0008               	return
  5237  0F40                     __end_of_SendStr:	
  5238                           
  5239                           	psect	text19
  5240  067D                     __ptext19:	
  5241 ;; *************** function _Send *****************
  5242 ;; Defined at:
  5243 ;;		line 232 in file "SerialBase.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  txchar          1    wreg     unsigned char 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  txchar          1    3[BANK0 ] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;Total ram usage:        2 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    4
  5264 ;; This function calls:
  5265 ;;		_QueIn
  5266 ;;		_QueOut
  5267 ;; This function is called by:
  5268 ;;		_SendStr
  5269 ;;		_SendHex
  5270 ;;		_parseCommand
  5271 ;;		_prefEcho
  5272 ;;		_prefGet
  5273 ;;		_prefX
  5274 ;;		_printInvArgErr
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           
  5279                           ;psect for function _Send
  5280  067D                     _Send:	
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5284                           ;Send@txchar stored from wreg
  5285  067D  0020               	movlb	0	; select bank0
  5286  067E  00A3               	movwf	Send@txchar
  5287  067F                     l3617:	
  5288                           
  5289                           ;SerialBase.c: 233:     if(TxFlag == 0) {
  5290  067F  0872               	movf	_TxFlag,w
  5291  0680  1D03               	btfss	3,2
  5292  0681  2E83               	goto	u3851
  5293  0682  2E84               	goto	u3850
  5294  0683                     u3851:	
  5295  0683  2EA0               	goto	l3631
  5296  0684                     u3850:	
  5297  0684                     l3619:	
  5298                           
  5299                           ;SerialBase.c: 234:         if(TX1STAbits.TRMT) TX1REG = txchar;
  5300  0684  0023               	movlb	3	; select bank3
  5301  0685  1C9E               	btfss	30,1	;volatile
  5302  0686  2E88               	goto	u3861
  5303  0687  2E89               	goto	u3860
  5304  0688                     u3861:	
  5305  0688  2E8E               	goto	l3623
  5306  0689                     u3860:	
  5307  0689                     l3621:	
  5308  0689  0020               	movlb	0	; select bank0
  5309  068A  0823               	movf	Send@txchar,w
  5310  068B  0023               	movlb	3	; select bank3
  5311  068C  009A               	movwf	26	;volatile
  5312  068D  2EC2               	goto	l156
  5313  068E                     l3623:	
  5314                           
  5315                           ;SerialBase.c: 236:             Sending = Tindex = 0;
  5316  068E  01F4               	clrf	_Tindex
  5317  068F  01F3               	clrf	_Sending
  5318  0690                     l3625:	
  5319                           
  5320                           ;SerialBase.c: 237:             SBuff[Tindex++] = txchar;
  5321  0690  0020               	movlb	0	; select bank0
  5322  0691  0823               	movf	Send@txchar,w
  5323  0692  00A2               	movwf	??_Send
  5324  0693  0874               	movf	_Tindex,w
  5325  0694  3EA0               	addlw	(low (_SBuff| 0))& (0+255)
  5326  0695  0086               	movwf	6
  5327  0696  0187               	clrf	7
  5328  0697  0822               	movf	??_Send,w
  5329  0698  0081               	movwf	1
  5330  0699                     l3627:	
  5331  0699  3001               	movlw	1
  5332  069A  00A2               	movwf	??_Send
  5333  069B  0822               	movf	??_Send,w
  5334  069C  07F4               	addwf	_Tindex,f
  5335  069D                     l3629:	
  5336                           
  5337                           ;SerialBase.c: 238:             TxFlag = 1;
  5338  069D  01F2               	clrf	_TxFlag
  5339  069E  0AF2               	incf	_TxFlag,f
  5340  069F  2EC2               	goto	l156
  5341  06A0                     l3631:	
  5342                           
  5343                           ;SerialBase.c: 241:         if(! QueIn(txchar)) {
  5344  06A0  0823               	movf	Send@txchar,w
  5345  06A1  318E  26F7  3186   	fcall	_QueIn
  5346  06A4  3A00               	xorlw	0
  5347  06A5  1D03               	skipz
  5348  06A6  2EA8               	goto	u3871
  5349  06A7  2EA9               	goto	u3870
  5350  06A8                     u3871:	
  5351  06A8  2EB8               	goto	l3637
  5352  06A9                     u3870:	
  5353  06A9                     l152:	
  5354  06A9  0023               	movlb	3	; select bank3
  5355  06AA  1C9E               	btfss	30,1	;volatile
  5356  06AB  2EAD               	goto	u3881
  5357  06AC  2EAE               	goto	u3880
  5358  06AD                     u3881:	
  5359  06AD  2EA9               	goto	l152
  5360  06AE                     u3880:	
  5361  06AE                     l3635:	
  5362                           
  5363                           ;SerialBase.c: 243:             TX1REG = QueOut();
  5364  06AE  318E  260A  3186   	fcall	_QueOut
  5365  06B1  0023               	movlb	3	; select bank3
  5366  06B2  009A               	movwf	26	;volatile
  5367                           
  5368                           ;SerialBase.c: 244:             QueIn(txchar);
  5369  06B3  0020               	movlb	0	; select bank0
  5370  06B4  0823               	movf	Send@txchar,w
  5371  06B5  318E  26F7  3186   	fcall	_QueIn
  5372  06B8                     l3637:	
  5373                           
  5374                           ;SerialBase.c: 246:         if(TX1STAbits.TRMT) TX1REG = QueOut();
  5375  06B8  0023               	movlb	3	; select bank3
  5376  06B9  1C9E               	btfss	30,1	;volatile
  5377  06BA  2EBC               	goto	u3891
  5378  06BB  2EBD               	goto	u3890
  5379  06BC                     u3891:	
  5380  06BC  2EC2               	goto	l156
  5381  06BD                     u3890:	
  5382  06BD                     l3639:	
  5383  06BD  318E  260A  3186   	fcall	_QueOut
  5384  06C0  0023               	movlb	3	; select bank3
  5385  06C1  009A               	movwf	26	;volatile
  5386  06C2                     l156:	
  5387  06C2  0008               	return
  5388  06C3                     __end_of_Send:	
  5389                           
  5390                           	psect	text20
  5391  0E0A                     __ptext20:	
  5392 ;; *************** function _QueOut *****************
  5393 ;; Defined at:
  5394 ;;		line 225 in file "SerialBase.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;		None
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  c               1    1[BANK0 ] unsigned char 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      unsigned char 
  5401 ;; Registers used:
  5402 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;Total ram usage:        2 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    3
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_trySend
  5419 ;;		_Send
  5420 ;;		_doSend
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _QueOut
  5426  0E0A                     _QueOut:	
  5427  0E0A                     l3583:	
  5428                           ;incstack = 0
  5429                           ; Regs used in _QueOut: [wreg+fsr1l+fsr1h+status,2+status,0]
  5430                           
  5431                           
  5432                           ;SerialBase.c: 226:     unsigned char c = SBuff[Sending++];
  5433  0E0A  0873               	movf	_Sending,w
  5434  0E0B  3EA0               	addlw	(low (_SBuff| 0))& (0+255)
  5435  0E0C  0086               	movwf	6
  5436  0E0D  0187               	clrf	7
  5437  0E0E  0801               	movf	1,w
  5438  0E0F  0020               	movlb	0	; select bank0
  5439  0E10  00A0               	movwf	??_QueOut
  5440  0E11  0820               	movf	??_QueOut,w
  5441  0E12  00A1               	movwf	QueOut@c
  5442  0E13                     l3585:	
  5443  0E13  3001               	movlw	1
  5444  0E14  00A0               	movwf	??_QueOut
  5445  0E15  0820               	movf	??_QueOut,w
  5446  0E16  07F3               	addwf	_Sending,f
  5447  0E17                     l3587:	
  5448                           
  5449                           ;SerialBase.c: 227:     if(Sending >= 32) Sending = 0;
  5450  0E17  3020               	movlw	32
  5451  0E18  0273               	subwf	_Sending,w
  5452  0E19  1C03               	skipc
  5453  0E1A  2E1C               	goto	u3821
  5454  0E1B  2E1D               	goto	u3820
  5455  0E1C                     u3821:	
  5456  0E1C  2E1E               	goto	l3591
  5457  0E1D                     u3820:	
  5458  0E1D                     l3589:	
  5459  0E1D  01F3               	clrf	_Sending
  5460  0E1E                     l3591:	
  5461                           
  5462                           ;SerialBase.c: 228:     TxFlag --;
  5463  0E1E  3001               	movlw	1
  5464  0E1F  02F2               	subwf	_TxFlag,f
  5465  0E20                     l3593:	
  5466                           
  5467                           ;SerialBase.c: 229:     return c;
  5468  0E20  0821               	movf	QueOut@c,w
  5469  0E21                     l144:	
  5470  0E21  0008               	return
  5471  0E22                     __end_of_QueOut:	
  5472                           
  5473                           	psect	text21
  5474  0EF7                     __ptext21:	
  5475 ;; *************** function _QueIn *****************
  5476 ;; Defined at:
  5477 ;;		line 217 in file "SerialBase.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  c               1    wreg     unsigned char 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  c               1    1[BANK0 ] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:        2 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    3
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_Send
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           
  5506                           ;psect for function _QueIn
  5507  0EF7                     _QueIn:	
  5508                           
  5509                           ;incstack = 0
  5510                           ; Regs used in _QueIn: [wreg+fsr1l+fsr1h+status,2+status,0]
  5511                           ;QueIn@c stored from wreg
  5512  0EF7  0020               	movlb	0	; select bank0
  5513  0EF8  00A1               	movwf	QueIn@c
  5514  0EF9                     l3597:	
  5515                           
  5516                           ;SerialBase.c: 218:     if(TxFlag >= 32) return 0;
  5517  0EF9  3020               	movlw	32
  5518  0EFA  0272               	subwf	_TxFlag,w
  5519  0EFB  1C03               	skipc
  5520  0EFC  2EFE               	goto	u3831
  5521  0EFD  2EFF               	goto	u3830
  5522  0EFE                     u3831:	
  5523  0EFE  2F01               	goto	l3603
  5524  0EFF                     u3830:	
  5525  0EFF                     l3599:	
  5526  0EFF  3000               	movlw	0
  5527  0F00  2F19               	goto	l139
  5528  0F01                     l3603:	
  5529                           
  5530                           ;SerialBase.c: 219:     SBuff[Tindex++] = c;
  5531  0F01  0821               	movf	QueIn@c,w
  5532  0F02  00A0               	movwf	??_QueIn
  5533  0F03  0874               	movf	_Tindex,w
  5534  0F04  3EA0               	addlw	(low (_SBuff| 0))& (0+255)
  5535  0F05  0086               	movwf	6
  5536  0F06  0187               	clrf	7
  5537  0F07  0820               	movf	??_QueIn,w
  5538  0F08  0081               	movwf	1
  5539  0F09                     l3605:	
  5540  0F09  3001               	movlw	1
  5541  0F0A  00A0               	movwf	??_QueIn
  5542  0F0B  0820               	movf	??_QueIn,w
  5543  0F0C  07F4               	addwf	_Tindex,f
  5544  0F0D                     l3607:	
  5545                           
  5546                           ;SerialBase.c: 220:     if(Tindex >= 32) Tindex = 0;
  5547  0F0D  3020               	movlw	32
  5548  0F0E  0274               	subwf	_Tindex,w
  5549  0F0F  1C03               	skipc
  5550  0F10  2F12               	goto	u3841
  5551  0F11  2F13               	goto	u3840
  5552  0F12                     u3841:	
  5553  0F12  2F14               	goto	l3611
  5554  0F13                     u3840:	
  5555  0F13                     l3609:	
  5556  0F13  01F4               	clrf	_Tindex
  5557  0F14                     l3611:	
  5558                           
  5559                           ;SerialBase.c: 221:     TxFlag++;
  5560  0F14  3001               	movlw	1
  5561  0F15  00A0               	movwf	??_QueIn
  5562  0F16  0820               	movf	??_QueIn,w
  5563  0F17  07F2               	addwf	_TxFlag,f
  5564  0F18                     l3613:	
  5565                           
  5566                           ;SerialBase.c: 222:     return 1;
  5567  0F18  3001               	movlw	1
  5568  0F19                     l139:	
  5569  0F19  0008               	return
  5570  0F1A                     __end_of_QueIn:	
  5571                           
  5572                           	psect	text22
  5573  0ED4                     __ptext22:	
  5574 ;; *************** function _copyConstStr *****************
  5575 ;; Defined at:
  5576 ;;		line 280 in file "SerialBase.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  src             2    0[BANK0 ] PTR const unsigned char 
  5579 ;;		 -> ivaMess(19), errMess(18), cmdEcho(5), msghi(6), 
  5580 ;;  dst             1    2[BANK0 ] PTR unsigned char 
  5581 ;;		 -> SndBuf(32), 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;		None
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  1    wreg      void 
  5586 ;; Registers used:
  5587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5593 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;Total ram usage:        4 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    3
  5600 ;; This function calls:
  5601 ;;		Nothing
  5602 ;; This function is called by:
  5603 ;;		_main
  5604 ;;		_parseCommand
  5605 ;;		_prefEcho
  5606 ;;		_printInvArgErr
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           
  5611                           ;psect for function _copyConstStr
  5612  0ED4                     _copyConstStr:	
  5613  0ED4                     l3665:	
  5614                           ;incstack = 0
  5615                           ; Regs used in _copyConstStr: [wreg-fsr1h+status,2+status,0+pclath]
  5616                           
  5617                           
  5618                           ;SerialBase.c: 281:     while(*src) {
  5619  0ED4  2EE8               	goto	l3673
  5620  0ED5                     l3667:	
  5621                           
  5622                           ;SerialBase.c: 282:         *dst++ = *src++;
  5623  0ED5  0820               	movf	copyConstStr@src,w
  5624  0ED6  0084               	movwf	4
  5625  0ED7  0821               	movf	copyConstStr@src+1,w
  5626  0ED8  0085               	movwf	5
  5627  0ED9  0800               	movf	0,w	;code access
  5628  0EDA  00A3               	movwf	??_copyConstStr
  5629  0EDB  0822               	movf	copyConstStr@dst,w
  5630  0EDC  0086               	movwf	6
  5631  0EDD  0187               	clrf	7
  5632  0EDE  0823               	movf	??_copyConstStr,w
  5633  0EDF  0081               	movwf	1
  5634  0EE0                     l3669:	
  5635  0EE0  3001               	movlw	1
  5636  0EE1  07A0               	addwf	copyConstStr@src,f
  5637  0EE2  3000               	movlw	0
  5638  0EE3  3DA1               	addwfc	copyConstStr@src+1,f
  5639  0EE4                     l3671:	
  5640  0EE4  3001               	movlw	1
  5641  0EE5  00A3               	movwf	??_copyConstStr
  5642  0EE6  0823               	movf	??_copyConstStr,w
  5643  0EE7  07A2               	addwf	copyConstStr@dst,f
  5644  0EE8                     l3673:	
  5645                           
  5646                           ;SerialBase.c: 281:     while(*src) {
  5647  0EE8  0020               	movlb	0	; select bank0
  5648  0EE9  0820               	movf	copyConstStr@src,w
  5649  0EEA  0084               	movwf	4
  5650  0EEB  0821               	movf	copyConstStr@src+1,w
  5651  0EEC  0085               	movwf	5
  5652  0EED  0012               	moviw fsr0++
  5653  0EEE  1D03               	btfss	3,2
  5654  0EEF  2EF1               	goto	u3941
  5655  0EF0  2EF2               	goto	u3940
  5656  0EF1                     u3941:	
  5657  0EF1  2ED5               	goto	l3667
  5658  0EF2                     u3940:	
  5659  0EF2                     l3675:	
  5660                           
  5661                           ;SerialBase.c: 284:     *dst = '\0';
  5662  0EF2  0822               	movf	copyConstStr@dst,w
  5663  0EF3  0086               	movwf	6
  5664  0EF4  0187               	clrf	7
  5665  0EF5  0181               	clrf	1
  5666  0EF6                     l183:	
  5667  0EF6  0008               	return
  5668  0EF7                     __end_of_copyConstStr:	
  5669                           
  5670                           	psect	text23
  5671  055E                     __ptext23:	
  5672 ;; *************** function _nextItem *****************
  5673 ;; Defined at:
  5674 ;;		line 63 in file "parseline.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;		None
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  p               1   13[BANK0 ] PTR unsigned char 
  5679 ;;		 -> NULL(0), Buffer(32), 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  1    wreg      PTR unsigned char 
  5682 ;; Registers used:
  5683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;Total ram usage:        9 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    6
  5696 ;; This function calls:
  5697 ;;		_endofLine
  5698 ;;		_isspace
  5699 ;; This function is called by:
  5700 ;;		_parseCommand
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           
  5705                           ;psect for function _nextItem
  5706  055E                     _nextItem:	
  5707  055E                     l3919:	
  5708                           ;incstack = 0
  5709                           ; Regs used in _nextItem: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5710                           
  5711                           
  5712                           ;parseline.c: 64:  Byte *p;;parseline.c: 65:  if(convErr) return ((void*)0);
  5713  055E  0020               	movlb	0	; select bank0
  5714  055F  0867               	movf	_convErr,w
  5715  0560  1903               	btfsc	3,2
  5716  0561  2D63               	goto	u4491
  5717  0562  2D64               	goto	u4490
  5718  0563                     u4491:	
  5719  0563  2D66               	goto	l3925
  5720  0564                     u4490:	
  5721  0564                     l3921:	
  5722  0564  3000               	movlw	0
  5723  0565  2DE9               	goto	l488
  5724  0566                     l3925:	
  5725                           
  5726                           ;parseline.c: 66:  if(endofLine((Byte)1) ) return ((void*)0);
  5727  0566  3001               	movlw	1
  5728  0567  318E  2672  3185   	fcall	_endofLine
  5729  056A  3A00               	xorlw	0
  5730  056B  1903               	skipnz
  5731  056C  2D6E               	goto	u4501
  5732  056D  2D6F               	goto	u4500
  5733  056E                     u4501:	
  5734  056E  2D70               	goto	l3931
  5735  056F                     u4500:	
  5736  056F  2D64               	goto	l3921
  5737  0570                     l3931:	
  5738                           
  5739                           ;parseline.c: 67:  p = lineBuff;
  5740  0570  0020               	movlb	0	; select bank0
  5741  0571  086A               	movf	_lineBuff,w
  5742  0572  00AB               	movwf	??_nextItem
  5743  0573  082B               	movf	??_nextItem,w
  5744  0574  00AD               	movwf	nextItem@p
  5745                           
  5746                           ;parseline.c: 68:  while(*lineBuff && !(0 ? isspace(*lineBuff) : ((*lineBuff == ' ') || 
      +                          ((unsigned)(*lineBuff)-'\t' < 5)))) lineBuff++;
  5747  0575  2D7A               	goto	l3935
  5748  0576                     l3933:	
  5749  0576  3001               	movlw	1
  5750  0577  00AB               	movwf	??_nextItem
  5751  0578  082B               	movf	??_nextItem,w
  5752  0579  07EA               	addwf	_lineBuff,f
  5753  057A                     l3935:	
  5754  057A  086A               	movf	_lineBuff,w
  5755  057B  0086               	movwf	6
  5756  057C  3001               	movlw	1	; select bank2/3
  5757  057D  0087               	movwf	7
  5758  057E  0801               	movf	1,w
  5759  057F  1903               	btfsc	3,2
  5760  0580  2D82               	goto	u4511
  5761  0581  2D83               	goto	u4510
  5762  0582                     u4511:	
  5763  0582  2DB1               	goto	l500
  5764  0583                     u4510:	
  5765  0583                     l3937:	
  5766  0583  01B2               	clrf	_nextItem$575
  5767  0584  0AB2               	incf	_nextItem$575,f
  5768  0585                     l3939:	
  5769  0585  086A               	movf	_lineBuff,w
  5770  0586  0086               	movwf	6
  5771  0587  3001               	movlw	1	; select bank2/3
  5772  0588  0087               	movwf	7
  5773  0589  3020               	movlw	32
  5774  058A  0601               	xorwf	1,w
  5775  058B  1903               	btfsc	3,2
  5776  058C  2D8E               	goto	u4521
  5777  058D  2D8F               	goto	u4520
  5778  058E                     u4521:	
  5779  058E  2DA4               	goto	l3945
  5780  058F                     u4520:	
  5781  058F                     l3941:	
  5782  058F  086A               	movf	_lineBuff,w
  5783  0590  0086               	movwf	6
  5784  0591  3001               	movlw	1	; select bank2/3
  5785  0592  0087               	movwf	7
  5786  0593  0801               	movf	1,w
  5787  0594  3EF7               	addlw	247
  5788  0595  00AB               	movwf	??_nextItem
  5789  0596  30FF               	movlw	255
  5790  0597  1803               	skipnc
  5791  0598  3000               	movlw	0
  5792  0599  00AC               	movwf	??_nextItem+1
  5793  059A  3000               	movlw	0
  5794  059B  022C               	subwf	??_nextItem+1,w
  5795  059C  3005               	movlw	5
  5796  059D  1903               	skipnz
  5797  059E  022B               	subwf	??_nextItem,w
  5798  059F  1C03               	skipc
  5799  05A0  2DA2               	goto	u4531
  5800  05A1  2DA3               	goto	u4530
  5801  05A2                     u4531:	
  5802  05A2  2DA4               	goto	l3945
  5803  05A3                     u4530:	
  5804  05A3                     l3943:	
  5805  05A3  01B2               	clrf	_nextItem$575
  5806  05A4                     l3945:	
  5807  05A4  0832               	movf	_nextItem$575,w
  5808  05A5  00AB               	movwf	??_nextItem
  5809  05A6  01AC               	clrf	??_nextItem+1
  5810  05A7  082B               	movf	??_nextItem,w
  5811  05A8  00AE               	movwf	_nextItem$574
  5812  05A9  082C               	movf	??_nextItem+1,w
  5813  05AA  00AF               	movwf	_nextItem$574+1
  5814  05AB                     l3949:	
  5815  05AB  082E               	movf	_nextItem$574,w
  5816  05AC  042F               	iorwf	_nextItem$574+1,w
  5817  05AD  1903               	btfsc	3,2
  5818  05AE  2DB0               	goto	u4541
  5819  05AF  2DB1               	goto	u4540
  5820  05B0                     u4541:	
  5821  05B0  2D76               	goto	l3933
  5822  05B1                     u4540:	
  5823  05B1                     l500:	
  5824                           ;parseline.c: 69:  if((0 ? isspace(*lineBuff) : ((*lineBuff == ' ') || ((unsigned)(*line
      +                          Buff)-'\t' < 5)))) {
  5825                           
  5826  05B1  01B3               	clrf	_nextItem$577
  5827  05B2  0AB3               	incf	_nextItem$577,f
  5828  05B3                     l3951:	
  5829  05B3  086A               	movf	_lineBuff,w
  5830  05B4  0086               	movwf	6
  5831  05B5  3001               	movlw	1	; select bank2/3
  5832  05B6  0087               	movwf	7
  5833  05B7  3020               	movlw	32
  5834  05B8  0601               	xorwf	1,w
  5835  05B9  1903               	btfsc	3,2
  5836  05BA  2DBC               	goto	u4551
  5837  05BB  2DBD               	goto	u4550
  5838  05BC                     u4551:	
  5839  05BC  2DD2               	goto	l3957
  5840  05BD                     u4550:	
  5841  05BD                     l3953:	
  5842  05BD  086A               	movf	_lineBuff,w
  5843  05BE  0086               	movwf	6
  5844  05BF  3001               	movlw	1	; select bank2/3
  5845  05C0  0087               	movwf	7
  5846  05C1  0801               	movf	1,w
  5847  05C2  3EF7               	addlw	247
  5848  05C3  00AB               	movwf	??_nextItem
  5849  05C4  30FF               	movlw	255
  5850  05C5  1803               	skipnc
  5851  05C6  3000               	movlw	0
  5852  05C7  00AC               	movwf	??_nextItem+1
  5853  05C8  3000               	movlw	0
  5854  05C9  022C               	subwf	??_nextItem+1,w
  5855  05CA  3005               	movlw	5
  5856  05CB  1903               	skipnz
  5857  05CC  022B               	subwf	??_nextItem,w
  5858  05CD  1C03               	skipc
  5859  05CE  2DD0               	goto	u4561
  5860  05CF  2DD1               	goto	u4560
  5861  05D0                     u4561:	
  5862  05D0  2DD2               	goto	l3957
  5863  05D1                     u4560:	
  5864  05D1                     l3955:	
  5865  05D1  01B3               	clrf	_nextItem$577
  5866  05D2                     l3957:	
  5867  05D2  0833               	movf	_nextItem$577,w
  5868  05D3  00AB               	movwf	??_nextItem
  5869  05D4  01AC               	clrf	??_nextItem+1
  5870  05D5  082B               	movf	??_nextItem,w
  5871  05D6  00B0               	movwf	_nextItem$576
  5872  05D7  082C               	movf	??_nextItem+1,w
  5873  05D8  00B1               	movwf	_nextItem$576+1
  5874  05D9                     l3961:	
  5875  05D9  0830               	movf	_nextItem$576,w
  5876  05DA  0431               	iorwf	_nextItem$576+1,w
  5877  05DB  1903               	btfsc	3,2
  5878  05DC  2DDE               	goto	u4571
  5879  05DD  2DDF               	goto	u4570
  5880  05DE                     u4571:	
  5881  05DE  2DE8               	goto	l3967
  5882  05DF                     u4570:	
  5883  05DF                     l3963:	
  5884                           
  5885                           ;parseline.c: 70:   *lineBuff = '\0';
  5886  05DF  086A               	movf	_lineBuff,w
  5887  05E0  0086               	movwf	6
  5888  05E1  3001               	movlw	1	; select bank2/3
  5889  05E2  0087               	movwf	7
  5890  05E3  0181               	clrf	1
  5891  05E4                     l3965:	
  5892                           
  5893                           ;parseline.c: 71:   lineBuff++;
  5894  05E4  3001               	movlw	1
  5895  05E5  00AB               	movwf	??_nextItem
  5896  05E6  082B               	movf	??_nextItem,w
  5897  05E7  07EA               	addwf	_lineBuff,f
  5898  05E8                     l3967:	
  5899                           
  5900                           ;parseline.c: 73:  return p;
  5901  05E8  082D               	movf	nextItem@p,w
  5902  05E9                     l488:	
  5903  05E9  0008               	return
  5904  05EA                     __end_of_nextItem:	
  5905                           
  5906                           	psect	text24
  5907  0E72                     __ptext24:	
  5908 ;; *************** function _endofLine *****************
  5909 ;; Defined at:
  5910 ;;		line 57 in file "parseline.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  flag            1    wreg     unsigned char 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  flag            1   10[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      unsigned char 
  5917 ;; Registers used:
  5918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5928 ;;Total ram usage:        1 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    5
  5931 ;; This function calls:
  5932 ;;		_skipblankLine
  5933 ;; This function is called by:
  5934 ;;		_nextItem
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function _endofLine
  5940  0E72                     _endofLine:	
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in _endofLine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5944                           ;endofLine@flag stored from wreg
  5945  0E72  0020               	movlb	0	; select bank0
  5946  0E73  00AA               	movwf	endofLine@flag
  5947  0E74                     l3823:	
  5948                           
  5949                           ;parseline.c: 58:  if(convErr) return convErr;
  5950  0E74  0867               	movf	_convErr,w
  5951  0E75  1903               	btfsc	3,2
  5952  0E76  2E78               	goto	u4311
  5953  0E77  2E79               	goto	u4310
  5954  0E78                     u4311:	
  5955  0E78  2E7B               	goto	l3829
  5956  0E79                     u4310:	
  5957  0E79                     l3825:	
  5958  0E79  0867               	movf	_convErr,w
  5959  0E7A  2E8F               	goto	l483
  5960  0E7B                     l3829:	
  5961                           
  5962                           ;parseline.c: 59:  if(flag) skipblankLine();
  5963  0E7B  082A               	movf	endofLine@flag,w
  5964  0E7C  1903               	btfsc	3,2
  5965  0E7D  2E7F               	goto	u4321
  5966  0E7E  2E80               	goto	u4320
  5967  0E7F                     u4321:	
  5968  0E7F  2E83               	goto	l3833
  5969  0E80                     u4320:	
  5970  0E80                     l3831:	
  5971  0E80  318F  27CB  318E   	fcall	_skipblankLine
  5972  0E83                     l3833:	
  5973                           
  5974                           ;parseline.c: 60:  return *lineBuff == '\0';
  5975  0E83  0020               	movlb	0	; select bank0
  5976  0E84  086A               	movf	_lineBuff,w
  5977  0E85  0086               	movwf	6
  5978  0E86  3001               	movlw	1	; select bank2/3
  5979  0E87  0087               	movwf	7
  5980  0E88  0801               	movf	1,w
  5981  0E89  1903               	btfsc	3,2
  5982  0E8A  2E8C               	goto	u4331
  5983  0E8B  2E8E               	goto	u4330
  5984  0E8C                     u4331:	
  5985  0E8C  3001               	movlw	1
  5986  0E8D  2E8F               	goto	u4340
  5987  0E8E                     u4330:	
  5988  0E8E  3000               	movlw	0
  5989  0E8F                     u4340:	
  5990  0E8F                     l483:	
  5991  0E8F  0008               	return
  5992  0E90                     __end_of_endofLine:	
  5993                           
  5994                           	psect	text25
  5995  0FCB                     __ptext25:	
  5996 ;; *************** function _skipblankLine *****************
  5997 ;; Defined at:
  5998 ;;		line 52 in file "parseline.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      void 
  6005 ;; Registers used:
  6006 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6015 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6016 ;;Total ram usage:        5 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    4
  6019 ;; This function calls:
  6020 ;;		_isspace
  6021 ;; This function is called by:
  6022 ;;		_endofLine
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function _skipblankLine
  6028  0FCB                     _skipblankLine:	
  6029  0FCB                     l3703:	
  6030                           ;incstack = 0
  6031                           ; Regs used in _skipblankLine: [wreg+fsr1l+fsr1h+status,2+status,0]
  6032                           
  6033                           
  6034                           ;parseline.c: 53:     while((0 ? isspace(*lineBuff) : ((*lineBuff == ' ') || ((unsigned)
      +                          (*lineBuff)-'\t' < 5)))) lineBuff++;
  6035  0FCB  2FD0               	goto	l3707
  6036  0FCC                     l3705:	
  6037  0FCC  3001               	movlw	1
  6038  0FCD  00A5               	movwf	??_skipblankLine
  6039  0FCE  0825               	movf	??_skipblankLine,w
  6040  0FCF  07EA               	addwf	_lineBuff,f
  6041  0FD0                     l3707:	
  6042  0FD0  0020               	movlb	0	; select bank0
  6043  0FD1  01A9               	clrf	_skipblankLine$563
  6044  0FD2  0AA9               	incf	_skipblankLine$563,f
  6045  0FD3                     l3709:	
  6046  0FD3  086A               	movf	_lineBuff,w
  6047  0FD4  0086               	movwf	6
  6048  0FD5  3001               	movlw	1	; select bank2/3
  6049  0FD6  0087               	movwf	7
  6050  0FD7  3020               	movlw	32
  6051  0FD8  0601               	xorwf	1,w
  6052  0FD9  1903               	btfsc	3,2
  6053  0FDA  2FDC               	goto	u4031
  6054  0FDB  2FDD               	goto	u4030
  6055  0FDC                     u4031:	
  6056  0FDC  2FF2               	goto	l3715
  6057  0FDD                     u4030:	
  6058  0FDD                     l3711:	
  6059  0FDD  086A               	movf	_lineBuff,w
  6060  0FDE  0086               	movwf	6
  6061  0FDF  3001               	movlw	1	; select bank2/3
  6062  0FE0  0087               	movwf	7
  6063  0FE1  0801               	movf	1,w
  6064  0FE2  3EF7               	addlw	247
  6065  0FE3  00A5               	movwf	??_skipblankLine
  6066  0FE4  30FF               	movlw	255
  6067  0FE5  1803               	skipnc
  6068  0FE6  3000               	movlw	0
  6069  0FE7  00A6               	movwf	??_skipblankLine+1
  6070  0FE8  3000               	movlw	0
  6071  0FE9  0226               	subwf	??_skipblankLine+1,w
  6072  0FEA  3005               	movlw	5
  6073  0FEB  1903               	skipnz
  6074  0FEC  0225               	subwf	??_skipblankLine,w
  6075  0FED  1C03               	skipc
  6076  0FEE  2FF0               	goto	u4041
  6077  0FEF  2FF1               	goto	u4040
  6078  0FF0                     u4041:	
  6079  0FF0  2FF2               	goto	l3715
  6080  0FF1                     u4040:	
  6081  0FF1                     l3713:	
  6082  0FF1  01A9               	clrf	_skipblankLine$563
  6083  0FF2                     l3715:	
  6084  0FF2  0829               	movf	_skipblankLine$563,w
  6085  0FF3  00A5               	movwf	??_skipblankLine
  6086  0FF4  01A6               	clrf	??_skipblankLine+1
  6087  0FF5  0825               	movf	??_skipblankLine,w
  6088  0FF6  00A7               	movwf	_skipblankLine$562
  6089  0FF7  0826               	movf	??_skipblankLine+1,w
  6090  0FF8  00A8               	movwf	_skipblankLine$562+1
  6091  0FF9                     l3719:	
  6092  0FF9  0827               	movf	_skipblankLine$562,w
  6093  0FFA  0428               	iorwf	_skipblankLine$562+1,w
  6094  0FFB  1D03               	btfss	3,2
  6095  0FFC  2FFE               	goto	u4051
  6096  0FFD  2FFF               	goto	u4050
  6097  0FFE                     u4051:	
  6098  0FFE  2FCC               	goto	l3705
  6099  0FFF                     u4050:	
  6100  0FFF                     l479:	
  6101  0FFF  0008               	return
  6102  1000                     __end_of_skipblankLine:	
  6103                           
  6104                           	psect	text26
  6105  0EB2                     __ptext26:	
  6106 ;; *************** function _isspace *****************
  6107 ;; Defined at:
  6108 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;  c               2    0[BANK0 ] int 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  2    0[BANK0 ] int 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6122 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;Total ram usage:        5 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    3
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_skipblankLine
  6133 ;;		_nextItem
  6134 ;;		_str2Byte
  6135 ;;		_str2Hxs
  6136 ;;		_skip2blank
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           
  6141                           ;psect for function _isspace
  6142  0EB2                     _isspace:	
  6143  0EB2                     l3653:	
  6144                           ;incstack = 0
  6145                           ; Regs used in _isspace: [wreg+status,2+status,0]
  6146                           
  6147  0EB2  0020               	movlb	0	; select bank0
  6148  0EB3  01A4               	clrf	_isspace$962
  6149  0EB4  0AA4               	incf	_isspace$962,f
  6150  0EB5                     l3655:	
  6151  0EB5  3020               	movlw	32
  6152  0EB6  0620               	xorwf	isspace@c,w
  6153  0EB7  0421               	iorwf	isspace@c+1,w
  6154  0EB8  1903               	btfsc	3,2
  6155  0EB9  2EBB               	goto	u3921
  6156  0EBA  2EBC               	goto	u3920
  6157  0EBB                     u3921:	
  6158  0EBB  2ECC               	goto	l3661
  6159  0EBC                     u3920:	
  6160  0EBC                     l3657:	
  6161  0EBC  0820               	movf	isspace@c,w
  6162  0EBD  3EF7               	addlw	247
  6163  0EBE  00A2               	movwf	??_isspace
  6164  0EBF  30FF               	movlw	255
  6165  0EC0  3D21               	addwfc	isspace@c+1,w
  6166  0EC1  00A3               	movwf	??_isspace+1
  6167  0EC2  3000               	movlw	0
  6168  0EC3  0223               	subwf	??_isspace+1,w
  6169  0EC4  3005               	movlw	5
  6170  0EC5  1903               	skipnz
  6171  0EC6  0222               	subwf	??_isspace,w
  6172  0EC7  1C03               	skipc
  6173  0EC8  2ECA               	goto	u3931
  6174  0EC9  2ECB               	goto	u3930
  6175  0ECA                     u3931:	
  6176  0ECA  2ECC               	goto	l3661
  6177  0ECB                     u3930:	
  6178  0ECB                     l3659:	
  6179  0ECB  01A4               	clrf	_isspace$962
  6180  0ECC                     l3661:	
  6181  0ECC  0824               	movf	_isspace$962,w
  6182  0ECD  00A2               	movwf	??_isspace
  6183  0ECE  01A3               	clrf	??_isspace+1
  6184  0ECF  0822               	movf	??_isspace,w
  6185  0ED0  00A0               	movwf	?_isspace
  6186  0ED1  0823               	movf	??_isspace+1,w
  6187  0ED2  00A1               	movwf	?_isspace+1
  6188  0ED3                     l1204:	
  6189  0ED3  0008               	return
  6190  0ED4                     __end_of_isspace:	
  6191                           
  6192                           	psect	text27
  6193  0D8E                     __ptext27:	
  6194 ;; *************** function _newConvLine *****************
  6195 ;; Defined at:
  6196 ;;		line 46 in file "parseline.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  p               1    wreg     PTR unsigned char 
  6199 ;;		 -> Buffer(32), 
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;  p               1    3[BANK0 ] PTR unsigned char 
  6202 ;;		 -> Buffer(32), 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0, pclath, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;Total ram usage:        2 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    4
  6219 ;; This function calls:
  6220 ;;		_setConvMode
  6221 ;; This function is called by:
  6222 ;;		_parseCommand
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           
  6227                           ;psect for function _newConvLine
  6228  0D8E                     _newConvLine:	
  6229                           
  6230                           ;incstack = 0
  6231                           ; Regs used in _newConvLine: [wreg+status,2+status,0+pclath+cstack]
  6232                           ;newConvLine@p stored from wreg
  6233  0D8E  0020               	movlb	0	; select bank0
  6234  0D8F  00A3               	movwf	newConvLine@p
  6235  0D90                     l3915:	
  6236                           
  6237                           ;parseline.c: 47:  lineBuff = p;
  6238  0D90  0823               	movf	newConvLine@p,w
  6239  0D91  00A2               	movwf	??_newConvLine
  6240  0D92  0822               	movf	??_newConvLine,w
  6241  0D93  00EA               	movwf	_lineBuff
  6242  0D94                     l3917:	
  6243                           
  6244                           ;parseline.c: 48:  setConvMode((Byte)0);
  6245  0D94  3000               	movlw	0
  6246  0D95  3187  27F6  318D   	fcall	_setConvMode
  6247  0D98                     l467:	
  6248  0D98  0008               	return
  6249  0D99                     __end_of_newConvLine:	
  6250                           
  6251                           	psect	text28
  6252  07F6                     __ptext28:	
  6253 ;; *************** function _setConvMode *****************
  6254 ;; Defined at:
  6255 ;;		line 40 in file "parseline.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  m               1    wreg     unsigned char 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  m               1    1[BANK0 ] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      void 
  6262 ;; Registers used:
  6263 ;;		wreg, status,2
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;Total ram usage:        2 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    3
  6276 ;; This function calls:
  6277 ;;		Nothing
  6278 ;; This function is called by:
  6279 ;;		_newConvLine
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           
  6284                           ;psect for function _setConvMode
  6285  07F6                     _setConvMode:	
  6286                           
  6287                           ;incstack = 0
  6288                           ; Regs used in _setConvMode: [wreg+status,2]
  6289                           ;setConvMode@m stored from wreg
  6290  07F6  0020               	movlb	0	; select bank0
  6291  07F7  00A1               	movwf	setConvMode@m
  6292  07F8                     l3817:	
  6293                           
  6294                           ;parseline.c: 41:  convData = 0;
  6295  07F8  01E8               	clrf	_convData
  6296  07F9                     l3819:	
  6297                           
  6298                           ;parseline.c: 42:  convMode = m;
  6299  07F9  0821               	movf	setConvMode@m,w
  6300  07FA  00A0               	movwf	??_setConvMode
  6301  07FB  0820               	movf	??_setConvMode,w
  6302  07FC  00E9               	movwf	_convMode
  6303  07FD                     l3821:	
  6304                           
  6305                           ;parseline.c: 43:  convErr = 0;
  6306  07FD  01E7               	clrf	_convErr
  6307  07FE                     l464:	
  6308  07FE  0008               	return
  6309  07FF                     __end_of_setConvMode:	
  6310                           
  6311                           	psect	text29
  6312  05EA                     __ptext29:	
  6313 ;; *************** function _cmdCheck *****************
  6314 ;; Defined at:
  6315 ;;		line 84 in file "parseline.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  b               1    wreg     PTR unsigned char 
  6318 ;;		 -> NULL(0), Buffer(32), 
  6319 ;;  c               2    1[BANK0 ] PTR const unsigned char 
  6320 ;;		 -> cmdX(2), cmdSet(4), cmdGet(4), cmdEcho(5), 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  b               1    5[BANK0 ] PTR unsigned char 
  6323 ;;		 -> NULL(0), Buffer(32), 
  6324 ;;  n               1    4[BANK0 ] unsigned char 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      unsigned char 
  6327 ;; Registers used:
  6328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;Total ram usage:        5 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    4
  6341 ;; This function calls:
  6342 ;;		_myUpper
  6343 ;; This function is called by:
  6344 ;;		_parseCommand
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           
  6349                           ;psect for function _cmdCheck
  6350  05EA                     _cmdCheck:	
  6351                           
  6352                           ;incstack = 0
  6353                           ; Regs used in _cmdCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6354                           ;cmdCheck@b stored from wreg
  6355  05EA  0020               	movlb	0	; select bank0
  6356  05EB  00A5               	movwf	cmdCheck@b
  6357  05EC                     l3971:	
  6358                           
  6359                           ;parseline.c: 85:     Byte n = 0;
  6360  05EC  01A4               	clrf	cmdCheck@n
  6361                           
  6362                           ;parseline.c: 86:     while(*b && (*b == *c || myUpper(*b) == *c)) {
  6363  05ED  2DFA               	goto	l3977
  6364  05EE                     l3973:	
  6365                           
  6366                           ;parseline.c: 87:         b++; c++; n++;
  6367  05EE  3001               	movlw	1
  6368  05EF  00A3               	movwf	??_cmdCheck
  6369  05F0  0823               	movf	??_cmdCheck,w
  6370  05F1  07A5               	addwf	cmdCheck@b,f
  6371  05F2  3001               	movlw	1
  6372  05F3  07A1               	addwf	cmdCheck@c,f
  6373  05F4  3000               	movlw	0
  6374  05F5  3DA2               	addwfc	cmdCheck@c+1,f
  6375  05F6                     l3975:	
  6376  05F6  3001               	movlw	1
  6377  05F7  00A3               	movwf	??_cmdCheck
  6378  05F8  0823               	movf	??_cmdCheck,w
  6379  05F9  07A4               	addwf	cmdCheck@n,f
  6380  05FA                     l3977:	
  6381                           
  6382                           ;parseline.c: 86:     while(*b && (*b == *c || myUpper(*b) == *c)) {
  6383  05FA  0825               	movf	cmdCheck@b,w
  6384  05FB  0086               	movwf	6
  6385  05FC  3001               	movlw	1	; select bank2/3
  6386  05FD  0087               	movwf	7
  6387  05FE  0801               	movf	1,w
  6388  05FF  1903               	btfsc	3,2
  6389  0600  2E02               	goto	u4581
  6390  0601  2E03               	goto	u4580
  6391  0602                     u4581:	
  6392  0602  2E27               	goto	l3983
  6393  0603                     u4580:	
  6394  0603                     l3979:	
  6395  0603  0821               	movf	cmdCheck@c,w
  6396  0604  0084               	movwf	4
  6397  0605  0822               	movf	cmdCheck@c+1,w
  6398  0606  0085               	movwf	5
  6399  0607  0800               	movf	0,w	;code access
  6400  0608  00A3               	movwf	??_cmdCheck
  6401  0609  0825               	movf	cmdCheck@b,w
  6402  060A  0086               	movwf	6
  6403  060B  3001               	movlw	1	; select bank2/3
  6404  060C  0087               	movwf	7
  6405  060D  0801               	movf	1,w
  6406  060E  0623               	xorwf	??_cmdCheck,w
  6407  060F  1903               	skipnz
  6408  0610  2E12               	goto	u4591
  6409  0611  2E13               	goto	u4590
  6410  0612                     u4591:	
  6411  0612  2DEE               	goto	l3973
  6412  0613                     u4590:	
  6413  0613                     l3981:	
  6414  0613  0821               	movf	cmdCheck@c,w
  6415  0614  0084               	movwf	4
  6416  0615  0822               	movf	cmdCheck@c+1,w
  6417  0616  0085               	movwf	5
  6418  0617  0800               	movf	0,w	;code access
  6419  0618  00A3               	movwf	??_cmdCheck
  6420  0619  0825               	movf	cmdCheck@b,w
  6421  061A  0086               	movwf	6
  6422  061B  3001               	movlw	1	; select bank2/3
  6423  061C  0087               	movwf	7
  6424  061D  0801               	movf	1,w
  6425  061E  318D  25B4  3185   	fcall	_myUpper
  6426  0621  0020               	movlb	0	; select bank0
  6427  0622  0623               	xorwf	??_cmdCheck,w
  6428  0623  1903               	skipnz
  6429  0624  2E26               	goto	u4601
  6430  0625  2E27               	goto	u4600
  6431  0626                     u4601:	
  6432  0626  2DEE               	goto	l3973
  6433  0627                     u4600:	
  6434  0627                     l3983:	
  6435                           
  6436                           ;parseline.c: 89:     if(*b == '\0') return n;
  6437  0627  0825               	movf	cmdCheck@b,w
  6438  0628  0086               	movwf	6
  6439  0629  3001               	movlw	1	; select bank2/3
  6440  062A  0087               	movwf	7
  6441  062B  0801               	movf	1,w
  6442  062C  1D03               	btfss	3,2
  6443  062D  2E2F               	goto	u4611
  6444  062E  2E30               	goto	u4610
  6445  062F                     u4611:	
  6446  062F  2E32               	goto	l3989
  6447  0630                     u4610:	
  6448  0630                     l3985:	
  6449  0630  0824               	movf	cmdCheck@n,w
  6450  0631  2E33               	goto	l520
  6451  0632                     l3989:	
  6452                           
  6453                           ;parseline.c: 90:  return 0;
  6454  0632  3000               	movlw	0
  6455  0633                     l520:	
  6456  0633  0008               	return
  6457  0634                     __end_of_cmdCheck:	
  6458                           
  6459                           	psect	text30
  6460  0DB4                     __ptext30:	
  6461 ;; *************** function _myUpper *****************
  6462 ;; Defined at:
  6463 ;;		line 78 in file "parseline.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  c               1    wreg     unsigned char 
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  c               1    0[BANK0 ] unsigned char 
  6468 ;; Return value:  Size  Location     Type
  6469 ;;                  1    wreg      unsigned char 
  6470 ;; Registers used:
  6471 ;;		wreg, status,2, status,0
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;Total ram usage:        1 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    3
  6484 ;; This function calls:
  6485 ;;		Nothing
  6486 ;; This function is called by:
  6487 ;;		_cmdCheck
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           
  6492                           ;psect for function _myUpper
  6493  0DB4                     _myUpper:	
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _myUpper: [wreg+status,2+status,0]
  6497                           ;myUpper@c stored from wreg
  6498  0DB4  0020               	movlb	0	; select bank0
  6499  0DB5  00A0               	movwf	myUpper@c
  6500  0DB6                     l3837:	
  6501                           
  6502                           ;parseline.c: 79:     if('a' <= c && c <= 'z') return c - 'a' + 'A';
  6503  0DB6  3061               	movlw	97
  6504  0DB7  0220               	subwf	myUpper@c,w
  6505  0DB8  1C03               	skipc
  6506  0DB9  2DBB               	goto	u4351
  6507  0DBA  2DBC               	goto	u4350
  6508  0DBB                     u4351:	
  6509  0DBB  2DC5               	goto	l3845
  6510  0DBC                     u4350:	
  6511  0DBC                     l3839:	
  6512  0DBC  307B               	movlw	123
  6513  0DBD  0220               	subwf	myUpper@c,w
  6514  0DBE  1803               	skipnc
  6515  0DBF  2DC1               	goto	u4361
  6516  0DC0  2DC2               	goto	u4360
  6517  0DC1                     u4361:	
  6518  0DC1  2DC5               	goto	l3845
  6519  0DC2                     u4360:	
  6520  0DC2                     l3841:	
  6521  0DC2  0820               	movf	myUpper@c,w
  6522  0DC3  3EE0               	addlw	224
  6523  0DC4  2DC6               	goto	l511
  6524  0DC5                     l3845:	
  6525                           
  6526                           ;parseline.c: 80:     return c;
  6527  0DC5  0820               	movf	myUpper@c,w
  6528  0DC6                     l511:	
  6529  0DC6  0008               	return
  6530  0DC7                     __end_of_myUpper:	
  6531                           
  6532                           	psect	text31
  6533  0E54                     __ptext31:	
  6534 ;; *************** function _initI2C *****************
  6535 ;; Defined at:
  6536 ;;		line 5 in file "I2CBase.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  flag            1    wreg     unsigned char 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  flag            1    1[BANK0 ] unsigned char 
  6541 ;;  baud            1    3[BANK0 ] unsigned char 
  6542 ;;  stat            1    2[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;Total ram usage:        4 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    3
  6559 ;; This function calls:
  6560 ;;		Nothing
  6561 ;; This function is called by:
  6562 ;;		_main
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _initI2C
  6568  0E54                     _initI2C:	
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _initI2C: [wreg+status,2+status,0]
  6572                           ;initI2C@flag stored from wreg
  6573  0E54  0020               	movlb	0	; select bank0
  6574  0E55  00A1               	movwf	initI2C@flag
  6575  0E56                     l4183:	
  6576                           
  6577                           ;I2CBase.c: 6:     unsigned char stat = 0x00;
  6578  0E56  01A2               	clrf	initI2C@stat
  6579  0E57                     l4185:	
  6580                           
  6581                           ;I2CBase.c: 7:     unsigned char baud = 0x13;
  6582  0E57  3013               	movlw	19
  6583  0E58  00A0               	movwf	??_initI2C
  6584  0E59  0820               	movf	??_initI2C,w
  6585  0E5A  00A3               	movwf	initI2C@baud
  6586  0E5B                     l4187:	
  6587                           
  6588                           ;I2CBase.c: 8:     if(flag) {
  6589  0E5B  0821               	movf	initI2C@flag,w
  6590  0E5C  1903               	btfsc	3,2
  6591  0E5D  2E5F               	goto	u4871
  6592  0E5E  2E60               	goto	u4870
  6593  0E5F                     u4871:	
  6594  0E5F  2E68               	goto	l222
  6595  0E60                     u4870:	
  6596  0E60                     l4189:	
  6597                           
  6598                           ;I2CBase.c: 9:         stat = 0x80;
  6599  0E60  3080               	movlw	128
  6600  0E61  00A0               	movwf	??_initI2C
  6601  0E62  0820               	movf	??_initI2C,w
  6602  0E63  00A2               	movwf	initI2C@stat
  6603                           
  6604                           ;I2CBase.c: 10:         baud = 0x4f;
  6605  0E64  304F               	movlw	79
  6606  0E65  00A0               	movwf	??_initI2C
  6607  0E66  0820               	movf	??_initI2C,w
  6608  0E67  00A3               	movwf	initI2C@baud
  6609  0E68                     l222:	
  6610                           ;I2CBase.c: 11:     }
  6611                           
  6612                           
  6613                           ;I2CBase.c: 12:     SSP1STAT = stat;
  6614  0E68  0822               	movf	initI2C@stat,w
  6615  0E69  0024               	movlb	4	; select bank4
  6616  0E6A  0094               	movwf	20	;volatile
  6617                           
  6618                           ;I2CBase.c: 13:     SSP1CON1 = 0x28;
  6619  0E6B  3028               	movlw	40
  6620  0E6C  0095               	movwf	21	;volatile
  6621                           
  6622                           ;I2CBase.c: 14:     SSP1ADD = baud;
  6623  0E6D  0020               	movlb	0	; select bank0
  6624  0E6E  0823               	movf	initI2C@baud,w
  6625  0E6F  0024               	movlb	4	; select bank4
  6626  0E70  0092               	movwf	18	;volatile
  6627  0E71                     l223:	
  6628  0E71  0008               	return
  6629  0E72                     __end_of_initI2C:	
  6630                           
  6631                           	psect	text32
  6632  0F6A                     __ptext32:	
  6633 ;; *************** function _copyBuffer *****************
  6634 ;; Defined at:
  6635 ;;		line 194 in file "SerialBase.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  q               1    2[BANK0 ] PTR unsigned char 
  6640 ;;		 -> Buffer(32), 
  6641 ;;  p               1    1[BANK0 ] PTR unsigned char 
  6642 ;;		 -> RcvBuf(32), 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;Total ram usage:        3 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    3
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_main
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           
  6667                           ;psect for function _copyBuffer
  6668  0F6A                     _copyBuffer:	
  6669  0F6A                     l4197:	
  6670                           ;incstack = 0
  6671                           ; Regs used in _copyBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  6672                           
  6673                           
  6674                           ;SerialBase.c: 195:     INTCONbits.GIE = 0;
  6675  0F6A  138B               	bcf	11,7	;volatile
  6676  0F6B                     l4199:	
  6677                           
  6678                           ;SerialBase.c: 196:     unsigned char *p = RcvBuf;
  6679  0F6B  3050               	movlw	(low (_RcvBuf| (0+256)))& (0+255)
  6680  0F6C  0020               	movlb	0	; select bank0
  6681  0F6D  00A0               	movwf	??_copyBuffer
  6682  0F6E  0820               	movf	??_copyBuffer,w
  6683  0F6F  00A1               	movwf	copyBuffer@p
  6684                           
  6685                           ;SerialBase.c: 197:     unsigned char *q = Buffer;
  6686  0F70  3030               	movlw	(low (_Buffer| (0+256)))& (0+255)
  6687  0F71  00A0               	movwf	??_copyBuffer
  6688  0F72  0820               	movf	??_copyBuffer,w
  6689  0F73  00A2               	movwf	copyBuffer@q
  6690                           
  6691                           ;SerialBase.c: 198:     while(Index) {
  6692  0F74  2F8B               	goto	l4209
  6693  0F75                     l4201:	
  6694                           
  6695                           ;SerialBase.c: 199:         *q++ = *p++;
  6696  0F75  0821               	movf	copyBuffer@p,w
  6697  0F76  0086               	movwf	6
  6698  0F77  3001               	movlw	1	; select bank2/3
  6699  0F78  0087               	movwf	7
  6700  0F79  0801               	movf	1,w
  6701  0F7A  00A0               	movwf	??_copyBuffer
  6702  0F7B  0822               	movf	copyBuffer@q,w
  6703  0F7C  0086               	movwf	6
  6704  0F7D  3001               	movlw	1	; select bank2/3
  6705  0F7E  0087               	movwf	7
  6706  0F7F  0820               	movf	??_copyBuffer,w
  6707  0F80  0081               	movwf	1
  6708  0F81                     l4203:	
  6709  0F81  3001               	movlw	1
  6710  0F82  00A0               	movwf	??_copyBuffer
  6711  0F83  0820               	movf	??_copyBuffer,w
  6712  0F84  07A1               	addwf	copyBuffer@p,f
  6713  0F85                     l4205:	
  6714  0F85  3001               	movlw	1
  6715  0F86  00A0               	movwf	??_copyBuffer
  6716  0F87  0820               	movf	??_copyBuffer,w
  6717  0F88  07A2               	addwf	copyBuffer@q,f
  6718  0F89                     l4207:	
  6719                           
  6720                           ;SerialBase.c: 200:         Index --;
  6721  0F89  3001               	movlw	1
  6722  0F8A  02F5               	subwf	_Index,f
  6723  0F8B                     l4209:	
  6724                           
  6725                           ;SerialBase.c: 198:     while(Index) {
  6726  0F8B  0875               	movf	_Index,w
  6727  0F8C  1D03               	btfss	3,2
  6728  0F8D  2F8F               	goto	u4901
  6729  0F8E  2F90               	goto	u4900
  6730  0F8F                     u4901:	
  6731  0F8F  2F75               	goto	l4201
  6732  0F90                     u4900:	
  6733  0F90                     l4211:	
  6734                           
  6735                           ;SerialBase.c: 202:     *q = '\0';
  6736  0F90  0822               	movf	copyBuffer@q,w
  6737  0F91  0086               	movwf	6
  6738  0F92  3001               	movlw	1	; select bank2/3
  6739  0F93  0087               	movwf	7
  6740  0F94  0181               	clrf	1
  6741  0F95                     l4213:	
  6742                           
  6743                           ;SerialBase.c: 203:     INTCONbits.GIE = 1;
  6744  0F95  178B               	bsf	11,7	;volatile
  6745  0F96                     l124:	
  6746  0F96  0008               	return
  6747  0F97                     __end_of_copyBuffer:	
  6748                           
  6749                           	psect	intentry
  6750  0004                     __pintentry:	
  6751 ;; *************** function _isr *****************
  6752 ;; Defined at:
  6753 ;;		line 83 in file "SerialBase.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  data            1    5[COMMON] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      void 
  6760 ;; Registers used:
  6761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        2 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    2
  6774 ;; This function calls:
  6775 ;;		i1_Send
  6776 ;; This function is called by:
  6777 ;;		Interrupt level 1
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781  0004                     _isr:	
  6782                           
  6783                           ;incstack = 0
  6784  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  6785                           
  6786                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6787  0005  3180               	pagesel	$
  6788  0006                     i1l3181:	
  6789                           
  6790                           ;SerialBase.c: 84:     unsigned char data;;SerialBase.c: 86:     if(PIR1bits.RCIF) {
  6791  0006  0020               	movlb	0	; select bank0
  6792  0007  1E91               	btfss	17,5	;volatile
  6793  0008  280A               	goto	u316_21
  6794  0009  280B               	goto	u316_20
  6795  000A                     u316_21:	
  6796  000A  286E               	goto	i1l108
  6797  000B                     u316_20:	
  6798  000B                     i1l3183:	
  6799                           
  6800                           ;SerialBase.c: 87:         PIR1bits.RCIF = 0;
  6801  000B  1291               	bcf	17,5	;volatile
  6802                           
  6803                           ;SerialBase.c: 88:         if((RC1STAbits.OERR) || (RC1STAbits.FERR)){
  6804  000C  0023               	movlb	3	; select bank3
  6805  000D  189D               	btfsc	29,1	;volatile
  6806  000E  2810               	goto	u317_21
  6807  000F  2811               	goto	u317_20
  6808  0010                     u317_21:	
  6809  0010  2815               	goto	i1l3187
  6810  0011                     u317_20:	
  6811  0011                     i1l3185:	
  6812  0011  1D1D               	btfss	29,2	;volatile
  6813  0012  2814               	goto	u318_21
  6814  0013  2815               	goto	u318_20
  6815  0014                     u318_21:	
  6816  0014  281A               	goto	i1l3193
  6817  0015                     u318_20:	
  6818  0015                     i1l3187:	
  6819  0015  0819               	movf	25,w	;volatile
  6820  0016                     i1l3189:	
  6821                           
  6822                           ;SerialBase.c: 90:             RC1STA = 0;
  6823  0016  019D               	clrf	29	;volatile
  6824  0017                     i1l3191:	
  6825                           
  6826                           ;SerialBase.c: 91:             RC1STA = 0x90;
  6827  0017  3090               	movlw	144
  6828  0018  009D               	movwf	29	;volatile
  6829                           
  6830                           ;SerialBase.c: 92:         } else {
  6831  0019  286E               	goto	i1l108
  6832  001A                     i1l3193:	
  6833                           
  6834                           ;SerialBase.c: 93:             data = RC1REG;
  6835  001A  0819               	movf	25,w	;volatile
  6836  001B  00FA               	movwf	??_isr
  6837  001C  087A               	movf	??_isr,w
  6838  001D  00FB               	movwf	isr@data
  6839                           
  6840                           ;SerialBase.c: 95:             if(Index < 32) {
  6841  001E  3020               	movlw	32
  6842  001F  0275               	subwf	_Index,w
  6843  0020  1803               	skipnc
  6844  0021  2823               	goto	u319_21
  6845  0022  2824               	goto	u319_20
  6846  0023                     u319_21:	
  6847  0023  2832               	goto	i1l3199
  6848  0024                     u319_20:	
  6849  0024                     i1l3195:	
  6850                           
  6851                           ;SerialBase.c: 96:                 RcvBuf[Index] = data;
  6852  0024  087B               	movf	isr@data,w
  6853  0025  00FA               	movwf	??_isr
  6854  0026  0875               	movf	_Index,w
  6855  0027  3E50               	addlw	(low (_RcvBuf| (0+256)))& (0+255)
  6856  0028  0086               	movwf	6
  6857  0029  3001               	movlw	1	; select bank2/3
  6858  002A  0087               	movwf	7
  6859  002B  087A               	movf	??_isr,w
  6860  002C  0081               	movwf	1
  6861  002D                     i1l3197:	
  6862                           
  6863                           ;SerialBase.c: 97:                 Index++;
  6864  002D  3001               	movlw	1
  6865  002E  00FA               	movwf	??_isr
  6866  002F  087A               	movf	??_isr,w
  6867  0030  07F5               	addwf	_Index,f
  6868                           
  6869                           ;SerialBase.c: 98:             } else {
  6870  0031  2834               	goto	i1l3205
  6871  0032                     i1l3199:	
  6872                           
  6873                           ;SerialBase.c: 99:                 Index = 0;
  6874  0032  01F5               	clrf	_Index
  6875  0033  2824               	goto	i1l3195
  6876  0034                     i1l3205:	
  6877                           
  6878                           ;SerialBase.c: 103:    if(echoFLG) {
  6879  0034  0871               	movf	_echoFLG,w
  6880  0035  1903               	btfsc	3,2
  6881  0036  2838               	goto	u320_21
  6882  0037  2839               	goto	u320_20
  6883  0038                     u320_21:	
  6884  0038  2851               	goto	i1l100
  6885  0039                     u320_20:	
  6886  0039                     i1l3207:	
  6887                           
  6888                           ;SerialBase.c: 104:     Send(data);
  6889  0039  087B               	movf	isr@data,w
  6890  003A  3187  2704  3180   	fcall	i1_Send
  6891  003D                     i1l3209:	
  6892                           
  6893                           ;SerialBase.c: 105:     if(data == '\b' && Index != 0) {
  6894  003D  3008               	movlw	8
  6895  003E  067B               	xorwf	isr@data,w
  6896  003F  1D03               	btfss	3,2
  6897  0040  2842               	goto	u321_21
  6898  0041  2843               	goto	u321_20
  6899  0042                     u321_21:	
  6900  0042  2851               	goto	i1l100
  6901  0043                     u321_20:	
  6902  0043                     i1l3211:	
  6903  0043  0875               	movf	_Index,w
  6904  0044  1903               	btfsc	3,2
  6905  0045  2847               	goto	u322_21
  6906  0046  2848               	goto	u322_20
  6907  0047                     u322_21:	
  6908  0047  2851               	goto	i1l100
  6909  0048                     u322_20:	
  6910  0048                     i1l3213:	
  6911                           
  6912                           ;SerialBase.c: 106:      if(Index == 1) Index = 0;
  6913  0048  0375               	decf	_Index,w
  6914  0049  1D03               	btfss	3,2
  6915  004A  284C               	goto	u323_21
  6916  004B  284D               	goto	u323_20
  6917  004C                     u323_21:	
  6918  004C  284F               	goto	i1l3217
  6919  004D                     u323_20:	
  6920  004D                     i1l3215:	
  6921  004D  01F5               	clrf	_Index
  6922  004E  2851               	goto	i1l100
  6923  004F                     i1l3217:	
  6924  004F  3002               	movlw	2
  6925  0050  02F5               	subwf	_Index,f
  6926  0051                     i1l100:	
  6927                           ;SerialBase.c: 109:    }
  6928                           
  6929                           
  6930                           ;SerialBase.c: 110:             if(data == '\r' || data == '\n' ) {
  6931  0051  300D               	movlw	13
  6932  0052  067B               	xorwf	isr@data,w
  6933  0053  1903               	btfsc	3,2
  6934  0054  2856               	goto	u324_21
  6935  0055  2857               	goto	u324_20
  6936  0056                     u324_21:	
  6937  0056  285D               	goto	i1l106
  6938  0057                     u324_20:	
  6939  0057                     i1l3219:	
  6940  0057  300A               	movlw	10
  6941  0058  067B               	xorwf	isr@data,w
  6942  0059  1D03               	btfss	3,2
  6943  005A  285C               	goto	u325_21
  6944  005B  285D               	goto	u325_20
  6945  005C                     u325_21:	
  6946  005C  286E               	goto	i1l108
  6947  005D                     u325_20:	
  6948  005D                     i1l106:	
  6949                           
  6950                           ;SerialBase.c: 111:     RcvFlag = 1;
  6951  005D  0020               	movlb	0	; select bank0
  6952  005E  01ED               	clrf	_RcvFlag
  6953  005F  0AED               	incf	_RcvFlag,f
  6954  0060                     i1l3221:	
  6955                           
  6956                           ;SerialBase.c: 112:     if(echoFLG) (Send('\r'),Send('\n'));
  6957  0060  0871               	movf	_echoFLG,w
  6958  0061  1903               	btfsc	3,2
  6959  0062  2864               	goto	u326_21
  6960  0063  2865               	goto	u326_20
  6961  0064                     u326_21:	
  6962  0064  286E               	goto	i1l97
  6963  0065                     u326_20:	
  6964  0065                     i1l3223:	
  6965  0065  300D               	movlw	13
  6966  0066  3187  2704  3180   	fcall	i1_Send
  6967  0069  300A               	movlw	10
  6968  006A  3187  2704  3180   	fcall	i1_Send
  6969  006D  286E               	goto	i1l108
  6970  006E                     i1l97:	
  6971                           ;SerialBase.c: 114:         }
  6972                           
  6973  006E                     i1l108:	
  6974  006E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6975  006F  0009               	retfie
  6976  0070                     __end_of_isr:	
  6977                           
  6978                           	psect	text34
  6979  0704                     __ptext34:	
  6980 ;; *************** function i1_Send *****************
  6981 ;; Defined at:
  6982 ;;		line 232 in file "SerialBase.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;  txchar          1    wreg     unsigned char 
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;  txchar          1    3[COMMON] unsigned char 
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      void 
  6989 ;; Registers used:
  6990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;Total ram usage:        2 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    1
  7003 ;; This function calls:
  7004 ;;		i1_QueIn
  7005 ;;		i1_QueOut
  7006 ;; This function is called by:
  7007 ;;		_isr
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           
  7012                           ;psect for function i1_Send
  7013  0704                     i1_Send:	
  7014                           
  7015                           ;incstack = 0
  7016                           ; Regs used in i1_Send: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7017                           ;i1Send@txchar stored from wreg
  7018  0704  00F9               	movwf	i1Send@txchar
  7019  0705                     i1l3157:	
  7020                           
  7021                           ;SerialBase.c: 233:     if(TxFlag == 0) {
  7022  0705  0872               	movf	_TxFlag,w
  7023  0706  1D03               	btfss	3,2
  7024  0707  2F09               	goto	u311_21
  7025  0708  2F0A               	goto	u311_20
  7026  0709                     u311_21:	
  7027  0709  2F23               	goto	i1l3171
  7028  070A                     u311_20:	
  7029  070A                     i1l3159:	
  7030                           
  7031                           ;SerialBase.c: 234:         if(TX1STAbits.TRMT) TX1REG = txchar;
  7032  070A  0023               	movlb	3	; select bank3
  7033  070B  1C9E               	btfss	30,1	;volatile
  7034  070C  2F0E               	goto	u312_21
  7035  070D  2F0F               	goto	u312_20
  7036  070E                     u312_21:	
  7037  070E  2F12               	goto	i1l3163
  7038  070F                     u312_20:	
  7039  070F                     i1l3161:	
  7040  070F  0879               	movf	i1Send@txchar,w
  7041  0710  009A               	movwf	26	;volatile
  7042  0711  2F44               	goto	i1l156
  7043  0712                     i1l3163:	
  7044                           
  7045                           ;SerialBase.c: 236:             Sending = Tindex = 0;
  7046  0712  01F4               	clrf	_Tindex
  7047  0713  01F3               	clrf	_Sending
  7048  0714                     i1l3165:	
  7049                           
  7050                           ;SerialBase.c: 237:             SBuff[Tindex++] = txchar;
  7051  0714  0879               	movf	i1Send@txchar,w
  7052  0715  00F8               	movwf	??i1_Send
  7053  0716  0874               	movf	_Tindex,w
  7054  0717  3EA0               	addlw	(low (_SBuff| 0))& (0+255)
  7055  0718  0086               	movwf	6
  7056  0719  0187               	clrf	7
  7057  071A  0878               	movf	??i1_Send,w
  7058  071B  0081               	movwf	1
  7059  071C                     i1l3167:	
  7060  071C  3001               	movlw	1
  7061  071D  00F8               	movwf	??i1_Send
  7062  071E  0878               	movf	??i1_Send,w
  7063  071F  07F4               	addwf	_Tindex,f
  7064  0720                     i1l3169:	
  7065                           
  7066                           ;SerialBase.c: 238:             TxFlag = 1;
  7067  0720  01F2               	clrf	_TxFlag
  7068  0721  0AF2               	incf	_TxFlag,f
  7069  0722  2F44               	goto	i1l156
  7070  0723                     i1l3171:	
  7071                           
  7072                           ;SerialBase.c: 241:         if(! QueIn(txchar)) {
  7073  0723  0879               	movf	i1Send@txchar,w
  7074  0724  318E  2690  3187   	fcall	i1_QueIn
  7075  0727  3A00               	xorlw	0
  7076  0728  1D03               	skipz
  7077  0729  2F2B               	goto	u313_21
  7078  072A  2F2C               	goto	u313_20
  7079  072B                     u313_21:	
  7080  072B  2F3A               	goto	i1l3177
  7081  072C                     u313_20:	
  7082  072C                     i1l152:	
  7083  072C  0023               	movlb	3	; select bank3
  7084  072D  1C9E               	btfss	30,1	;volatile
  7085  072E  2F30               	goto	u314_21
  7086  072F  2F31               	goto	u314_20
  7087  0730                     u314_21:	
  7088  0730  2F2C               	goto	i1l152
  7089  0731                     u314_20:	
  7090  0731                     i1l3175:	
  7091                           
  7092                           ;SerialBase.c: 243:             TX1REG = QueOut();
  7093  0731  318D  25F3  3187   	fcall	i1_QueOut
  7094  0734  0023               	movlb	3	; select bank3
  7095  0735  009A               	movwf	26	;volatile
  7096                           
  7097                           ;SerialBase.c: 244:             QueIn(txchar);
  7098  0736  0879               	movf	i1Send@txchar,w
  7099  0737  318E  2690  3187   	fcall	i1_QueIn
  7100  073A                     i1l3177:	
  7101                           
  7102                           ;SerialBase.c: 246:         if(TX1STAbits.TRMT) TX1REG = QueOut();
  7103  073A  0023               	movlb	3	; select bank3
  7104  073B  1C9E               	btfss	30,1	;volatile
  7105  073C  2F3E               	goto	u315_21
  7106  073D  2F3F               	goto	u315_20
  7107  073E                     u315_21:	
  7108  073E  2F44               	goto	i1l156
  7109  073F                     u315_20:	
  7110  073F                     i1l3179:	
  7111  073F  318D  25F3  3187   	fcall	i1_QueOut
  7112  0742  0023               	movlb	3	; select bank3
  7113  0743  009A               	movwf	26	;volatile
  7114  0744                     i1l156:	
  7115  0744  0008               	return
  7116  0745                     __end_ofi1_Send:	
  7117                           
  7118                           	psect	text35
  7119  0DF3                     __ptext35:	
  7120 ;; *************** function i1_QueOut *****************
  7121 ;; Defined at:
  7122 ;;		line 225 in file "SerialBase.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  QueOut          1    1[COMMON] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      unsigned char 
  7129 ;; Registers used:
  7130 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;Total ram usage:        2 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; This function calls:
  7143 ;;		Nothing
  7144 ;; This function is called by:
  7145 ;;		i1_Send
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function i1_QueOut
  7151  0DF3                     i1_QueOut:	
  7152  0DF3                     i1l3055:	
  7153                           ;incstack = 0
  7154                           ; Regs used in i1_QueOut: [wreg+fsr1l+fsr1h+status,2+status,0]
  7155                           
  7156                           
  7157                           ;SerialBase.c: 226:     unsigned char c = SBuff[Sending++];
  7158  0DF3  0873               	movf	_Sending,w
  7159  0DF4  3EA0               	addlw	(low (_SBuff| 0))& (0+255)
  7160  0DF5  0086               	movwf	6
  7161  0DF6  0187               	clrf	7
  7162  0DF7  0801               	movf	1,w
  7163  0DF8  00F6               	movwf	??i1_QueOut
  7164  0DF9  0876               	movf	??i1_QueOut,w
  7165  0DFA  00F7               	movwf	i1QueOut@c
  7166  0DFB                     i1l3057:	
  7167  0DFB  3001               	movlw	1
  7168  0DFC  00F6               	movwf	??i1_QueOut
  7169  0DFD  0876               	movf	??i1_QueOut,w
  7170  0DFE  07F3               	addwf	_Sending,f
  7171  0DFF                     i1l3059:	
  7172                           
  7173                           ;SerialBase.c: 227:     if(Sending >= 32) Sending = 0;
  7174  0DFF  3020               	movlw	32
  7175  0E00  0273               	subwf	_Sending,w
  7176  0E01  1C03               	skipc
  7177  0E02  2E04               	goto	u300_21
  7178  0E03  2E05               	goto	u300_20
  7179  0E04                     u300_21:	
  7180  0E04  2E06               	goto	i1l3063
  7181  0E05                     u300_20:	
  7182  0E05                     i1l3061:	
  7183  0E05  01F3               	clrf	_Sending
  7184  0E06                     i1l3063:	
  7185                           
  7186                           ;SerialBase.c: 228:     TxFlag --;
  7187  0E06  3001               	movlw	1
  7188  0E07  02F2               	subwf	_TxFlag,f
  7189  0E08                     i1l3065:	
  7190                           
  7191                           ;SerialBase.c: 229:     return c;
  7192  0E08  0877               	movf	i1QueOut@c,w
  7193  0E09                     i1l144:	
  7194  0E09  0008               	return
  7195  0E0A                     __end_ofi1_QueOut:	
  7196                           
  7197                           	psect	text36
  7198  0E90                     __ptext36:	
  7199 ;; *************** function i1_QueIn *****************
  7200 ;; Defined at:
  7201 ;;		line 217 in file "SerialBase.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;  c               1    wreg     unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  c               1    1[COMMON] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      unsigned char 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;Total ram usage:        2 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; This function calls:
  7222 ;;		Nothing
  7223 ;; This function is called by:
  7224 ;;		i1_Send
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function i1_QueIn
  7230  0E90                     i1_QueIn:	
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in i1_QueIn: [wreg+fsr1l+fsr1h+status,2+status,0]
  7234                           ;i1QueIn@c stored from wreg
  7235  0E90  00F7               	movwf	i1QueIn@c
  7236  0E91                     i1l3035:	
  7237                           
  7238                           ;SerialBase.c: 218:     if(TxFlag >= 32) return 0;
  7239  0E91  3020               	movlw	32
  7240  0E92  0272               	subwf	_TxFlag,w
  7241  0E93  1C03               	skipc
  7242  0E94  2E96               	goto	u298_21
  7243  0E95  2E97               	goto	u298_20
  7244  0E96                     u298_21:	
  7245  0E96  2E99               	goto	i1l3041
  7246  0E97                     u298_20:	
  7247  0E97                     i1l3037:	
  7248  0E97  3000               	movlw	0
  7249  0E98  2EB1               	goto	i1l139
  7250  0E99                     i1l3041:	
  7251                           
  7252                           ;SerialBase.c: 219:     SBuff[Tindex++] = c;
  7253  0E99  0877               	movf	i1QueIn@c,w
  7254  0E9A  00F6               	movwf	??i1_QueIn
  7255  0E9B  0874               	movf	_Tindex,w
  7256  0E9C  3EA0               	addlw	(low (_SBuff| 0))& (0+255)
  7257  0E9D  0086               	movwf	6
  7258  0E9E  0187               	clrf	7
  7259  0E9F  0876               	movf	??i1_QueIn,w
  7260  0EA0  0081               	movwf	1
  7261  0EA1                     i1l3043:	
  7262  0EA1  3001               	movlw	1
  7263  0EA2  00F6               	movwf	??i1_QueIn
  7264  0EA3  0876               	movf	??i1_QueIn,w
  7265  0EA4  07F4               	addwf	_Tindex,f
  7266  0EA5                     i1l3045:	
  7267                           
  7268                           ;SerialBase.c: 220:     if(Tindex >= 32) Tindex = 0;
  7269  0EA5  3020               	movlw	32
  7270  0EA6  0274               	subwf	_Tindex,w
  7271  0EA7  1C03               	skipc
  7272  0EA8  2EAA               	goto	u299_21
  7273  0EA9  2EAB               	goto	u299_20
  7274  0EAA                     u299_21:	
  7275  0EAA  2EAC               	goto	i1l3049
  7276  0EAB                     u299_20:	
  7277  0EAB                     i1l3047:	
  7278  0EAB  01F4               	clrf	_Tindex
  7279  0EAC                     i1l3049:	
  7280                           
  7281                           ;SerialBase.c: 221:     TxFlag++;
  7282  0EAC  3001               	movlw	1
  7283  0EAD  00F6               	movwf	??i1_QueIn
  7284  0EAE  0876               	movf	??i1_QueIn,w
  7285  0EAF  07F2               	addwf	_TxFlag,f
  7286  0EB0                     i1l3051:	
  7287                           
  7288                           ;SerialBase.c: 222:     return 1;
  7289  0EB0  3001               	movlw	1
  7290  0EB1                     i1l139:	
  7291  0EB1  0008               	return
  7292  0EB2                     __end_ofi1_QueIn:	
  7293  007E                     btemp	set	126	;btemp
  7294  007E                     int$flags	set	126
  7295  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    123
    Data        19
    BSS         157
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      78
    BANK1            80      0      72
    BANK2            80      0      80
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    prefX$1166	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    prefSet$1165	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    parseCommand$1160$0	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    parseCommand$1160	PTR FTN(PTR PTR unsigned char ,)void  size(2) Largest target is 1
		 -> prefX(), prefSet(), prefGet(), prefEcho(), 

    prefArray$0	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    printInvArgErr@args	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    prefX@args	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    prefGet@args	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    prefSet@args	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    prefEcho@args	PTR PTR unsigned char  size(1) Largest target is 10
		 -> parseCommand@args(BANK0[10]), 

    stobyte@s	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    parseCommand@q	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    parseCommand@args	PTR unsigned char [10] size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    parseCommand@p	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    cmdCheck@c	PTR const unsigned char  size(2) Largest target is 5
		 -> cmdX(CODE[2]), cmdSet(CODE[4]), cmdGet(CODE[4]), cmdEcho(CODE[5]), 

    cmdCheck@b	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    nextItem@p	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    sp__nextItem	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    newConvLine@p	PTR unsigned char  size(1) Largest target is 32
		 -> Buffer(BANK2[32]), 

    lineBuff	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), Buffer(BANK2[32]), 

    prefArray	PTR FTN(PTR PTR unsigned char ,)void [4] size(2) Largest target is 1
		 -> prefX(), prefSet(), prefGet(), prefEcho(), 

    cmdArray	PTR const unsigned char [4] size(2) Largest target is 5
		 -> cmdX(CODE[2]), cmdSet(CODE[4]), cmdGet(CODE[4]), cmdEcho(CODE[5]), 

    sp__skip2blank	PTR unsigned char  size(1) Largest target is 0

    readI2C@buf	PTR unsigned char  size(1) Largest target is 16
		 -> prefX@buf(BANK0[10]), prefGet@buf(BANK0[16]), 

    sendI2C@buf	PTR unsigned char  size(1) Largest target is 10
		 -> prefX@reg(BANK0[1]), prefGet@reg(BANK0[1]), prefSet@buf(BANK0[10]), 

    copyConstStr@src	PTR const unsigned char  size(2) Largest target is 19
		 -> ivaMess(CODE[19]), errMess(CODE[18]), cmdEcho(CODE[5]), msghi(CODE[6]), 

    copyConstStr@dst	PTR unsigned char  size(1) Largest target is 32
		 -> SndBuf(BANK1[32]), 

    sndStr@p	PTR unsigned char  size(2) Largest target is 32
		 -> prefX@x(BANK0[3]), prefEcho@f(BANK0[4]), NULL(NULL[0]), Buffer(BANK2[32]), 

    sndStr@q	PTR unsigned char  size(1) Largest target is 32
		 -> SndBuf(BANK1[32]), 

    SendStr@str	PTR unsigned char  size(1) Largest target is 32
		 -> SndBuf(BANK1[32]), 

    copyBuffer@q	PTR unsigned char  size(1) Largest target is 32
		 -> Buffer(BANK2[32]), 

    copyBuffer@p	PTR unsigned char  size(1) Largest target is 32
		 -> RcvBuf(BANK2[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_Send
    i1_Send->i1_QueIn
    i1_Send->i1_QueOut

Critical Paths under _main in BANK0

    _main->_parseCommand
    _trySend->_QueOut
    _parseCommand->_prefX
    _prefX->_stobyte
    _prefSet->_stobyte
    _prefGet->_stobyte
    _stobyte->_isdigit
    _stobyte->_isupper
    _SendHex->_Send
    _printInvArgErr->_sndStr
    _sndStr->_SendStr
    _SendStr->_Send
    _Send->_QueIn
    _Send->_QueOut
    _nextItem->_endofLine
    _endofLine->_skipblankLine
    _skipblankLine->_isspace
    _newConvLine->_setConvMode
    _cmdCheck->_myUpper

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   33542
                                             55 BANK0      5     5      0
                            _SendStr
                         _copyBuffer
                       _copyConstStr
                            _initI2C
                       _parseCommand
                            _trySend
 ---------------------------------------------------------------------------------
 (1) _trySend                                              0     0      0      34
                             _QueOut
 ---------------------------------------------------------------------------------
 (1) _parseCommand                                        14    14      0   32049
                                             41 BANK0     14    14      0
                               _Send
                            _SendStr
                           _cmdCheck
                       _copyConstStr
                        _newConvLine
                           _nextItem
                           _prefEcho *
                            _prefGet *
                            _prefSet *
                              _prefX *
                             _sndStr
 ---------------------------------------------------------------------------------
 (2) _prefX                                               25    24      1    7222
                                             16 BANK0     25    24      1
                               _Send
                            _SendHex
                            _isdigit
                            _readI2C
                            _sendI2C
                             _sndStr
                            _stobyte
 ---------------------------------------------------------------------------------
 (2) _prefSet                                             24    23      1    7857
                                             16 BANK0     20    19      1
                            _isdigit
                     _printInvArgErr
                            _sendI2C
                        _sendI2Cbyte
                            _stobyte
 ---------------------------------------------------------------------------------
 (3) _sendI2Cbyte                                          3     1      2     273
                                              0 BANK0      3     1      2
                        _waitIdleI2C
 ---------------------------------------------------------------------------------
 (2) _prefGet                                             24    23      1    7642
                                             16 BANK0     21    20      1
                               _Send
                            _SendHex
                     _printInvArgErr
                            _readI2C
                            _sendI2C
                            _stobyte
 ---------------------------------------------------------------------------------
 (3) _stobyte                                             10    10      0    2549
                                              6 BANK0     10    10      0
                             ___bmul
                            _isdigit
                            _isupper
 ---------------------------------------------------------------------------------
 (4) _isupper                                              6     4      2     281
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     891
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     544
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _sendI2C                                              4     2      2     999
                                              0 BANK0      4     2      2
                        _waitIdleI2C
 ---------------------------------------------------------------------------------
 (3) _readI2C                                              5     3      2     683
                                              0 BANK0      5     3      2
                        _waitIdleI2C
 ---------------------------------------------------------------------------------
 (4) _waitIdleI2C                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SendHex                                              4     4      0     393
                                              4 BANK0      4     4      0
                               _Send
 ---------------------------------------------------------------------------------
 (2) _prefEcho                                             7     6      1    4519
                                             16 BANK0      7     6      1
                               _Send
                            _SendStr
                       _copyConstStr
                     _printInvArgErr
                             _sndStr
 ---------------------------------------------------------------------------------
 (3) _printInvArgErr                                       3     3      0    2188
                                             11 BANK0      3     3      0
                               _Send
                            _SendStr
                       _copyConstStr
                             _sndStr
 ---------------------------------------------------------------------------------
 (2) _sndStr                                               4     2      2     587
                                              7 BANK0      4     2      2
                            _SendStr
 ---------------------------------------------------------------------------------
 (3) _SendStr                                              3     3      0     294
                                              4 BANK0      3     3      0
                               _Send
 ---------------------------------------------------------------------------------
 (4) _Send                                                 2     2      0     189
                                              2 BANK0      2     2      0
                              _QueIn
                             _QueOut
 ---------------------------------------------------------------------------------
 (2) _QueOut                                               2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _QueIn                                                2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _copyConstStr                                         4     1      3     850
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _nextItem                                             9     9      0    1705
                                             11 BANK0      9     9      0
                          _endofLine
                            _isspace
 ---------------------------------------------------------------------------------
 (3) _endofLine                                            1     1      0     814
                                             10 BANK0      1     1      0
                      _skipblankLine
 ---------------------------------------------------------------------------------
 (4) _skipblankLine                                        5     5      0     783
                                              5 BANK0      5     5      0
                            _isspace
 ---------------------------------------------------------------------------------
 (3) _isspace                                              5     3      2     709
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _newConvLine                                          2     2      0      98
                                              2 BANK0      2     2      0
                        _setConvMode
 ---------------------------------------------------------------------------------
 (3) _setConvMode                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _cmdCheck                                             5     3      2     479
                                              1 BANK0      5     3      2
                            _myUpper
 ---------------------------------------------------------------------------------
 (3) _myUpper                                              1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initI2C                                              4     4      0     105
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _copyBuffer                                           3     3      0     105
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  2     2      0     267
                                              4 COMMON     2     2      0
                             i1_Send
 ---------------------------------------------------------------------------------
 (9) i1_Send                                               2     2      0     133
                                              2 COMMON     2     2      0
                            i1_QueIn
                           i1_QueOut
 ---------------------------------------------------------------------------------
 (10) i1_QueOut                                            2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_QueIn                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SendStr
     _Send
       _QueIn
       _QueOut
   _copyBuffer
   _copyConstStr
   _initI2C
   _parseCommand
     _Send
       _QueIn
       _QueOut
     _SendStr
       _Send
         _QueIn
         _QueOut
     _cmdCheck
       _myUpper
     _copyConstStr
     _newConvLine
       _setConvMode
     _nextItem
       _endofLine
         _skipblankLine
           _isspace
       _isspace
     _prefEcho *
       _Send
         _QueIn
         _QueOut
       _SendStr
         _Send
           _QueIn
           _QueOut
       _copyConstStr
       _printInvArgErr
         _Send
           _QueIn
           _QueOut
         _SendStr
           _Send
             _QueIn
             _QueOut
         _copyConstStr
         _sndStr
           _SendStr
             _Send
               _QueIn
               _QueOut
       _sndStr
         _SendStr
           _Send
             _QueIn
             _QueOut
     _prefGet *
       _Send
         _QueIn
         _QueOut
       _SendHex
         _Send
           _QueIn
           _QueOut
       _printInvArgErr
         _Send
           _QueIn
           _QueOut
         _SendStr
           _Send
             _QueIn
             _QueOut
         _copyConstStr
         _sndStr
           _SendStr
             _Send
               _QueIn
               _QueOut
       _readI2C
         _waitIdleI2C
       _sendI2C
         _waitIdleI2C
       _stobyte
         ___bmul
         _isdigit
         _isupper
     _prefSet *
       _isdigit
       _printInvArgErr
         _Send
           _QueIn
           _QueOut
         _SendStr
           _Send
             _QueIn
             _QueOut
         _copyConstStr
         _sndStr
           _SendStr
             _Send
               _QueIn
               _QueOut
       _sendI2C
         _waitIdleI2C
       _sendI2Cbyte
         _waitIdleI2C
       _stobyte
         ___bmul
         _isdigit
         _isupper
     _prefX *
       _Send
         _QueIn
         _QueOut
       _SendHex
         _Send
           _QueIn
           _QueOut
       _isdigit
       _readI2C
         _waitIdleI2C
       _sendI2C
         _waitIdleI2C
       _sndStr
         _SendStr
           _Send
             _QueIn
             _QueOut
       _stobyte
         ___bmul
         _isdigit
         _isupper
     _sndStr *
       _SendStr
         _Send
           _QueIn
           _QueOut
   _trySend
     _QueOut

 _isr (ROOT)
   i1_Send
     i1_QueIn
     i1_QueOut

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F2      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F2      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Dec 02 10:27:54 2019

         ___bmul@product 0022              __CFG_CP$OFF 0000            endofLine@flag 002A  
                    l113 04A1                      l124 0F96                      l222 0E68  
                    l223 0E71                      l135 0DB3                      l144 0E21  
                    l152 06A9                      l240 07EF                      l232 07CE  
                    l241 07F1                      l170 0F69                      l226 07C2  
                    l250 0FA3                      l139 0F19                      l500 05B1  
                    l156 06C2                      l164 0F3F                      l244 07F5  
                    l237 07E3                      l229 07CA                      l253 0FA7  
                    l262 0FC6                      l511 0DC6                      l183 0EF6  
                    l167 0F59                      l271 0642                      l247 0F9B  
                    l520 0633                      l280 065A                      l256 0FB2  
                    l177 07BD                      l281 0676                      l265 0FCA  
                    l282 0678                      l610 00C7                      l291 0DDC  
                    l259 0FBD                      l276 0653                      l268 0639  
                    l524 055D                      l285 067C                      l277 0655  
                    l278 0656                      l464 07FE                      l288 0DC7  
                    l626 012C                      l467 0D98                      l483 0E8F  
                    l643 027A                      l556 023D                      l628 017F  
                    l645 02EF                      l479 0FFF                      l488 05E9  
                    l666 039D                      l675 0784                      l589 0438  
                    l598 03ED                      l769 0DF2                      _isr 0004  
           __CFG_BORV$LO 0000                      wreg 0009            ?_copyConstStr 0020  
           __CFG_LVP$OFF 0000                     l1210 0E53                     l1204 0ED3  
                   l4001 03BF                     l4011 03D1                     l4003 03C2  
                   l1196 0E3A                     l4013 03D9                     l4005 03C6  
                   l4021 03E2                     l4031 03FD                     l4015 03DD  
                   l4007 03CB                     l4103 023E                     l4201 0F75  
                   l4025 03EB                     l4041 0434                     l4009 03D0  
                   l4113 0259                     l4211 0F90                     l4203 0F81  
                   l4123 027A                     l4115 0261                     l4107 0248  
                   l4213 0F95                     l4205 0F85                     l4029 03F0  
                   l4133 02C7                     l4117 026C                     l4109 0253  
                   l4053 00B6                     l4301 0485                     l4207 0F89  
                   l4151 031B                     l4143 02F0                     l4039 040B  
                   l4127 029D                     l4119 0270                     l4135 02EB  
                   l4071 010F                     l4063 00EC                     l4055 00C1  
                   l4231 04E7                     l4223 04E1                     l4215 04D0  
                   l4311 04B0                     l4303 0486                     l4209 0F8B  
                   l4153 0321                     l4161 0348                     l4145 02F7  
                   l4065 00F2                     l4073 011A                     l4049 00AC  
                   l4241 04FF                     l4233 04EB                     l4217 04D4  
                   l4321 04C8                     l4313 04B5                     l4305 0492  
                   l3611 0F14                     l3603 0F01                     l4171 0372  
                   l4155 0333                     l4147 02F9                     l4083 0139  
                   l4075 0120                     l4091 016D                     l4067 0105  
                   l4059 00CA                     l4251 0512                     l4243 0505  
                   l4235 04F1                     l4219 04DB                     l4323 04CB  
                   l4315 04BC                     l4307 049E                     l3613 0F18  
                   l3605 0F09                     l3621 0689                     l4181 0395  
                   l4173 037A                     l4165 034F                     l4157 0337  
                   l4069 0109                     l4261 053D                     l4253 0523  
                   l4245 0511                     l4237 04F3                     l4229 04E2  
                   l4317 04BF                     l4309 04A2                     l4183 0E56  
                   l3711 0FDD                     l3703 0FCB                     l3607 0F0D  
                   l3623 068E                     l3631 06A0                     l4175 037D  
                   l4167 035B                     l4159 033D                     l4079 012C  
                   l4095 017B                     l4263 0548                     l4239 04FB  
                   l4191 0DA4                     l4319 04C5                     l4271 0439  
                   l4185 0E57                     l3713 0FF1                     l3705 0FCC  
                   l3609 0F13                     l3625 0690                     l3617 067F  
                   l3641 0F1A                     l3801 0650                     l3721 0E3B  
                   l4177 038A                     l4169 0365                     l4089 0147  
                   l4265 054B                     l4257 0532                     l4193 0DA9  
                   l4281 0466                     l4273 043C                     l4187 0E5B  
                   l3715 0FF2                     l3707 0FD0                     l3635 06AE  
                   l3627 0699                     l3619 0684                     l3651 0F37  
                   l3643 0F24                     l3811 066D                     l3803 065B  
                   l3731 0DE8                     l4179 038F                     l4267 0555  
                   l4259 0537                     l4195 0DAE                     l4291 0471  
                   l4283 0467                     l4275 0443                     l4197 0F6A  
                   l4189 0E60                     l3821 07FD                     l3661 0ECC  
                   l3653 0EB2                     l3709 0FD3                     l3637 06B8  
                   l3629 069D                     l3645 0F2B                     l3901 0747  
                   l3741 0791                     l3805 0663                     l3733 0DEA  
                   l3725 0DDF                     l4269 0559                     l4293 0473  
                   l4285 0468                     l4277 0445                     l4199 0F6B  
                   l3655 0EB5                     l3719 0FF9                     l3831 0E80  
                   l3823 0E74                     l3671 0EE4                     l3591 0E1E  
                   l3583 0E0A                     l3639 06BD                     l3647 0F30  
                   l3911 0771                     l3903 0752                     l3751 07AA  
                   l3743 0797                     l3807 0667                     l3815 0670  
                   l3735 0DF1                     l3727 0DE0                     l4631 02D7  
                   l4295 0474                     l4287 0469                     l4279 0462  
                   l3841 0DC2                     l3817 07F8                     l3657 0EBC  
                   l3833 0E83                     l3825 0E79                     l3921 0564  
                   l3673 0EE8                     l3665 0ED4                     l3593 0E20  
                   l3585 0E13                     l3649 0F32                     l3681 0F51  
                   l3913 077C                     l3905 0755                     l3753 07B0  
                   l3745 079C                     l3809 066B                     l3761 07C6  
                   l3729 0DE4                     l4633 041A                     l4297 0475  
                   l4289 0470                     l3819 07F9                     l3915 0D90  
                   l3659 0ECB                     l3931 0570                     l3675 0EF2  
                   l3667 0ED5                     l3587 0E17                     l3683 0F55  
                   l3907 0758                     l3755 07B5                     l3747 07A0  
                   l3739 0787                     l3691 0DCC                     l3763 07D2  
                   l3851 0183                     l4299 0479                     l3845 0DC5  
                   l3837 0DB6                     l3917 0D94                     l3829 0E7B  
                   l3941 058F                     l3933 0576                     l3925 0566  
                   l3669 0EE0                     l3597 0EF9                     l3589 0E1D  
                   l3685 0F62                     l3677 0F40                     l3909 076C  
                   l3757 07B9                     l3749 07A4                     l3693 0DD0  
                   l3765 07D6                     l3773 07E9                     l3861 01AA  
                   l3853 018D                     l3781 0FAE                     l4629 0159  
                   l3839 0DBC                     l3951 05B3                     l3943 05A3  
                   l3935 057A                     l3919 055E                     l3599 0EFF  
                   l3687 0F66                     l3679 0F46                     l3695 0DD4  
                   l3791 0636                     l3767 07DC                     l3759 07C0  
                   l3871 01D9                     l3863 01AD                     l3855 0191  
                   l3783 0FB6                     l3775 0F99                     l3961 05D9  
                   l3953 05BD                     l3945 05A4                     l3937 0583  
                   l3697 0DD8                     l3689 0DC7                     l3793 0637  
                   l3769 07E1                     l3857 019B                     l3849 0182  
                   l3785 0FB9                     l3777 0F9F                     l3971 05EC  
                   l3963 05DF                     l3955 05D1                     l3939 0585  
                   l3795 063D                     l3699 0E22                     l3891 0226  
                   l3875 01F5                     l3867 01C9                     l3883 020F  
                   l3859 01A5                     l3787 0FC1                     l3779 0FAB  
                   l3981 0613                     l3973 05EE                     l3965 05E4  
                   l3957 05D2                     l3949 05AB                     l3797 0646  
                   l3893 022F                     l3885 0218                     l3877 01FB  
                   l3869 01CF                     l3789 0FC4                     l3983 0627  
                   l3975 05F6                     l3967 05E8                     l3799 064A  
                   l3879 0205                     l3895 0233                     l3985 0630  
                   l3977 05FA                     l3889 021A                     l3993 039E  
                   l3979 0603                     l3995 03AB                     ?_isr 0076  
                   l3989 0632                     l3997 03AC                     l3999 03B4  
           __CFG_WDTE$ON 0000          ??_skipblankLine 0025                     u4000 0DDC  
                   u4001 0DDB                     u4010 0E33                     u4011 0E31  
                   u4020 0E34                     u4030 0FDD                     u4110 0797  
                   u4031 0FDC                     u4111 0796                     u4040 0FF1  
                   u4120 07B0                     u4200 0FA7                     u4041 0FF0  
                   u4121 07AF                     u4105 078A                     u4201 0FA6  
                   u4050 0FFF                     u4130 07C6                     u4210 0FAB  
                   u4051 0FFE                     u4131 07C5                     u4211 0FAA  
                   u4300 067C                     u4140 07CE                     u4060 0E4C  
                   u4220 0FB6                     u4301 067B                     u4141 07CD  
                   u4061 0E4A                     u4221 0FB5                     u4310 0E79  
                   u4150 07D2                     u4070 0E4D                     u4230 0FC1  
                   u4311 0E78                     u4151 07D1                     u4231 0FC0  
                   u4320 0E80                     u4160 07E8                     u4080 0DE4  
                   u4400 01C2                     u4240 0FCA                     u4321 0E7F  
                   u4161 07E7                     u4081 0DE3                     u4401 01C0  
                   u4241 0FC9                     u4330 0E8E                     u4250 063D  
                   u4170 07EF                     u4090 0DF1                     u4410 01C3  
                   u4331 0E8C                     u4251 063C                     u4171 07EE  
                   u4091 0DF0                     u4340 0E8F                     u4500 056F  
                   u4260 0646                     u4180 07F5                     u4420 01CF  
                   u4501 056E                     u4261 0645                     u4181 07F4  
                   u4421 01CE                     u4350 0DBC                     u4510 0583  
                   u4270 0650                     u4430 01EE                     u4190 0F9F  
                   u4351 0DBB                     u4511 0582                     u4271 064F  
                   u4431 01EC                     u4191 0F9E                     u4360 0DC2  
                   u4600 0627                     u4520 058F                     u4280 065A  
                   u4440 01EF                     u4361 0DC1                     u4601 0626  
                   u4521 058E                     u4281 0659                     u4610 0630  
                   u4530 05A3                     u4290 0676                     u4450 01FB  
                   u4370 018D                     u4611 062F                     u4531 05A2  
                   u4291 0675                     u4451 01FA                     u4371 018C  
                   u4540 05B1                     u3820 0E1D                     u3900 0F37  
                   u4460 0218                     u4380 019B                     u4620 03B4  
                   u4700 00E6                     u4541 05B0                     u3821 0E1C  
                   u3901 0F36                     u4461 0217                     u4381 019A  
                   u4621 03B3                     u4550 05BD                     u3830 0EFF  
                   u3910 0F3F                     u4470 023C                     u4390 01A5  
                   u4630 03CB                     u4710 00F2                     u4551 05BC  
                   u3831 0EFE                     u3911 0F3E                     u4471 023B  
                   u4391 01A4                     u4631 03CA                     u4711 00F1  
                   u3920 0EBC                     u4560 05D1                     u3840 0F13  
                   u4480 077C                     u4800 0314                     u4640 03EA  
                   u4720 010F                     u3921 0EBB                     u4561 05D0  
                   u3841 0F12                     u4481 077B                     u4801 0312  
                   u4641 03E9                     u4721 010E                     u3930 0ECB  
                   u4570 05DF                     u4490 0564                     u3850 0684  
                   u4810 0315                     u4650 03FD                     u4730 011A  
                   u3931 0ECA                     u4571 05DE                     u4491 0563  
                   u3851 0683                     u4651 03FC                     u4731 0119  
                   u4900 0F90                     u4580 0603                     u3940 0EF2  
                   u3860 0689                     u4820 0321                     u4660 040A  
                   u4740 0120                     u4901 0F8F                     u4581 0602  
                   u3941 0EF1                     u3861 0688                     u4821 0320  
                   u4661 0409                     u4741 011F                     u4590 0613  
                   u3870 06A9                     u3950 0F62                     u4830 033D  
                   u4750 012B                     u4670 00B5                     u4910 04E0  
                   u4591 0612                     u3871 06A8                     u3951 0F61  
                   u4831 033C                     u4751 012A                     u4671 00B4  
                   u4911 04DF                     u5527 047F                     u3880 06AE  
                   u3960 0DCC                     u4840 0348                     u4760 0247  
                   u4680 00C6                     u4920 04F1                     u3881 06AD  
                   u3961 0DCB                     u4841 0347                     u4761 0246  
                   u4681 00C5                     u4921 04F0                     u5537 048C  
                   u3890 06BD                     u3970 0DD0                     u4850 034E  
                   u4770 0258                     u4690 00E5                     u4930 0505  
                   u3891 06BC                     u3971 0DCF                     u4851 034D  
                   u4771 0257                     u4691 00E3                     u4931 0504  
                   u3980 0DD4                     u4860 0395                     u4780 0261  
                   u4940 0511                     u3981 0DD3                     u4861 0394  
                   u4781 0260                     u4941 0510                     u4870 0E60  
                   u3990 0DD8                     u4790 0279                     u4950 0523  
                   u4871 0E5F                     u3991 0DD7                     u4791 0278  
                   u4951 0522                     u4960 053D                     u4880 0DA9  
                   i1l97 006E                     u4961 053C                     u4881 0DA8  
                   u4890 0DAE                     u4970 04B0                     u4891 0DAD  
                   u4971 04AF                     u4980 04C5                     u4981 04C4  
         sendI2Cbyte@reg 0020                     _WPUA 020C                     _WPUC 020E  
           __CFG_WRT$OFF 0000                     _Send 067D              _stobyte$596 002A  
            _stobyte$597 002C                     _cmdX 1038                     _main 0439  
        __end_ofi1_QueIn 0EB2                     fsr0h 0005                     fsr1h 0007  
                   indf0 0000                     fsr0l 0004                     indf1 0001  
                   fsr1l 0006                     btemp 007E                     start 0070  
          __CFG_IESO$OFF 0000              copyBuffer@p 0021              copyBuffer@q 0022  
        copyConstStr@dst 0022          copyConstStr@src 0020        ___bmul@multiplier 0023  
          __CFG_MCLRE$ON 0000             ?_newConvLine 0076          __end_of_SendHex 07BE  
                  ??_isr 007A          __end_of_SendStr 0F40            __CFG_PLLEN$ON 0000  
            initI2C@baud 0023                    ?_Send 0076              initI2C@flag 0021  
            initI2C@stat 0022                    ?_main 0076                    i1l100 0051  
                  i1l106 005D                    i1l108 006E                    i1l144 0E09  
                  i1l152 072C                    i1l139 0EB1                    i1l156 0744  
        sendI2Cbyte@addr 0022          sendI2Cbyte@data 0021          __end_of_cmdEcho 1030  
         ??_copyConstStr 0023                    _TRISA 008C                    _TRISC 008E  
                  _RXPPS 0E24                    _SBuff 00A0                    _Index 0075  
         __CFG_FCMEN$OFF 0000              readI2C@addr 0024                    _QueIn 0EF7  
        __end_of_errMess 1025          __end_of_initI2C 0E72          __end_of_readI2C 067D  
        __end_of_ivaMess 1013          __end_of_isdigit 0E3B          __end_of_sendI2C 07F6  
                  _msghi 1025                    _prefX 02F0         __end_ofi1_QueOut 0E0A  
           ?_sendI2Cbyte 0020          __end_of_isspace 0ED4          __end_of_prefGet 02F0  
        __end_of_myUpper 0DC7          __end_of_prefSet 0180           __CFG_BOREN$OFF 0000  
        __end_of_isupper 0E54                    pclath 000A         parseCommand@args 004A  
                  status 0003                    wtemp0 007E          __end_of_trySend 0DB4  
        __end_of_stobyte 023E               Send@txchar 0023          __initialization 0072  
           __end_of_Send 06C3             __end_of_cmdX 103A             __end_of_main 04D0  
             SendStr@str 0026            parseCommand@i 0056            parseCommand@p 0055  
          parseCommand@q 0054             ?_setConvMode 0076         ??_printInvArgErr 002B  
                 ??_Send 0022                   ??_main 0057          printInvArgErr@i 002C  
                 ?_QueIn 0076                ??i1_QueIn 0076                   ?_prefX 0030  
         __CFG_ZCDDIS$ON 0000                   _ANSELA 018C                   _ANSELC 018E  
                 _RC1REG 0199                   _RC0PPS 0EA0                   _RC1PPS 0EA1  
                 _RC1STA 019D                   _RC4PPS 0EA4                   i1l3041 0E99  
                 i1l3051 0EB0                   i1l3043 0EA1                   i1l3035 0E91  
                 i1l3211 0043                   i1l3045 0EA5                   i1l3037 0E97  
                 i1l3061 0E05                   i1l3221 0060                   i1l3213 0048  
                 i1l3205 0034                   i1l3047 0EAB                   i1l3063 0E06  
                 i1l3055 0DF3                   i1l3223 0065                   i1l3215 004D  
                 i1l3207 0039                   i1l3049 0EAC                   i1l3065 0E08  
                 i1l3057 0DFB                   i1l3161 070F                   i1l3217 004F  
                 i1l3209 003D                   i1l3059 0DFF                   i1l3163 0712  
                 i1l3171 0723                   i1l3219 0057                   i1l3165 0714  
                 i1l3157 0705                   i1l3181 0006                   i1l3175 0731  
                 i1l3167 071C                   i1l3159 070A                   i1l3191 0017  
                 i1l3183 000B                   i1l3177 073A                   i1l3169 0720  
                 i1l3193 001A                   i1l3185 0011                   i1l3179 073F  
                 i1l3195 0024                   i1l3187 0015                   i1l3197 002D  
                 i1l3189 0016                   i1l3199 0032                   u300_20 0E05  
                 u300_21 0E04                   u311_20 070A                   u311_21 0709  
                 u312_20 070F                   u320_20 0039                   u312_21 070E  
                 u320_21 0038                   u313_20 072C                   u321_20 0043  
                 u313_21 072B                   u321_21 0042                   u314_20 0731  
                 u322_20 0048                   u314_21 0730                   u322_21 0047  
                 u315_20 073F                   u323_20 004D                   u315_21 073E  
                 u323_21 004C                   u324_20 0057                   u316_20 000B  
                 u324_21 0056                   u316_21 000A                   u325_20 005D  
                 u317_20 0011                   u325_21 005C                   u317_21 0010  
                 u326_20 0065                   u318_20 0015                   u326_21 0064  
                 u318_21 0014                   u319_20 0024                   u319_21 0023  
                 _SP1BRG 019B                   u298_20 0E97                   _OSCCON 0099  
                 u298_21 0E96                   u299_20 0EAB                   u299_21 0EAA  
       __end_of_cmdCheck 0634                   _TX1REG 019A                   _WDTCON 0097  
                 _TX1STA 019E                   i1_Send 0704             ?_waitIdleI2C 0076  
                 _Buffer 0130           __CFG_PWRTE$OFF 0000                   _i2cReg 006C  
              ??_SendHex 0024                   QueIn@c 0021                   _RcvBuf 0150  
              ??_SendStr 0024                   _SndBuf 00C0                   _TxFlag 0072  
                 _QueOut 0E0A                   _Tindex 0074                   ___bmul 0DDD  
                 _cmdGet 1034           __CFG_STVREN$ON 0000                   _cmdSet 1030  
                 _sndStr 0F40         __end_of_nextItem 05EA                ??_initI2C 0020  
       __end_of_prefEcho 0439                ??_readI2C 0022                ??_isdigit 0022  
              ??_sendI2C 0022                   prefX@i 0048                   prefX@j 0046  
                 prefX@x 0036                ??_isspace 0022                ??_prefGet 0031  
              ??_myUpper 0020                ??_prefSet 0031                ??_isupper 0022  
              ??_trySend 0022                ??_stobyte 0026              sendI2C@addr 0023  
          ?_parseCommand 0076  __end_of__initialization 00A8      ___bmul@multiplicand 0020  
   __end_of_copyConstStr 0EF7           __pcstackCOMMON 0076            __end_of_QueIn 0F1A  
           __pidataBANK0 0D99             __pidataBANK1 0D86            __end_of_msghi 102B  
          __end_of_prefX 039E                ?i1_QueOut 0076     __size_of_newConvLine 000B  
     __size_of_endofLine 001E                  ??_QueIn 0020                  ??_prefX 0031  
     printInvArgErr@args 002D               __pbssBANK0 0067               __pbssBANK1 00A0  
         ??_parseCommand 0049               __pbssBANK2 0120     __size_of_sendI2Cbyte 0034  
                ?i1_Send 0076               __pmaintext 0439                  ?_QueOut 0076  
                ?___bmul 0020          __CFG_PPS1WAY$ON 0000               __pintentry 0004  
             ??i1_QueOut 0076                  ?_sndStr 0027     __size_of_setConvMode 0009  
              ?_cmdCheck 0021              prefGet@addr 0044                  _SSP1ADD 0212  
                _SSP1BUF 0211              prefGet@args 0030             newConvLine@p 0023  
                i1_QueIn 0E90               _copyBuffer 0F6A    __end_of_skipblankLine 1000  
                _i2cAddr 0070          __size_ofi1_Send 0041                  _i2cbuff 0120  
              ?_nextItem 0076                  _RcvFlag 006D              prefSet@addr 0042  
              ?_prefEcho 0030              prefSet@args 0030                  _SendHex 0785  
                _SendStr 0F1A     __size_of_waitIdleI2C 0016                  QueOut@c 0021  
                _Sending 0073        __end_of_endofLine 0E90          __size_of_QueOut 0018  
        __size_of___bmul 0016                  _echoFLG 0071                  _cmdEcho 102B  
    __end_of_base64chars 0704          __size_of_sndStr 002A                  __ptext1 0DA4  
                __ptext2 04D0                  __ptext3 00AC                  __ptext4 023E  
                __ptext5 039E                  __ptext6 02F0                  __ptext7 0F97  
                __ptext8 0180                  __ptext9 0E3B                  _convErr 0067  
                _errMess 1013                  _initI2C 0E54                  _readI2C 0634  
             ??_cmdCheck 0023                  _ivaMess 1000                  _isdigit 0E22  
           __size_of_isr 006C                  _sendI2C 07BE                  _isspace 0EB2  
                _prefGet 023E                  _myUpper 0DB4                  _prefSet 00AC  
                _isupper 0E3B                  _trySend 0DA4                  clrloop0 0D7B  
                _stobyte 0180     end_of_initialization 00A8                  isr@data 007B  
  __size_of_copyConstStr 0023                  init_ram 0D80                  initloop 0D81  
             ??_nextItem 002B               ??_prefEcho 0031                  sndStr@p 0027  
                sndStr@q 002A     __end_of_parseCommand 055E                _PORTCbits 000E  
              i1QueOut@c 0077         __CFG_FOSC$INTOSC 0000             _copyConstStr 0ED4  
            ?_copyBuffer 0076           __end_ofi1_Send 0745              _base64chars 06C3  
         __end_of_QueOut 0E22           __end_of___bmul 0DF3           __end_of_cmdGet 1038  
         __end_of_cmdSet 1034               readI2C@buf 0020               readI2C@num 0023  
         __end_of_sndStr 0F6A        __size_ofi1_QueOut 0017      start_initialization 0072  
            __end_of_isr 0070  __size_of_printInvArgErr 0040                 ??i1_Send 0078  
               ??_QueOut 0020                 ??___bmul 0021            ??_newConvLine 0022  
            __pdataBANK0 005C              __pdataBANK1 00E0      __size_of_copyBuffer 002D  
               ??_sndStr 0029               sendI2C@buf 0020              __pbssCOMMON 0070  
              ___latbits 0002            __pcstackBANK0 0020        __size_of_cmdCheck 004A  
               ?i1_QueIn 0076            ??_sendI2Cbyte 0022             setConvMode@m 0021  
               ?_SendHex 0076                 ?_SendStr 0076               prefX@F4812 0064  
  __size_of_parseCommand 008E        __size_of_nextItem 008C        __size_of_prefEcho 009B  
          ??_setConvMode 0020        _skipblankLine$562 0027        _skipblankLine$563 0029  
              _endofLine 0E72               prefGet@buf 0033               prefGet@reg 0043  
              cmdCheck@b 0025                cmdCheck@c 0021                cmdCheck@n 0024  
               ?_initI2C 0076                 ?_readI2C 0020                 _BAUD1CON 019F  
    __end_of_newConvLine 0D99                 ?_isdigit 0020                 ?_sendI2C 0020  
               ?_isspace 0020               prefSet@buf 0036                 ?_prefGet 0030  
               ?_myUpper 0076                 ?_prefSet 0030                 ?_isupper 0020  
         __size_of_QueIn 0023                 ?_trySend 0076                 ?_stobyte 0076  
         __size_of_prefX 00AE                _prefX$636 0043             _parseCommand 04D0  
          ??_waitIdleI2C 0020                clear_ram0 0D7A                 _PIE1bits 0091  
    __end_of_sendI2Cbyte 0FCB                _prefArray 00E0             prefEcho@args 0030  
               _PIR1bits 0011                 _SSP1CON1 0215                 _SSP1STAT 0214  
               i1QueIn@c 0077             _nextItem$574 002E             _nextItem$575 0032  
           _nextItem$576 0030             _nextItem$577 0033               ?_endofLine 0076  
               i1_QueOut 0DF3   __size_of_skipblankLine 0035                main@bring 005B  
    __end_of_setConvMode 07FF           _printInvArgErr 0745             ??_copyBuffer 0020  
               _i2cNdata 006B         __size_ofi1_QueIn 0022                 SendHex@b 0026  
               SendHex@c 0027                 SendStr@i 0025         __size_of_SendHex 0039  
       __size_of_SendStr 0026      __end_of_waitIdleI2C 0DDD              _newConvLine 0D8E  
     __end_of_copyBuffer 0F97                 _cmdCheck 05EA                 _cmdArray 005C  
       __size_of_initI2C 001E         __size_of_readI2C 0049   __end_of_printInvArgErr 0785  
              nextItem@p 002D         __size_of_isdigit 0019         __size_of_sendI2C 0038  
       __size_of_isspace 0022         __size_of_prefGet 00B2         __size_of_myUpper 0013  
       __size_of_prefSet 00D4                 __ptext10 0E22                 __ptext11 0DDD  
               __ptext20 0E0A                 __ptext12 07BE                 __ptext21 0EF7  
               __ptext13 0634                 __ptext30 0DB4                 __ptext22 0ED4  
               __ptext14 0DC7                 __ptext31 0E54                 __ptext23 055E  
               __ptext15 0785                 __ptext32 0F6A                 __ptext24 0E72  
               __ptext16 0745                 __ptext25 0FCB                 __ptext17 0F40  
               __ptext34 0704                 __ptext26 0EB2                 __ptext18 0F1A  
               __ptext35 0DF3                 __ptext27 0D8E                 __ptext19 067D  
               __ptext36 0E90                 __ptext28 07F6                 __ptext29 05EA  
       __size_of_isupper 0019             _SSP1CON1bits 0215             _SSP1CON2bits 0216  
               _convData 0068                prefEcho@f 0033                prefX@addr 0047  
               _convMode 0069                prefX@args 0030               stobyte@ans 002E  
            _sendI2Cbyte 0F97         __size_of_trySend 0010         __size_of_stobyte 00BE  
               _lineBuff 006A            __size_of_Send 0046            __size_of_main 0097  
          _skipblankLine 0FCB                 _nextItem 055E                 _prefEcho 039E  
             _RC1STAbits 019D                 int$flags 007E              ??_endofLine 002A  
           _SSP1STATbits 0214              _setConvMode 07F6                 main@loop 0059  
            _isspace$962 0024                 readI2C@n 0021             i1Send@txchar 0079  
             _INTCONbits 000B          ?_printInvArgErr 0076                 isdigit@c 0020  
            _prefSet$615 0040                 sendI2C@n 0021                 intlevel1 0000  
         ?_skipblankLine 0076                 isspace@c 0020                 prefX@buf 0039  
               prefX@reg 0045                 myUpper@c 0020              _waitIdleI2C 0DC7  
      __CFG_CLKOUTEN$OFF 0000                 prefSet@i 0043                 isupper@c 0020  
          __pstringtext1 06C3            __pstringtext2 1000            __pstringtext3 1013  
          __pstringtext4 1025            __pstringtext5 102B            __pstringtext6 1030  
          __pstringtext7 1034            __pstringtext8 1038                 stobyte@s 002F  
             _TX1STAbits 019E  
